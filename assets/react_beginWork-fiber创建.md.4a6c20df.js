import{_ as n,c as s,o as a,a as e}from"./app.f27e6278.js";const f='{"title":"beginWork - fiber\u7684\u521B\u5EFA","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u5F00\u59CB","slug":"\u5F00\u59CB"},{"level":2,"title":"beginWork","slug":"beginwork"},{"level":2,"title":"updateHostRoot","slug":"updatehostroot"},{"level":2,"title":"reconcileChildren","slug":"reconcilechildren"},{"level":2,"title":"reconcileChildFibers","slug":"reconcilechildfibers"},{"level":3,"title":"REACTPORTALTYPE","slug":"react-portal-type"},{"level":3,"title":"REACTLAZYTYPE","slug":"react-lazy-type"},{"level":3,"title":"REACTELEMENTTYPE","slug":"react-element-type"},{"level":3,"title":"type === function","slug":"type-function"},{"level":3,"title":"type === string","slug":"type-string"},{"level":3,"title":"\u5176\u4ED6 type","slug":"\u5176\u4ED6-type"},{"level":3,"title":"\u521B\u5EFA fiber","slug":"\u521B\u5EFA-fiber"},{"level":2,"title":"diff \u7B97\u6CD5","slug":"diff-\u7B97\u6CD5"},{"level":3,"title":"\u5BF9\u6BD4\u5F00\u59CB\u90E8\u5206","slug":"\u5BF9\u6BD4\u5F00\u59CB\u90E8\u5206"},{"level":3,"title":"\u5BF9\u6BD4\u5269\u4F59\u90E8\u5206","slug":"\u5BF9\u6BD4\u5269\u4F59\u90E8\u5206"}],"relativePath":"react/beginWork-fiber\u521B\u5EFA.md","lastUpdated":1658881380000}',t={},p=e(`<h1 id="beginwork-fiber\u7684\u521B\u5EFA" tabindex="-1">beginWork - fiber\u7684\u521B\u5EFA <a class="header-anchor" href="#beginwork-fiber\u7684\u521B\u5EFA" aria-hidden="true">#</a></h1><h2 id="\u5F00\u59CB" tabindex="-1">\u5F00\u59CB <a class="header-anchor" href="#\u5F00\u59CB" aria-hidden="true">#</a></h2><p>\u66F4\u65B0\u8FC7\u7A0B\u4E2D\uFF0C\u8C03\u5EA6\u4EFB\u52A1\u6700\u7EC8\u6267\u884C\u7684\u5C0F\u4EFB\u52A1\u662F<code>performUnitOfWork</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">unitOfWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>

  <span class="token keyword">let</span> next<span class="token punctuation">;</span>
  <span class="token comment">// \u4E3A children \u521B\u5EFA fiber</span>
  <span class="token comment">// \u8C03\u7528 reconcileChildren\uFF0C\u5EFA\u7ACB\u4E86\u5F53\u524D unitOfWork \u53CA\u5176 children \u7684fiber\u8054\u7CFB</span>
  <span class="token comment">// \u5E76\u4E14\u5C06 fiber \u7684 flags \u8FDB\u884C\u4E86\u6807\u8BB0\uFF0C\u7528\u4E8E\u66FF\u6362\u3001\u79FB\u9664\u7B49\u64CD\u4F5C</span>
  next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> unitOfWork<span class="token punctuation">,</span> subtreeRenderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  unitOfWork<span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u6CA1\u6709 next child\uFF0C\u90A3\u4E48\u5F00\u59CB complete.</span>
    <span class="token comment">// \u521B\u5EFA\u771F\u5B9E\u8282\u70B9</span>
    <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>unitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u5B58\u5728 next,\u8BF4\u660E\u8FD8\u6709 child,\u7EE7\u7EED\u5411\u4E0B\u9012\u5F52 beginWork</span>
    workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u603B\u5171\u5206\u4E3A\u4E24\u6B65\uFF0C\u4E00\u662F<code>beginWork</code>\uFF0C\u4E8C\u662F<code>completeWork</code>\u3002<code>beginWork</code>\u4E3B\u8981\u662F\u5411\u4E0B\u201D\u9012\u201C\u7684\u8FC7\u7A0B\uFF0C\u6839\u636E\u8282\u70B9\u521B\u5EFA\u6216\u590D\u7528<code>fiber</code>\u3002<code>completeWork</code>\u662F\u5411\u4E0A\u201D\u5F52\u201C\u7684\u8FC7\u7A0B\uFF0C\u7531\u4E0B\u81F3\u4E0A\u6839\u636E<code>fiber</code>\u521B\u5EFA\u6216\u590D\u7528\u771F\u5B9E\u8282\u70B9\u3002</p><h2 id="beginwork" tabindex="-1">beginWork <a class="header-anchor" href="#beginwork" aria-hidden="true">#</a></h2><p><code>beginWork</code>\u4E3B\u8981\u5206\u4E3A\u4E24\u90E8\u5206\u7EC4\u6210\uFF0C\u4E00\u90E8\u5206\u4E3A<code>reconcilerChildren</code>\uFF0C\u4E3B\u8981\u7684\u4F5C\u7528\u662F\u4E3A\u5F53\u524D\u7684<code>fiber</code>\u8282\u70B9\u7684\u5B50\u8282\u70B9\u521B\u5EFA<code>fiber</code>\uFF0C\u5E76\u4E14\u5EFA\u7ACB<code>fiber</code>\u4E4B\u95F4\u7684\u8054\u7CFB\u3002\u7B2C\u4E8C\u90E8\u5206\u662F\u4E3A\u4E0D\u540C\u7C7B\u578B\u7684<code>fiber</code>\u8282\u70B9\u66F4\u65B0\u4E0D\u540C\u7684\u5C5E\u6027\u3002<code>beginWork</code>\u7684\u5B9A\u4E49\u662F\u5728<code>react-reconciler/src/ReactFiberBeginWork.new.js</code>\u6587\u4EF6\u4E2D\u3002</p><h2 id="updatehostroot" tabindex="-1">updateHostRoot <a class="header-anchor" href="#updatehostroot" aria-hidden="true">#</a></h2><p><code>HostRoot</code>\u7684<code>fiber</code>\u5728\u6700\u5F00\u59CB\u5C31\u5DF2\u7ECF\u521B\u5EFA\u4E86\uFF0C\u4E5F\u5C31\u662F\u4E4B\u524D\u63D0\u5230\u7684<code>RootFiber</code>\u3002\u8FD9\u91CC\u5148\u4ECE<code>updateHostRoot</code>\u65B9\u6CD5\u5F00\u59CB\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> nextProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
<span class="token keyword">const</span> prevState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
<span class="token keyword">const</span> prevChildren <span class="token operator">=</span> prevState<span class="token punctuation">.</span>element<span class="token punctuation">;</span>
<span class="token function">cloneUpdateQueue</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nextState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nextChildren <span class="token operator">===</span> prevChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// children \u6CA1\u6709\u53D8\u5316\uFF0C\u63D0\u524D\u7EC8\u6B62\u5F53\u524Dchild\u5BF9\u6BD4\uFF0C</span>
  <span class="token comment">// \u5982\u679C\u6709\u5B59\u5B50\u8282\u70B9\u53D8\u5316\uFF0C\u90A3\u4E48\u76F4\u63A5\u627E\u5230\u5BF9\u5E94\u5B59\u5B50\u8282\u70B9\u8FDB\u884C\u5904\u7406</span>
  <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u9996\u5148\u6267\u884C<code>processUpdateQueue</code>\u65B9\u6CD5\uFF0C\u5728<code>UpdateQueue</code>\u7AE0\u8282\u4E2D\u5DF2\u7ECF\u63D0\u5230\uFF0C\u8BE5\u65B9\u6CD5\u4E3B\u8981\u662F\u6267\u884C<code>updateQueue</code>\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684<code>state</code>\u3002\u5982\u679C\u524D\u540E\u7684<code>state</code>\u4E00\u81F4\uFF0C\u90A3\u4E48\u53EF\u4EE5\u8DF3\u8FC7\u540E\u7EED\u7684<code>reconcile</code>\u9636\u6BB5\u3002\u5982\u679C\u4E0D\u4E00\u81F4\uFF0C\u5C31\u9700\u8981\u6267\u884C<code>reconcileChildren</code>\u65B9\u6CD5\u4E3A\u5B50\u8282\u70B9\u5206\u522B\u521B\u5EFA<code>fiber</code>\u4E86\u3002</p><div class="language-javascript"><pre><code><span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="reconcilechildren" tabindex="-1">reconcileChildren <a class="header-anchor" href="#reconcilechildren" aria-hidden="true">#</a></h2><p><code>reconcileChildren</code>\u5206\u4E3A\u4E24\u79CD\u60C5\u51B5\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>
  <span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// \u8001\u7684 fiber</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span> <span class="token comment">// \u5F53\u524D\u5DE5\u4F5C\u7684 fiber\uFF0C\u65B0fiber</span>
  <span class="token literal-property property">nextChildren</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token comment">// \u65B0 fiber pendingProps \u4E0A\u7684 children</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span>
      workInProgress<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      nextChildren<span class="token punctuation">,</span>
      renderLanes<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>
      workInProgress<span class="token punctuation">,</span>
      current<span class="token punctuation">.</span>child<span class="token punctuation">,</span>
      nextChildren<span class="token punctuation">,</span>
      renderLanes<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E00\u79CD\u662F<code>current</code>\u5B58\u5728\uFF0C\u4E00\u79CD\u662F<code>current</code>\u4E0D\u5B58\u5728\uFF0C\u4ED6\u4EEC\u552F\u4E00\u7684\u533A\u522B\u5C31\u662F\u7B2C\u4E8C\u4E2A\u53C2\u6570\u4E0D\u4E00\u81F4\u3002\u627E\u5230<code>ReactChildFiber.new.js</code>\u6587\u4EF6\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> reconcileChildFibers <span class="token operator">=</span> <span class="token function">ChildReconciler</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mountChildFibers <span class="token operator">=</span> <span class="token function">ChildReconciler</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5B83\u4EEC\u7684\u533A\u522B\u5C31\u662F\u7B2C\u4E00\u4E2A\u53C2\u6570\u4E0D\u540C\uFF0C\u5B9E\u9645\u4E0A\u4E0E<code>current</code>\u5B58\u4E0D\u5B58\u5728\u662F\u5177\u6709\u4E00\u5B9A\u5173\u7CFB\u7684\u3002\u8FD9\u4E2A\u53C2\u6570\u5C24\u4E3A\u5173\u952E\uFF0C\u5B83\u4F1A\u5F71\u54CD\u5230\u540E\u7EED\u7684<code>fiber.flags</code>\u7684\u503C\u3002</p><h2 id="reconcilechildfibers" tabindex="-1">reconcileChildFibers <a class="header-anchor" href="#reconcilechildfibers" aria-hidden="true">#</a></h2><p>\u6211\u4EEC\u5148\u6765\u770B\u4E00\u4E0B<code>reconcileChildFibers</code>\u65B9\u6CD5\uFF0C\u5F53<code>newChild</code>\u4E3A<code>string/number</code>\u65F6\u6BD4\u8F83\u7B80\u5355\uFF0C\u5C31\u662F\u4E00\u4E2A<code>text</code>\u8282\u70B9\u3002\u6211\u4EEC\u4E3B\u8981\u8BA8\u8BBA\u4E3A<code>object</code>\u7684\u60C5\u51B5\uFF0C\u5176\u4E2D<code>newChild.$$typeof</code>\u4E3B\u8981\u5206\u4E3A\u4E09\u79CD\u60C5\u51B5\uFF1A</p><h3 id="react-portal-type" tabindex="-1">REACT_PORTAL_TYPE <a class="header-anchor" href="#react-portal-type" aria-hidden="true">#</a></h3><p>\u6B64\u8282\u70B9\u662F\u7531<code>React.createPortal</code>\u65B9\u6CD5\u521B\u5EFA:</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPortal</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">children</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  <span class="token literal-property property">containerInfo</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">implementation</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReactPortal <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PORTAL_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> key<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    containerInfo<span class="token punctuation">,</span>
    implementation<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6B64\u65F6<code>jsx</code>\u89E3\u6790\u51FA\u6765\u7684<code>type</code>\u5C31\u662F\u8FD4\u56DE\u7684<code>type</code>\u3002\u800C\u8FD9\u4E2A<code>type</code>\u91CC\u7684<code>$$typeof</code>\u662F<code>REACT_PORTAL_TYPE</code>\u3002</p><h3 id="react-lazy-type" tabindex="-1">REACT_LAZY_TYPE <a class="header-anchor" href="#react-lazy-type" aria-hidden="true">#</a></h3><p>\u6B64\u65F6\u8C03\u7528\u7684<code>React.lazy</code>\u65B9\u6CD5\u521B\u5EFA\u7684\u8282\u70B9:</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> lazy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">ctor</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Thenable<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> LazyComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_status</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_result</span><span class="token operator">:</span> ctor<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token literal-property property">lazyType</span><span class="token operator">:</span> LazyComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_LAZY_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_payload</span><span class="token operator">:</span> payload<span class="token punctuation">,</span>
    <span class="token literal-property property">_init</span><span class="token operator">:</span> lazyInitializer<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> lazyType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="react-element-type" tabindex="-1">REACT_ELEMENT_TYPE <a class="header-anchor" href="#react-element-type" aria-hidden="true">#</a></h3><p>\u5F53<code>$$typeof</code>\u4E3A<code>REACT_ELEMENT_TYPE</code>\u7684\u65F6\u5019\uFF0C\u4F1A\u8C03\u7528<code>reconcileSingleElement</code>\u65B9\u6CD5\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">return</span> <span class="token function">placeSingleChild</span><span class="token punctuation">(</span>
  <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>
    returnFiber<span class="token punctuation">,</span>
    currentFirstChild<span class="token punctuation">,</span>
    newChild<span class="token punctuation">,</span>
    lanes<span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
</code></pre></div><p>\u5728<code>reconcileSingleElement</code>\u65B9\u6CD5\u91CC\u4F1A\u6821\u9A8C<code>key</code>\u548C<code>type</code>\u662F\u5426\u4E00\u81F4\uFF0C\u5982\u679C\u4E00\u81F4\u5219\u4F7F\u7528<code>useFiber</code>\u65B9\u6CD5\u8FDB\u884C\u590D\u7528<code>fiber</code>\u3002<code>useFiber</code>\u65B9\u6CD5\u4F1A\u8C03\u7528<code>createWorkInProgress</code>\u65B9\u6CD5\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> workInProgress <span class="token operator">=</span> current<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// \u771F\u5B9E\u8282\u70B9\u4E5F\u88AB\u590D\u7528\u4E86</span>
  workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> current<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>

  <span class="token comment">// \u6BCF\u6B21\u521B\u5EFA\u7684\u65F6\u5019\u4F1A\u5EFA\u7ACB\u76F8\u5E94\u7684\u5173\u7CFB</span>
  workInProgress<span class="token punctuation">.</span>alternate <span class="token operator">=</span> current<span class="token punctuation">;</span>
  current<span class="token punctuation">.</span>alternate <span class="token operator">=</span> workInProgress<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C<code>current.alternate</code>\u4E0D\u5B58\u5728\uFF0C\u90A3\u4E48\u4F1A\u4EE5<code>current</code>\u4E3A\u57FA\u51C6\uFF0C\u521B\u5EFA\u65B0\u7684<code>fiber</code>\uFF0C<strong>\u5E76\u4E14\u65B0\u7684fiber\u548Ccurrent\u4E4B\u95F4\u901A\u8FC7alternate\u5C5E\u6027\u5EFA\u7ACB\u8054\u7CFB\u3002\u9664\u6B64\u4E4B\u5916\uFF0C\u65B0\u7684fiber\u8FD8\u4F1A\u590D\u7528current\u7684stateNode\uFF0C\u5B9E\u9645\u4E0A\u662F\u590D\u7528\u4E86fiber\u5BF9\u5E94\u7684\u771F\u5B9E\u8282\u70B9\u3002</strong></p><p>\u5982\u679C<code>key</code>\u6216\u8005<code>type</code>\u4E0D\u4E00\u81F4\u65F6\uFF0C\u4F1A\u8C03\u7528<code>createFiberFromElement</code>\u65B9\u6CD5\u6839\u636E<code>jsx</code>\u89E3\u6790\u51FA\u6765\u7684<code>ReactElement</code>\u521B\u5EFA\u65B0\u7684<code>fiber</code>\uFF0C\u8BE5\u65B9\u6CD5\u53C8\u4F1A\u8C03\u7528<code>createFiberFromTypeAndProps</code>\u65B9\u6CD5\u6765\u521B\u5EFA<code>fiber</code>\uFF0C\u5728<code>ReactFiber.new.js</code>\u6587\u4EF6\u4E2D\u627E\u5230<code>createFiberFromTypeAndProps</code>\u65B9\u6CD5\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldConstruct</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fiberTag <span class="token operator">=</span> ClassComponent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="type-function" tabindex="-1">type === function <a class="header-anchor" href="#type-function" aria-hidden="true">#</a></h3><p>\u5982\u679C<code>type</code>\u4E3A<code>function</code>\uFF0C\u53EF\u80FD\u662F<code>class</code>\u7EC4\u4EF6\u4E5F\u53EF\u80FD\u662F\u51FD\u6570\u7EC4\u4EF6\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">shouldConstruct</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">Component</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prototype <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>prototype <span class="token operator">&amp;&amp;</span> prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C<code>shouldConstruct(type)</code>\u4E3A<code>true</code>\uFF0C\u8BF4\u660E<code>isReactComponent</code>\u5B58\u5728\u3002\u4F46\u662F<code>isReactComponent</code>\u5728\u54EA\u91CC\u5B9A\u4E49\u7684\u5462\uFF1F\u6211\u4EEC\u5728\u5199\u7C7B\u7EC4\u4EF6\u7684\u65F6\u5019\u901A\u5E38\u4F1A\u5199<code>extends Component</code>\uFF0C\u5728<code>ReactBaseClass.new.js</code>\u6587\u4EF6\u4E2D\u627E\u5230<code>Component</code>\u7684\u5B9A\u4E49\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u53EF\u4EE5\u770B\u51FA<code>class</code>\u7EC4\u4EF6\u7684<code>isReactComponent</code>\u662F\u5B58\u5728\u7684\uFF0C\u4E5F\u5C31\u662F\u5F53<code>shouldConstruct(type)</code>\u5B58\u5728\u65F6\uFF0C\u8868\u793A\u4ED6\u4E3A<code>class</code>\u7EC4\u4EF6\u3002</p><h3 id="type-string" tabindex="-1">type === string <a class="header-anchor" href="#type-string" aria-hidden="true">#</a></h3><p>\u5F53<code>type</code>\u4E3A<code>string</code>\u7684\u65F6\u5019\uFF0C\u8BF4\u660E\u662F\u666E\u901A\u6807\u7B7E\uFF0C\u7EDF\u4E00\u6807\u8BB0\u4E3A<code>HostComponent</code></p><div class="language-javascript"><pre><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fiberTag <span class="token operator">=</span> HostComponent<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre></div><h3 id="\u5176\u4ED6-type" tabindex="-1">\u5176\u4ED6 type <a class="header-anchor" href="#\u5176\u4ED6-type" aria-hidden="true">#</a></h3><p>\u5176\u4ED6\u7684\u90FD\u662F<code>React</code>\u5B9A\u4E49\u7684\u4E00\u4E9B<code>type</code>\uFF0C\u6BD4\u5982<code>REACT_FRAGMENT_TYPE</code>\u3001<code>REACT_SUSPENSE_TYPE</code>\u7B49\u3002\u9700\u8981\u6CE8\u610F\u7684\u662F<code>type</code>\u4E3A<code>object</code>\u7684\u65F6\u5019\uFF0C<code>REACT_PROVIDER_TYPE</code>\u3001<code>REACT_CONTEXT_TYPE</code>\u7B49<code>fiber</code>\u662F\u5728\u8FD9\u4E2A\u4F4D\u7F6E\u521B\u5EFA\u7684\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token constant">REACT_PROVIDER_TYPE</span><span class="token operator">:</span>
			fiberTag <span class="token operator">=</span> ContextProvider<span class="token punctuation">;</span>
			<span class="token keyword">break</span> getTag<span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token constant">REACT_CONTEXT_TYPE</span><span class="token operator">:</span>
			fiberTag <span class="token operator">=</span> ContextConsumer<span class="token punctuation">;</span>
      <span class="token keyword">break</span> getTag<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">REACT_FORWARD_REF_TYPE</span><span class="token operator">:</span>
      fiberTag <span class="token operator">=</span> ForwardRef<span class="token punctuation">;</span>
			<span class="token keyword">break</span> getTag<span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token constant">REACT_MEMO_TYPE</span><span class="token operator">:</span>
			fiberTag <span class="token operator">=</span> MemoComponent<span class="token punctuation">;</span>
			<span class="token keyword">break</span> getTag<span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token constant">REACT_LAZY_TYPE</span><span class="token operator">:</span>
			fiberTag <span class="token operator">=</span> LazyComponent<span class="token punctuation">;</span>
			resolvedType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span> getTag<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u521B\u5EFA-fiber" tabindex="-1">\u521B\u5EFA fiber <a class="header-anchor" href="#\u521B\u5EFA-fiber" aria-hidden="true">#</a></h3><p>\u6807\u8BB0\u5B8C<code>fiberTag</code>\uFF0C\u6700\u540E\u5F00\u59CB\u521B\u5EFA<code>fiber</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>fiberTag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
fiber<span class="token punctuation">.</span>elementType <span class="token operator">=</span> type<span class="token punctuation">;</span>
fiber<span class="token punctuation">.</span>type <span class="token operator">=</span> resolvedType<span class="token punctuation">;</span>
</code></pre></div><p>\u8FD9\u91CC\u7684<code>fiberTag</code>\u662F<code>React</code>\u4E2D\u5BF9\u5E94\u7684\u4E00\u5957\u6807\u7B7E<code>Tag</code>\u3002<code>elementType</code>\u662F<code>jsx</code>\u89E3\u6790\u51FA\u6765\u7684<code>type</code>\uFF0C\u800C<code>fiber.type</code>\u5219\u662F\u5904\u7406\u8FC7\u540E\u7684<code>type</code>\uFF0C\u56E0\u6B64<code>elementType</code>\u548C<code>type</code>\u4F1A\u5B58\u5728\u4E0D\u4E00\u81F4\u7684\u60C5\u51B5\u3002</p><h2 id="diff-\u7B97\u6CD5" tabindex="-1">diff \u7B97\u6CD5 <a class="header-anchor" href="#diff-\u7B97\u6CD5" aria-hidden="true">#</a></h2><p>\u56DE\u5230<code>reconcileChildFibers</code>\u65B9\u6CD5\uFF0C\u9664\u4E86\u5BF9\u8C61\u5F62\u5F0F\u7684<code>newChild</code>\u5916\uFF0C\u8FD8\u53EF\u80FD\u5B58\u5728\u6570\u7EC4\u5F62\u5F0F\u7684<code>newChild</code>\uFF0C\u4F1A\u8FDB\u5165<code>isArray</code>\u5206\u652F\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// diff \u7B97\u6CD5</span>
	<span class="token keyword">return</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>
		returnFiber<span class="token punctuation">,</span>
		currentFirstChild<span class="token punctuation">,</span>
		newChild<span class="token punctuation">,</span>
		lanes<span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u4E2A\u5206\u652F\u7684\u4E3B\u8981\u4F5C\u7528\u5C31\u662F\u5BF9\u6BD4<code>newChild</code>(\u4E5F\u5C31\u662F<code>jsx</code>\u63A5\u4E0B\u51FA\u6765\u7684<code>ReactElement</code>)\u548C\u5DF2\u6709\u7684\u8001<code>fiber</code>\u7ED3\u6784\uFF0C\u8FDB\u884C\u590D\u7528<code>fiber</code>\u548C\u771F\u5B9E\u8282\u70B9\uFF0C\u5E76\u4E14\u5BF9<code>fiber</code>\u6807\u8BB0\u5220\u9664\u3001\u66FF\u6362\u7B49\u64CD\u4F5C\u3002\u8FD9\u4E2A\u5BF9\u6BD4\u7684\u8FC7\u7A0B\u5C31\u662F<code>diff</code>\u7B97\u6CD5\u3002</p><h3 id="\u5BF9\u6BD4\u5F00\u59CB\u90E8\u5206" tabindex="-1">\u5BF9\u6BD4\u5F00\u59CB\u90E8\u5206 <a class="header-anchor" href="#\u5BF9\u6BD4\u5F00\u59CB\u90E8\u5206" aria-hidden="true">#</a></h3><p>\u4EE5\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50\u5F00\u59CB\uFF1A\u5047\u5982\u8001\u8282\u70B9<code>A\uFF0CB\uFF0CC\uFF0CD\uFF0CE</code>\u5BF9\u5E945\u4E2A\u8001<code>fiber</code>\uFF0C\u73B0\u5728\u65B0\u8282\u70B9\u89E3\u6790\u51FA\u6765\u7684\u662F<code>A\uFF0CB\uFF0CD\uFF0CE\uFF0CF</code>5\u4E2A<code>ReactElement</code>\uFF08\u5728\u672A\u5904\u7406\u6210<code>fiber</code>\u4E4B\u524D\uFF09\u3002\u6700\u5F00\u59CB\u65F6\u6211\u4EEC\u9700\u8981\u4F9D\u6B21\u4ECE\u5934\u5230\u5C3E\u8FDB\u884C\u5BF9\u6BD4(\u4E3B\u8981\u662F\u5BF9\u6BD4<code>key</code>\u548C<code>type</code>\u4E24\u4E2A\u5C5E\u6027)\uFF0C\u53D1\u73B0<code>A\uFF0CB</code>\u662F\u53EF\u4EE5\u590D\u7528\u7684\uFF0C\u4F46\u662F<code>C</code>\u548C<code>D</code>\u4E0D\u4E00\u81F4\uFF0C\u4E0D\u80FD\u590D\u7528\uFF0C\u6B64\u65F6\u9000\u51FA\u5F53\u524D\u5BF9\u6BD4\u90E8\u5206\u3002<code>React</code>\u8FD9\u90E8\u5206\u5BF9\u6BD4\u7684\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-javascript"><pre><code><span class="token comment">// oldFiber \u662F\u8001 fiber \u7684\u7B2C\u4E00\u4E2A child\uFF0C\u53EF\u4EE5\u901A\u8FC7 sibling \u8FDB\u884C\u904D\u5386\u3002</span>
<span class="token keyword">let</span> oldFiber <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>
<span class="token comment">// lastPlacedIndex \u8868\u793A\u6700\u540E\u4E00\u4E2A\u8001fiber\u88AB\u590D\u7528\u7684\u4F4D\u7F6E</span>
<span class="token keyword">let</span> lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// \u8868\u793A\u65B0 ReactElement \u7684\u4F4D\u7F6E</span>
<span class="token keyword">let</span> newIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// \u8868\u793A\u4E0B\u4E00\u4E2A\u8001fiber</span>
<span class="token keyword">let</span> nextOldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// Diff \u7B97\u6CD5\uFF0C\u6807\u8BB0\u5B50\u8282\u70B9\u4E2D\u9700\u8981\u7684\u64CD\u4F5C\uFF0C\u8BB0\u5F55\u5728 flags \u4E2D</span>
<span class="token comment">// \u8FD9\u4E2A\u4F4D\u7F6E\u76F8\u5F53\u4E8E\u53EA\u5BF9\u6BD4\u4E86\u524D\u9762\u7684\u4E00\u90E8\u5206\uFF0C</span>
<span class="token comment">// \u5982\u679C\u51FA\u73B0 key \u548C type \u4E0D\u4E00\u81F4\u7684\u60C5\u51B5\uFF0C\u90A3\u4E48\u4F1A\u8DF3\u51FA\u5BF9\u6BD4\u3002</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>oldFiber <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span>newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber<span class="token punctuation">.</span>index <span class="token operator">&gt;</span> newIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8FD9\u91CC\u76F8\u5F53\u4E8E \u4E00\u76F4\u627E\u5230 old fiber index \u4E0E newIdx \u76F8\u7B49\u7684\u8282\u70B9</span>
    <span class="token comment">// \u5426\u5219\u7684\u8BDD\uFF0ColdFiber \u4E0D\u5411\u540E\u904D\u5386\u3002</span>
    nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">;</span>
    oldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u904D\u5386\u4E0B\u4E00\u4E2A fiber </span>
    nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u8FD9\u91CC\u7684 newChildren \u662F jsx \u89E3\u6790\u51FA\u6765\u7684 children\uFF0C\u4E3A ReactElement\u8282\u70B9</span>
  <span class="token comment">// \u6839\u636E\u8282\u70B9\u521B\u5EFA\u6216\u8005\u66F4\u65B0 fiber</span>
  <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateSlot</span><span class="token punctuation">(</span>
    returnFiber<span class="token punctuation">,</span>
    oldFiber<span class="token punctuation">,</span> <span class="token comment">// \u8001 fiber</span>
    newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// \u65B0 element</span>
    lanes<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// key \u6216 type \u4E0D\u76F8\u540C\u65F6\uFF0C\u4E0D\u53EF\u590D\u7528\u3002</span>
  <span class="token comment">// \u6B64\u65F6 newFiber \u4E3A null\uFF0C\u5BF9\u6BD4\u5C31\u4F1A\u7EC8\u6B62\u3002</span>
  <span class="token comment">// \u8FD9\u5C31\u610F\u5473\u7740\u627E\u5230\u4E86\u7B2C\u4E00\u4E2A\u65E0\u6CD5\u590D\u7528\u7684\u8282\u70B9</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldFiber <span class="token operator">=</span> nextOldFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u9996\u6B21\u521B\u5EFA\u7684\u65F6\u5019\u65E0\u9700\u8BB0\u5F55\uFF0C\u4F46\u662F\u66F4\u65B0\u7684\u65F6\u5019\u9700\u8981\u8BB0\u5F55</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">&amp;&amp;</span> newFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5C06\u8001\u7684fiber\u6807\u8BB0\u4E3A\u5220\u9664</span>
      <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// \u53D6 current.index \u548C lastPlacedIndex \u6700\u5927\u503C</span>
  lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u5EFA\u7ACB \u65B0fiber \u4E4B\u95F4\u7684\u8054\u7CFB</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
  oldFiber <span class="token operator">=</span> nextOldFiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u904D\u5386\u8DF3\u51FA\u4E4B\u540E\uFF0C\u4F1A\u5224\u65AD\u8001<code>fiber</code>\u6216\u8005\u662F\u65B0<code>ReactElement</code>\u904D\u5386\u5B8C\u6210\u6CA1\u3002\u5982\u679C\u65B0<code>ReactElement</code>\u904D\u5386\u5B8C\u6210\uFF0C\u90A3\u4E48\u6240\u6709\u5269\u4F59\u7684\u8001<code>fiber</code>\u90FD\u5E94\u8BE5\u6807\u8BB0\u4E3A\u5220\u9664\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>newIdx <span class="token operator">===</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u6807\u8BB0\u5220\u9664\uFF0C\u8BB0\u5F55\u5230 \u7236 fiber \u7684 deletions \u5C5E\u6027\u4E2D</span>
  <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C\u8001<code>fiber</code>\u904D\u5386\u5B8C\u6210\uFF0C\u90A3\u4E48\u6240\u6709\u5269\u4F59\u65B0\u7684<code>ReactElement</code>\u90FD\u662F\u65B0\u63D2\u5165\u7684\u8282\u70B9\uFF0C\u521B\u5EFA<code>newFiber</code></p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span>newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">createChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u663E\u7136\u4F8B\u5B50\u4E2D\u8FD8\u5269\u4F59<code>C\uFF0CD\uFF0CE</code>\u548C<code>D\uFF0CE\uFF0CF</code>\u6CA1\u6709\u8FDB\u884C\u5BF9\u6BD4\u3002</p><h3 id="\u5BF9\u6BD4\u5269\u4F59\u90E8\u5206" tabindex="-1">\u5BF9\u6BD4\u5269\u4F59\u90E8\u5206 <a class="header-anchor" href="#\u5BF9\u6BD4\u5269\u4F59\u90E8\u5206" aria-hidden="true">#</a></h3><p>\u5982\u679C\u8001<code>fiber</code>\u548C\u65B0<code>ReactElement</code>\u90FD\u6709\u5269\u4F59\uFF0C\u90A3\u4E48\u5BFB\u627E\u53EF\u590D\u7528\u7684<code>fiber</code>\u3002\u5BF9\u6BD4\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-javascript"><pre><code><span class="token comment">// \u540E\u7EED\u7684\u662F\u56E0\u4E3A key \u548C type \u4E0D\u4E00\u81F4\u5BFC\u81F4\u6CA1\u6709\u904D\u5386\u5B8C\u7684\u6570\u7EC4\u3002</span>
<span class="token comment">// \u6B64\u65F6\u5F00\u59CB\u590D\u7528\u7684\u7B97\u6CD5\u3002</span>
<span class="token comment">// \u9996\u5148\u5C06\u8001\u8282\u70B9\u8F6C\u6362\u4E3A map \u5F62\u5F0F\uFF1A{ key|index : fiber }</span>
<span class="token keyword">const</span> existingChildren <span class="token operator">=</span> <span class="token function">mapRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span>newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u627E\u5230\u76F8\u5E94\u7684\u53EF\u590D\u7528\u7684 fiber</span>
  <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>
    existingChildren<span class="token punctuation">,</span>
    returnFiber<span class="token punctuation">,</span>
    newIdx<span class="token punctuation">,</span>
    newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span>
    lanes<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5982\u679C\u627E\u5230\u4E86\u5BF9\u5E94\u7684 fiber</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber<span class="token punctuation">.</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u5DF2\u7ECF\u590D\u7528\u4E86\uFF0C\u5728\u8001\u8282\u70B9\u4E2D\u5220\u9664\u5BF9\u5E94\u7684 fiber</span>
        existingChildren<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>
          newFiber<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> newIdx <span class="token operator">:</span> newFiber<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u80FD\u590D\u7528\u65F6\uFF0C\u66F4\u65B0\u6700\u540E\u4E00\u4E2A\u590D\u7528\u7684 \u8001fiber \u7684 index</span>
    lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5C06\u6240\u6709\u6CA1\u6709\u88AB\u590D\u7528\u7684\u8001fiber\u6807\u8BB0\u4E3A\u5220\u9664</span>
  existingChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u91CC\u6700\u91CD\u8981\u7684\u4E00\u70B9\u662F<code>placeChild</code>\u65B9\u6CD5\uFF1A</p><div class="language-javascript"><pre><code><span class="token comment">// \u7528\u4E8E diff \u7B97\u6CD5\uFF0C\u6807\u8BB0\u6700\u540E\u5339\u914D\u7684 old fiber \u7684\u4F4D\u7F6E</span>
<span class="token keyword">function</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">newFiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">lastPlacedIndex</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
  <span class="token literal-property property">newIndex</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  newFiber<span class="token punctuation">.</span>index <span class="token operator">=</span> newIndex<span class="token punctuation">;</span>
  <span class="token comment">// \u5F53\u7236\u4EB2\u7684 current \u4E0D\u5B58\u5728\u65F6\uFF0C\u6B64\u65F6\u4E3A mount\uFF0CshouldTrackSideEffects \u4E3A false\uFF0C\u4E0D\u7528\u505A\u5904\u7406\u3002</span>
  <span class="token comment">// \u5F53\u7236\u4EB2\u7684 current \u5B58\u5728\u65F6\uFF0CshouldTrackSideEffects \u4E3A true\u3002</span>
  <span class="token comment">// \u4F8B\u5982\uFF0C\u5F53\u9047\u5230\u7B2C\u4E00\u4E2A\u9700\u8981\u91CD\u65B0\u521B\u5EFA\u7684\u8282\u70B9\u65F6\uFF0C\u5B83\u5BF9\u5E94\u7684 parent \u7684 current \u5B58\u5728\uFF0C\u6807\u8BB0\u4E3A\u66F4\u65B0\u3002</span>
  <span class="token comment">// \u5F53\u904D\u5386\u5230\u5B50\u8282\u70B9\u65F6\uFF0C\u7531\u4E8E\u5B50\u8282\u70B9\u5BF9\u5E94\u7684 parent \u7684 current \u4E0D\u5B58\u5728\uFF0C\u6B64\u65F6\u4E0D\u6807\u8BB0\u66F4\u65B0\u3002</span>
  <span class="token comment">// \u8FD9\u6837\u505A\u7684\u597D\u5904\u662F\uFF0C\u53EA\u6709\u7236\u4EB2\u88AB\u6807\u8BB0\u4E3A\u66F4\u65B0\uFF0C\u800C\u5176\u540E\u4EE3\u5747\u4E0D\u4F5C\u6807\u8BB0\u3002</span>
  <span class="token comment">// \u5728 completeWork \u7684\u65F6\u5019\u5B50\u8282\u70B9\u76F4\u63A5\u5168\u6DFB\u52A0\u5230\u7236\u4EB2\u4E0A\u3002</span>
  <span class="token comment">// \u5728 commit \u7684\u65F6\u5019\u53EA\u9700\u8981\u5C06\u7236\u4EB2\u6DFB\u52A0\u5230 \u6839\u8282\u70B9\u4E0A\u5373\u53EF\u3002</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> lastPlacedIndex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5982\u679C\u590D\u7528\u4E86 \u8001fiber</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> newFiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldIndex <span class="token operator">=</span> current<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token comment">// \u5982\u679C\u8001\u7684 index &lt; lastPlacedIndex\uFF0C\u8BF4\u660E\u8FD9\u4E9B\u8001\u7684\u8282\u70B9\u65E0\u6CD5\u590D\u7528\u3002</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&lt;</span> lastPlacedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4E0D\u53EF\u590D\u7528\uFF0C\u9700\u8981\u66FF\u6362</span>
      newFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Placement<span class="token punctuation">;</span>
      <span class="token keyword">return</span> lastPlacedIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// This item can stay in place.</span>
      <span class="token comment">// \u5426\u5219\u8BF4\u660E\u8FD9\u4E2A\u8001\u8282\u70B9\u53EF\u4EE5\u590D\u7528\uFF0C\u8FD4\u56DE\u8001\u8282\u70B9 index</span>
      <span class="token keyword">return</span> oldIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C \u8001 fiber\u4E0D\u5B58\u5728\uFF0C\u90A3\u4E48\u9700\u8981\u66FF\u6362</span>
    <span class="token comment">// \u6CE8\u610F\u8FD9\u91CC\u88AB\u6807\u8BB0\u4E86\uFF0Ccommit\u7684\u65F6\u5019\u4F1A\u8FDB\u884C\u5904\u7406</span>
    newFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Placement<span class="token punctuation">;</span>
    <span class="token keyword">return</span> lastPlacedIndex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8BE5\u65B9\u6CD5\u7528\u4E8E\u6807\u8BB0<code>fiber</code>\u662F\u5426\u4E3A<code>Placement</code>\u3002\u5E76\u4E14\u4F1A\u66F4\u65B0<code>lastPlacedIndex</code>\uFF0C\u8BE5\u53D8\u91CF\u8BB0\u5F55\u4E86\u6700\u540E\u4E00\u4E2A\u88AB\u590D\u7528\u7684\u8001<code>fiber</code>\u7684\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u8FD9\u4E2A\u8001<code>fiber</code>\u524D\u9762\u7684<code>fiber</code>\u5C31\u4E0D\u5E94\u8BE5\u88AB\u540E\u7EED\u7684<code>ReactElement</code>\u590D\u7528\uFF0C\u4ECE\u800C\u8FBE\u5230\u79FB\u52A8\u7684\u76EE\u7684\u3002\u6BD4\u5982<code>C\uFF0CD\uFF0CE</code>\u548C<code>D\uFF0CE\uFF0CF</code>\u4E2D<code>D</code>\u590D\u7528\u65F6\uFF0C<code>lastPlacedIndex</code>\u4E3A3\uFF0C<code>E</code>\u590D\u7528\u65F6\uFF0C<code>lastPlacedIndex</code>\u4E3A4\uFF0C<code>F</code>\u65E0\u6CD5\u590D\u7528\uFF0C\u6B64\u65F6\u521B\u5EFA\u65B0<code>fiber</code>\uFF0C\u800C\u8001<code>fiber</code>\u4E2D<code>C</code>\u6CA1\u6709\u88AB\u590D\u7528\uFF0C\u90A3\u4E48\u4F1A\u6807\u8BB0\u4E3A\u5220\u9664\u3002\u5047\u8BBE\u65B0\u7684\u8282\u70B9\u4E3A <code>D\uFF0CE\uFF0CC</code>\uFF0C\u90A3\u4E48<code>C</code>\u4F1A\u88AB\u590D\u7528\u5417\uFF1F\u7B54\u6848\u662F\u4E0D\u80FD\uFF0C\u56E0\u4E3A<code>lastPlacedIndex</code>\u4E3A4\uFF0C\u800C\u8001\u8282\u70B9\u4E2D<code>C</code>\u7684\u4F4D\u7F6E\u4E3A2\uFF0C\u5C0F\u4E8E4\uFF0C\u53EA\u80FD\u6807\u8BB0\u4E3A\u5220\u9664\uFF0C\u800C\u4E0D\u80FD\u590D\u7528\u3002</p>`,69),o=[p];function c(l,r,u,i,k,d){return a(),s("div",null,o)}var b=n(t,[["render",c]]);export{f as __pageData,b as default};
