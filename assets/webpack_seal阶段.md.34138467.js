import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.b96c6c14.js";const F=JSON.parse('{"title":"seal 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/seal阶段.md","filePath":"webpack/seal阶段.md","lastUpdated":1698927986000}'),l={name:"webpack/seal阶段.md"},o=p(`<h1 id="seal-阶段" tabindex="-1">seal 阶段 <a class="header-anchor" href="#seal-阶段" aria-label="Permalink to &quot;seal 阶段&quot;">​</a></h1><p>在模块源码编译解析后，进入到<code>seal</code>阶段，执行<code>compilation.seal</code>方法。该阶段的主要目的是建立<code>module</code>和<code>chunk</code>的关系，并且将<code>chunk</code>内的代码进行拼接整合，形成可以执行的代码块。</p><h2 id="chunk" tabindex="-1">chunk <a class="header-anchor" href="#chunk" aria-label="Permalink to &quot;chunk&quot;">​</a></h2><p><a href="https://www.zhihu.com/people/tec-van/posts" target="_blank" rel="noreferrer">参考文章</a></p><p>webpack 会根据模块依赖图的内容组织分包 —— Chunk 对象，默认的分包规则有：</p><ul><li>同一个 entry 下触达到的模块组织成一个 chunk。</li><li>异步模块单独组织为一个 chunk。</li><li>entry.runtime 单独组织成一个 chunk。</li></ul><p>形成的<code>chunk</code>和<code>module</code>之间的关系会记录在<code>ChunkGraph</code>当中：</p><ul><li><code>ChunkGraphModule</code>用于记录<code>module</code>与外界的关系，其中<code>chunks</code>参数记录了<code>module</code>关联的<code>chunk</code>。</li><li><code>ChunkGraphChunk</code>用于记录<code>chunk</code>与外界的关系，其中<code>modules</code>参数记录了<code>chunk</code>关联的<code>modules</code>。</li><li><code>Entrypoint</code>继承自<code>ChunkGroup</code>，用于组织<code>chunks</code>。记录了<code>chunks</code>以及<code>chunkGroup</code>的父子关系。</li></ul><p>在<code>seal</code>函数的前半段，主要集中于建立入口<code>module</code>的<code>chunk</code>关系。</p><h2 id="buildchunkgraph" tabindex="-1">buildChunkGraph <a class="header-anchor" href="#buildchunkgraph" aria-label="Permalink to &quot;buildChunkGraph&quot;">​</a></h2><p><code>buildChunkGraph</code>的主要执行者是<code>visitModules</code>函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">modules</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> inputEntrypointsAndModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkGroupInfo}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroupInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGroup.</span><span style="color:#B392F0;">getEntrypointChunk</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      action: </span><span style="color:#79B8FF;">ADD_AND_ENTER_MODULE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      block: </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      module,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunkGroup,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunkGroupInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">chunkGroup</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">modules</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> inputEntrypointsAndModules) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ChunkGroupInfo}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkGroupInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkGroup.</span><span style="color:#6F42C1;">getEntrypointChunk</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> modules) {</span></span>
<span class="line"><span style="color:#24292E;">    queue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      action: </span><span style="color:#005CC5;">ADD_AND_ENTER_MODULE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      block: </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      module,</span></span>
<span class="line"><span style="color:#24292E;">      chunk,</span></span>
<span class="line"><span style="color:#24292E;">      chunkGroup,</span></span>
<span class="line"><span style="color:#24292E;">      chunkGroupInfo</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>该函数会遍历<code>modules</code>（这个<code>modules</code>为入口<code>module</code>），并将其加入到<code>queue</code>中。接着会循环执行<code>queue</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (queue.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> queueConnect.size) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">processQueue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (queue.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tempQueue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue;</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queueDelayed.</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    queueDelayed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tempQueue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (queue.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> queueConnect.size) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">processQueue</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (queue.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tempQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue;</span></span>
<span class="line"><span style="color:#24292E;">    queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queueDelayed.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    queueDelayed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tempQueue;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>processQueue</code>方法是<code>queue</code>的具体执行内容，精简后的内容如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (queueItem.action) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ADD_AND_ENTER_ENTRY_MODULE</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph.</span><span style="color:#B392F0;">connectChunkAndEntryModule</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ADD_AND_ENTER_MODULE</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph.</span><span style="color:#B392F0;">connectChunkAndModule</span><span style="color:#E1E4E8;">(chunk, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ENTER_MODULE</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    queueItem.action </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LEAVE_MODULE</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(queueItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PROCESS_BLOCK</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">processBlock</span><span style="color:#E1E4E8;">(block);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (queueItem.action) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ADD_AND_ENTER_ENTRY_MODULE</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph.</span><span style="color:#6F42C1;">connectChunkAndEntryModule</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      chunk,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ADD_AND_ENTER_MODULE</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph.</span><span style="color:#6F42C1;">connectChunkAndModule</span><span style="color:#24292E;">(chunk, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ENTER_MODULE</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    queueItem.action </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LEAVE_MODULE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    queue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(queueItem);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PROCESS_BLOCK</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">processBlock</span><span style="color:#24292E;">(block);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出这里其实是通过<code>connectChunkAndModule</code>建立<code>chunk</code>和<code>module</code>之间的关系。<code>processBlock</code>又会遍历当前<code>module</code>下引用到的其他<code>module</code>，并添加到<code>queue</code>中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">queueBuffer.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  action: activeState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ADD_AND_ENTER_MODULE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PROCESS_BLOCK</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  block: refModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: refModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGroup,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGroupInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">queueBuffer.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  action: activeState </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ADD_AND_ENTER_MODULE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PROCESS_BLOCK</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  block: refModule,</span></span>
<span class="line"><span style="color:#24292E;">  module: refModule,</span></span>
<span class="line"><span style="color:#24292E;">  chunk,</span></span>
<span class="line"><span style="color:#24292E;">  chunkGroup,</span></span>
<span class="line"><span style="color:#24292E;">  chunkGroupInfo</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>因此，最终通过递归的方式遍历所有相关的<code>module</code>，建立了<code>modules</code>和<code>chunks</code>之间的关系。</p><h2 id="hooks-optimizechunks" tabindex="-1">hooks.optimizeChunks <a class="header-anchor" href="#hooks-optimizechunks" aria-label="Permalink to &quot;hooks.optimizeChunks&quot;">​</a></h2><ul><li>RemoveEmptyChunksPlugin：移除非入口的空<code>chunks</code>。</li><li>MergeDuplicateChunksPlugin：合并重复的<code>chunks</code>。</li><li>SplitChunksPlugin：分包。</li></ul><h2 id="开始生成代码" tabindex="-1">开始生成代码 <a class="header-anchor" href="#开始生成代码" aria-label="Permalink to &quot;开始生成代码&quot;">​</a></h2><p>在得到<code>chunks</code>与<code>modules</code>后，经过一系列优化，最终会对模块进行遍历，为<code>chunk</code>生成最终的代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 开始生成代码</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">codeGeneration</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">codeGeneration</span><span style="color:#E1E4E8;">(callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">runtimes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGraph.</span><span style="color:#B392F0;">getModuleRuntimes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">runtime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> runtimes) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGraph.</span><span style="color:#B392F0;">getModuleHash</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, runtime);</span></span>
<span class="line"><span style="color:#E1E4E8;">      jobs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ module, hash, runtime, runtimes: [runtime] });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_runCodeGenerationJobs</span><span style="color:#E1E4E8;">(jobs, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 开始生成代码</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">codeGeneration</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">codeGeneration</span><span style="color:#24292E;">(callback) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.modules) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">runtimes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkGraph.</span><span style="color:#6F42C1;">getModuleRuntimes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">runtime</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> runtimes) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkGraph.</span><span style="color:#6F42C1;">getModuleHash</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, runtime);</span></span>
<span class="line"><span style="color:#24292E;">      jobs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ module, hash, runtime, runtimes: [runtime] });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_runCodeGenerationJobs</span><span style="color:#24292E;">(jobs, callback);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>codeGeneration</code>会遍历每一个<code>module</code>，然后生成一个任务，添加到<code>jobs</code>当中，关于<code>runtime</code>的作用，可以参考<a href="https://zhuanlan.zhihu.com/p/373946949" target="_blank" rel="noreferrer">这篇文章</a>。完后会调用<code>_runCodeGenerationJobs</code>方法执行每个任务：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">asyncLib.</span><span style="color:#B392F0;">eachLimit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  jobs,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.parallelism,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ({ </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hash</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">runtime</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">runtimes</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_codeGenerationModule</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      runtime,</span></span>
<span class="line"><span style="color:#E1E4E8;">      runtimes,</span></span>
<span class="line"><span style="color:#E1E4E8;">      hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">      runtimeTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">      errors,</span></span>
<span class="line"><span style="color:#E1E4E8;">      results,</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">codeGenerated</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (codeGenerated) statModulesGenerated</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> statModulesFromCache</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">_codeGenerationModule</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 其他代码省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">codeGeneration</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">    moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtime</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">asyncLib.</span><span style="color:#6F42C1;">eachLimit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  jobs,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.parallelism,</span></span>
<span class="line"><span style="color:#24292E;">  ({ </span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hash</span><span style="color:#24292E;">, </span><span style="color:#E36209;">runtime</span><span style="color:#24292E;">, </span><span style="color:#E36209;">runtimes</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_codeGenerationModule</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      runtime,</span></span>
<span class="line"><span style="color:#24292E;">      runtimes,</span></span>
<span class="line"><span style="color:#24292E;">      hash,</span></span>
<span class="line"><span style="color:#24292E;">      dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">      chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">      moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">      runtimeTemplate,</span></span>
<span class="line"><span style="color:#24292E;">      errors,</span></span>
<span class="line"><span style="color:#24292E;">      results,</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">codeGenerated</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (codeGenerated) statModulesGenerated</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> statModulesFromCache</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">_codeGenerationModule</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 其他代码省略</span></span>
<span class="line"><span style="color:#24292E;">  result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">codeGeneration</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">    moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">    dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeTemplate,</span></span>
<span class="line"><span style="color:#24292E;">    runtime</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出最终调用的是<code>module.codeGeneration</code>方法进行代码的生成。<code>codeGeneration</code>的核心又是<code>generator.generate</code>方法的调用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">codeGeneration</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 其他代码省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.generator.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">    moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtime,</span></span>
<span class="line"><span style="color:#E1E4E8;">    concatenationScope,</span></span>
<span class="line"><span style="color:#E1E4E8;">    getData,</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">codeGeneration</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 其他代码省略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.generator.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeTemplate,</span></span>
<span class="line"><span style="color:#24292E;">    moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements,</span></span>
<span class="line"><span style="color:#24292E;">    runtime,</span></span>
<span class="line"><span style="color:#24292E;">    concatenationScope,</span></span>
<span class="line"><span style="color:#24292E;">    getData,</span></span>
<span class="line"><span style="color:#24292E;">    type</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="javascriptgenerator" tabindex="-1">JavascriptGenerator <a class="header-anchor" href="#javascriptgenerator" aria-label="Permalink to &quot;JavascriptGenerator&quot;">​</a></h2><p>在<code>webpack/lib/javascript/JavascriptGenerator.js</code>文件中找到<code>generate</code>函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, generateContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 获取 module.build 后解析出来的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">originalSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">originalSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 复制一份代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReplaceSource</span><span style="color:#E1E4E8;">(originalSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initFragments</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 3. 处理代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sourceModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, initFragments, source, generateContext);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 4. 返回拼接代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> InitFragment.</span><span style="color:#B392F0;">addToSource</span><span style="color:#E1E4E8;">(source, initFragments, generateContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, generateContext) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 获取 module.build 后解析出来的代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">originalSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">originalSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 复制一份代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReplaceSource</span><span style="color:#24292E;">(originalSource);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initFragments</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 3. 处理代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sourceModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, initFragments, source, generateContext);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 4. 返回拼接代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> InitFragment.</span><span style="color:#6F42C1;">addToSource</span><span style="color:#24292E;">(source, initFragments, generateContext);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="sourcemodule" tabindex="-1">sourceModule <a class="header-anchor" href="#sourcemodule" aria-label="Permalink to &quot;sourceModule&quot;">​</a></h3><p>这里的核心是<code>sourceModule</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sourceModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, initFragments, source, generateContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependency</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.dependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sourceDependency</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.presentationalDependencies </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependency</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.presentationalDependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sourceDependency</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">childBlock</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.blocks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sourceBlock</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sourceModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, initFragments, source, generateContext) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependency</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.dependencies) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sourceDependency</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.presentationalDependencies </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependency</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.presentationalDependencies) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sourceDependency</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">childBlock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.blocks) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sourceBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法会通过<code>sourceDependency</code>来处理<code>module.build</code>过程中分析出来的<code>dependencies</code>、<code>presentationalDependencies</code>以及<code>blocks</code>。<code>sourceBlock</code>最终也是调用<code>sourceDependency</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sourceDependency</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, dependency, initFragments, source, generateContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{new (...args: any[]) =&gt; Dependency}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependency.</span><span style="color:#79B8FF;">constructor</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generateContext.dependencyTemplates.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sourceDependency</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, dependency, initFragments, source, generateContext) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{new (...args: any[]) =&gt; Dependency}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    dependency.</span><span style="color:#005CC5;">constructor</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">template</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generateContext.dependencyTemplates.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(constructor);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="获取template" tabindex="-1">获取template <a class="header-anchor" href="#获取template" aria-label="Permalink to &quot;获取template&quot;">​</a></h3><p>第一步根据<code>dependency</code>获取相应的<code>template</code>。这里的<code>dependencyTemplates</code>定义在<code>compilation</code>对象上，对于不同的<code>dependency</code>，他们会有不同的<code>template</code>。这些<code>templates</code>是在实例化<code>compilation</code>，触发<code>hooks.compilation</code>时添加到<code>dependencyTemplates</code>当中的，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;HarmonyModulesPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">normalModuleFactory</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.dependencyTemplates.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      HarmonyCompatibilityDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HarmonyCompatibilityDependency.</span><span style="color:#B392F0;">Template</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.dependencyFactories.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      HarmonyImportSideEffectDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">      normalModuleFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.dependencyTemplates.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      HarmonyImportSideEffectDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HarmonyImportSideEffectDependency.</span><span style="color:#B392F0;">Template</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compiler.hooks.compilation.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;HarmonyModulesPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">normalModuleFactory</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    compilation.dependencyTemplates.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      HarmonyCompatibilityDependency,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HarmonyCompatibilityDependency.</span><span style="color:#6F42C1;">Template</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    compilation.dependencyFactories.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      HarmonyImportSideEffectDependency,</span></span>
<span class="line"><span style="color:#24292E;">      normalModuleFactory</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    compilation.dependencyTemplates.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      HarmonyImportSideEffectDependency,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HarmonyImportSideEffectDependency.</span><span style="color:#6F42C1;">Template</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="sourcedependency" tabindex="-1">sourceDependency <a class="header-anchor" href="#sourcedependency" aria-label="Permalink to &quot;sourceDependency&quot;">​</a></h3><p>第二步执行<code>template.apply</code>方法开始处理<code>dependency</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">template.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(dependency, source, templateContext);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">template.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(dependency, source, templateContext);</span></span></code></pre></div><p>这里以<code>HarmonyImportSideEffectDependency</code>为例，如使用<code>import a from &#39;./moduleA.js&#39;</code>时，会解析为<code>HarmonyImportSideEffectDependency</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HarmonyImportSideEffectDependency.Template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HarmonyImportSideEffectDependencyTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;"> HarmonyImportDependency.Template</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dependency</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">templateContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">moduleGraph</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">concatenationScope</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateContext;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(dependency, source, templateContext);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HarmonyImportSideEffectDependency.Template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HarmonyImportSideEffectDependencyTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;"> HarmonyImportDependency.Template</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dependency</span><span style="color:#24292E;">, </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, </span><span style="color:#E36209;">templateContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">moduleGraph</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">concatenationScope</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateContext;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(dependency, source, templateContext);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>最终调用<code>HarmonyImportDependency.Template</code>的<code>apply</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">chunkGraph</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">moduleGraph</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">runtime</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">connection</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleGraph.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(dep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">referencedModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> connection.module;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> referencedModule</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> referencedModule.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dep.request;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`harmony import \${</span><span style="color:#E1E4E8;">moduleKey</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">chunkGraph</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">moduleGraph</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">runtime</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">connection</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleGraph.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(dep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">referencedModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> connection.module;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> referencedModule</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> referencedModule.</span><span style="color:#6F42C1;">identifier</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dep.request;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`harmony import \${</span><span style="color:#24292E;">moduleKey</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>首先会获取<code>referencedModule</code>，它是<code>dep</code>对应的<code>module</code>，而传入的<code>module</code>则是<code>referencedModule</code>的父级<code>module</code>。然后根据<code>moduleKey</code>生成一个<code>key</code>值。随后调用<code>getImportState</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">importStatement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dep.</span><span style="color:#B392F0;">getImportStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, templateContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">getImportStatement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  update,</span></span>
<span class="line"><span style="color:#E1E4E8;">  { runtimeTemplate, module, moduleGraph, chunkGraph, runtimeRequirements }</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> runtimeTemplate.</span><span style="color:#B392F0;">importStatement</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    update,</span></span>
<span class="line"><span style="color:#E1E4E8;">    module: moduleGraph.</span><span style="color:#B392F0;">getModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">    importVar: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getImportVar</span><span style="color:#E1E4E8;">(moduleGraph),</span></span>
<span class="line"><span style="color:#E1E4E8;">    request: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.request,</span></span>
<span class="line"><span style="color:#E1E4E8;">    originModule: </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">importStatement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dep.</span><span style="color:#6F42C1;">getImportStatement</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, templateContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getImportStatement</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  update,</span></span>
<span class="line"><span style="color:#24292E;">  { runtimeTemplate, module, moduleGraph, chunkGraph, runtimeRequirements }</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> runtimeTemplate.</span><span style="color:#6F42C1;">importStatement</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    update,</span></span>
<span class="line"><span style="color:#24292E;">    module: moduleGraph.</span><span style="color:#6F42C1;">getModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">    importVar: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getImportVar</span><span style="color:#24292E;">(moduleGraph),</span></span>
<span class="line"><span style="color:#24292E;">    request: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.request,</span></span>
<span class="line"><span style="color:#24292E;">    originModule: </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>传入的参数<code>module</code>代表当前<code>dependency</code>对应的<code>module</code>，<code>originModule</code>代表父<code>module</code>，<code>request</code>代表<code>import from</code>的路径，<code>importVar</code>使用<code>getImportVar</code>产生：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getImportVar</span><span style="color:#E1E4E8;">(moduleGraph) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleGraph.</span><span style="color:#B392F0;">getParentModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleGraph.</span><span style="color:#B392F0;">getMeta</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> importVarMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> meta.importVarMap;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">importVarMap) meta.importVarMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importVarMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> importVar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importVarMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(moduleGraph.</span><span style="color:#B392F0;">getModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (importVar) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> importVar;</span></span>
<span class="line"><span style="color:#E1E4E8;">  importVar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">Template</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">toIdentifier</span><span style="color:#9ECBFF;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">userRequest</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  )</span><span style="color:#9ECBFF;">}__WEBPACK_IMPORTED_MODULE_\${</span><span style="color:#E1E4E8;">importVarMap</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">size</span><span style="color:#9ECBFF;">}__\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  importVarMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(moduleGraph.</span><span style="color:#B392F0;">getModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">), importVar);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> importVar;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getImportVar</span><span style="color:#24292E;">(moduleGraph) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleGraph.</span><span style="color:#6F42C1;">getParentModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">meta</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleGraph.</span><span style="color:#6F42C1;">getMeta</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> importVarMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> meta.importVarMap;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">importVarMap) meta.importVarMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importVarMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> importVar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importVarMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(moduleGraph.</span><span style="color:#6F42C1;">getModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (importVar) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> importVar;</span></span>
<span class="line"><span style="color:#24292E;">  importVar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">Template</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toIdentifier</span><span style="color:#032F62;">(</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">userRequest</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#032F62;">  )</span><span style="color:#032F62;">}__WEBPACK_IMPORTED_MODULE_\${</span><span style="color:#24292E;">importVarMap</span><span style="color:#032F62;">.</span><span style="color:#24292E;">size</span><span style="color:#032F62;">}__\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  importVarMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(moduleGraph.</span><span style="color:#6F42C1;">getModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">), importVar);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> importVar;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>importVarMap</code>的键为<code>module</code>，值为<code>module 名称</code>。<code>importVar</code>为拼接而成，通过<code>Template</code>对路径符号替换，另外还通过<code>importVarMap.size</code>保证了名称的唯一性，如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 生成前</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;./moduleA.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 生成后</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;_moduleA__WEBPACK_IMPORTED_MODULE_0__&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 生成前</span></span>
<span class="line"><span style="color:#032F62;">&#39;./moduleA.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 生成后</span></span>
<span class="line"><span style="color:#032F62;">&#39;_moduleA__WEBPACK_IMPORTED_MODULE_0__&#39;</span></span></code></pre></div><p>接下来就是调用<code>importStatement</code>方法了，首先获取<code>moduleId</code>（同时也是模块路径），还会通过<code>comment</code>方法在<code>id</code>前面添加相关注释：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">moduleId</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  module,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">  request,</span></span>
<span class="line"><span style="color:#E1E4E8;">  weak</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">moduleId</span><span style="color:#E1E4E8;">({ module, chunkGraph, request, weak }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">comment</span><span style="color:#9ECBFF;">({ </span><span style="color:#E1E4E8;">request</span><span style="color:#9ECBFF;"> })</span><span style="color:#9ECBFF;">}\${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">moduleId</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">moduleId</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  module,</span></span>
<span class="line"><span style="color:#24292E;">  chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">  request,</span></span>
<span class="line"><span style="color:#24292E;">  weak</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">moduleId</span><span style="color:#24292E;">({ module, chunkGraph, request, weak }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">comment</span><span style="color:#032F62;">({ </span><span style="color:#24292E;">request</span><span style="color:#032F62;"> })</span><span style="color:#032F62;">}\${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">moduleId</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后拼接成新的<code>import</code>内容：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">importContent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`/* harmony import */ \${</span><span style="color:#E1E4E8;">optDeclaration</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">importVar</span><span style="color:#9ECBFF;">} = __webpack_require__(\${</span><span style="color:#E1E4E8;">moduleId</span><span style="color:#9ECBFF;">});</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [importContent, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">importContent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`/* harmony import */ \${</span><span style="color:#24292E;">optDeclaration</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">importVar</span><span style="color:#032F62;">} = __webpack_require__(\${</span><span style="color:#24292E;">moduleId</span><span style="color:#032F62;">});</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [importContent, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">];</span></span></code></pre></div><p>（其中<code>optDeclaration</code>由<code>update</code>来定，如果是重新赋值的话那么就为<code>&#39;&#39;</code>空字符串：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">optDeclaration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> update </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;var &quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">optDeclaration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> update </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;var &quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>由于使用了<code>__webpack_require__</code>这个方法，因此需要添加该方法到<code>runtimeRequirements</code>中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">runtimeRequirements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(RuntimeGlobals.require);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">runtimeRequirements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(RuntimeGlobals.require);</span></span></code></pre></div><p>生成完<code>importStatement</code>内容后，最后会执行：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">templateContext.initFragments.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConditionalInitFragment</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    importStatement[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> importStatement[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    InitFragment.</span><span style="color:#79B8FF;">STAGE_HARMONY_IMPORTS</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dep.sourceOrder,</span></span>
<span class="line"><span style="color:#E1E4E8;">    key,</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeCondition</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">templateContext.initFragments.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConditionalInitFragment</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    importStatement[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> importStatement[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    InitFragment.</span><span style="color:#005CC5;">STAGE_HARMONY_IMPORTS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    dep.sourceOrder,</span></span>
<span class="line"><span style="color:#24292E;">    key,</span></span>
<span class="line"><span style="color:#24292E;">    runtimeCondition</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>将这行新的<code>import</code>代码形成对象添加到<code>initFragments</code>当中。至此<code>sourceDependency</code>方法也基本执行完成了，经过这一系列的<code>sourceDependency</code>后，所有的<code>dependency</code>都将转变为新的语句，存放到<code>initFragments</code>当中。</p><h3 id="addtosource" tabindex="-1">addToSource <a class="header-anchor" href="#addtosource" aria-label="Permalink to &quot;addToSource&quot;">​</a></h3><p>获取完所有的代码片段后，开始执行<code>InitFragment.addToSource</code>方法拼接代码:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keyedFragments</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">fragment</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> sortedFragments) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  keyedFragments.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(fragment.key </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(), fragment);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fragment </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> keyedFragments.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  concatSource.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(fragment.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">(context));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">endContent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fragment.</span><span style="color:#B392F0;">getEndContent</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (endContent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    endContents.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(endContent);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">concatSource.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> concatSource;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keyedFragments</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">fragment</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> sortedFragments) {</span></span>
<span class="line"><span style="color:#24292E;">  keyedFragments.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(fragment.key </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(), fragment);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fragment </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> keyedFragments.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  concatSource.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(fragment.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">(context));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">endContent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fragment.</span><span style="color:#6F42C1;">getEndContent</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (endContent) {</span></span>
<span class="line"><span style="color:#24292E;">    endContents.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(endContent);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">concatSource.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> concatSource;</span></span></code></pre></div><p><code>addToSource</code>处理完后，会将新的代码以数组的形式返回，并且<code>source</code>是数组的最后一个元素。生成代码后会回到<code>codeGeneration</code>函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (source) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sources.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(type, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachedSource</span><span style="color:#E1E4E8;">(source));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">resultEntry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sources,</span></span>
<span class="line"><span style="color:#E1E4E8;">  runtimeRequirements,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resultEntry;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source) {</span></span>
<span class="line"><span style="color:#24292E;">  sources.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(type, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CachedSource</span><span style="color:#24292E;">(source));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resultEntry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  sources,</span></span>
<span class="line"><span style="color:#24292E;">  runtimeRequirements,</span></span>
<span class="line"><span style="color:#24292E;">  data</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resultEntry;</span></span></code></pre></div><p>将所有生成的代码<code>sources</code>和使用到的<code>runtimeRequirements</code>返回。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>seal</code>阶段大概可以分为三个阶段：</p><p>第一个阶段为<code>chunk</code>关系建立，此时会遍历所有的<code>module</code>，并形成<code>module</code>和<code>chunk</code>之间的关系。</p><p>第二个阶段为<code>chunk</code>的优化阶段，该阶段会对生成的<code>chunk</code>进行处理优化，如清除空的<code>chunk</code>、重复的<code>chunk</code>、对<code>chunk</code>进行分包等等。</p><p>第三个阶段为生成代码阶段，该阶段会对<code>chunks</code>以及<code>chunk</code>下的<code>modules</code>进行遍历，根据<code>module.build</code>解析的代码生成新的代码片段。</p><p>其中生成代码的过程主要是通过<code>sourceDependency</code>对<code>module.build</code>中解析出来的<code>module.dependencies</code>和<code>module.blocks</code>进行代码生成。首先会根据<code>dependency</code>获取相应的生成模板<code>template</code>。其次调用<code>template.apply</code>方法将<code>dependency</code>替换成新的代码块。最后使用<code>addToSource</code>方法将所有<code>dependency</code>替换后的代码以及源码形成数组形式。</p>`,75),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const m=s(l,[["render",c]]);export{F as __pageData,m as default};
