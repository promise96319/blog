import{_ as s,o as n,c as a,a as l}from"./app.9fd1379c.js";const C=JSON.parse('{"title":"插件开发","description":"","frontmatter":{},"headers":[{"level":2,"title":"plugin","slug":"plugin","link":"#plugin","children":[]},{"level":2,"title":"preset","slug":"preset","link":"#preset","children":[]},{"level":2,"title":"path","slug":"path","link":"#path","children":[]},{"level":2,"title":"path.scope","slug":"path-scope","link":"#path-scope","children":[]}],"relativePath":"babel/guide/plugin.md","lastUpdated":1685269996000}'),p={name:"babel/guide/plugin.md"},o=l(`<h1 id="插件开发" tabindex="-1">插件开发 <a class="header-anchor" href="#插件开发" aria-hidden="true">#</a></h1><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-hidden="true">#</a></h2><p>babel 提供了插件机制允许我们修改 AST。插件一般存在两种形式：函数形式和对象形式，函数形式返回的也是对象，这里主要以函数形式为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">babel</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dirname</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     inherits</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentPlugin</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     manipulateOptions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">parserOptions</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">     pre</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">file</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">     visitor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">     post</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">file</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中 visitor 就是遍历 AST 时，对 AST 节点的访问，在这里可以做一些节点的修改。比如以 const 转换为 var 为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 插件</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">babel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     visitor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       VariableDeclaration</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">kind</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">const</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">kind</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">var</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> ​</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 源码</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 生成代码</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>通过上面的例子可以看出 babel 可以通过插件，对代码进行各种各样的转换，因此我们需要使用新语法时只需要增加新语法的转换插件即可，比如装饰器 @babel/plugin-proposal-decorators，可选链 @babel/plugin-proposal-optional-chaining 等等。</p><h2 id="preset" tabindex="-1">preset <a class="header-anchor" href="#preset" aria-hidden="true">#</a></h2><p>plugin 是单个转换功能的实现，当 plugin 比较多或者 plugin 的 options 比较多的时候就会导致使用成本升高。这时候可以封装成一个 preset，用户可以通过 preset 来批量引入 plugin 并进行一些配置。</p><p>preset 就是对配置和插件的一层封装，其中最常见的就是 @babel/preset-env， 包含了一系列的语法转换插件，用户只需要指定相应的浏览器环境，它就提供相对应的语法转换插件。</p><p>preset 和 plugin 从形式上差不多，但是应用顺序不同。 babel 会按照如下顺序处理插件和 preset：</p><ul><li>先执行 plugin，再执行 preset</li><li>plugin 从前到后，preset 从后到前</li></ul><h2 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-hidden="true">#</a></h2><p>visitor 中的每个方法都会传入一个 path 对象，path 对象是对当前节点的抽象，它提供了一系列的方法来操作当前节点，比如修改节点、删除节点、插入节点等等。path 对象的属性和方法如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">path </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 属性：</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">parent</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 父节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">parentPath</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 父 path</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">scope</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 作用域</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">hub</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 可以通过 path.hub.file 拿到最外层 File 对象， path.hub.getScope 拿到最外层作用域，path.hub.getCode 拿到源码字符串</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 当前 AST 节点所在的父节点属性的属性值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 当前 AST 节点所在父节点属性的属性名或所在数组的下标</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">listKey</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 当前 AST 节点所在父节点属性的属性值为数组时 listkey 为该属性名，否则为 undefined</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 方法</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">inList</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 判断节点是否在数组中，如果 container 为数组，也就是有 listkey 的时候，返回 true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 获取某个属性的 path</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 设置某个属性的值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getSibling</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 获取某个下标的兄弟节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getNextSibling</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 获取下一个兄弟节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getPrevSibling</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 获取上一个兄弟节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getAllPrevSiblings</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 获取之前的所有兄弟节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getAllNextSiblings</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 获取之后的所有兄弟节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">isXxx</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">opts</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 判断当前节点是否是某个类型，可以传入属性和属性值进一步判断，比如path.isIdentifier({name: &#39;a&#39;})</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">assertXxx</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">opts</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 同 isXxx，但是不返回布尔值，而是抛出异常</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">find</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 从当前节点到根节点来查找节点（包括当前节点），调用 callback（传入 path）来决定是否终止查找</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">findParent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 从当前节点到根节点来查找节点（不包括当前节点），调用 callback（传入 path）来决定是否终止查找</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">insertBefore</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nodes</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 在之前插入节点，可以是单个节点或者节点数组</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">insertAfter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nodes</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 在之后插入节点，可以是单个节点或者节点数组</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">replaceWith</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">replacement</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 用某个节点替换当前节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">replaceWithMultiple</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nodes</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 用多个节点替换当前节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">replaceWithSourceString</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">replacement</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 解析源码成 AST，然后替换当前节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 删除当前节点</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">traverse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">visitor</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 遍历当前节点的子节点，传入 visitor 和 state（state 是不同节点间传递数据的方式）</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">skip</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 跳过当前节点的子节点的遍历</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">stop</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 结束所有遍历</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="path-scope" tabindex="-1">path.scope <a class="header-anchor" href="#path-scope" aria-hidden="true">#</a></h2><p>path.scope 是当前节点的作用域，它提供了一些方法来操作当前作用域，比如获取当前作用域的变量、绑定变量、生成唯一标识符等等。scope 对象的属性和方法如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bindings </span><span style="color:#676E95;font-style:italic;">// 当前作用域内声明的所有变量</span></span>
<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">block </span><span style="color:#676E95;font-style:italic;">// 生成作用域的 block，详见下文</span></span>
<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path </span><span style="color:#676E95;font-style:italic;">// 生成作用域的节点对应的 path</span></span>
<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">references </span><span style="color:#676E95;font-style:italic;">// 所有 binding 的引用对应的 path，详见下文</span></span>
<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 打印作用域链的所有 binding 到控制台</span></span>
<span class="line"><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentBlock </span><span style="color:#676E95;font-style:italic;">// 父级作用域的 block</span></span>
<span class="line"><span style="color:#82AAFF;">getAllBindings</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 从当前作用域到根作用域的所有 binding 的合并</span></span>
<span class="line"><span style="color:#82AAFF;">getBinding</span><span style="color:#A6ACCD;">(name) </span><span style="color:#676E95;font-style:italic;">// 查找某个 binding，从当前作用域一直查找到根作用域</span></span>
<span class="line"><span style="color:#82AAFF;">getOwnBinding</span><span style="color:#A6ACCD;">(name) </span><span style="color:#676E95;font-style:italic;">// 从当前作用域查找 binding</span></span>
<span class="line"><span style="color:#82AAFF;">parentHasBinding</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noGlobals) </span><span style="color:#676E95;font-style:italic;">// 查找某个 binding，从父作用域查到根作用域，不包括当前作用域。可以通过 noGlobals 参数指定是否算上全局变量（比如console，不需要声明就可用），默认是 false</span></span>
<span class="line"><span style="color:#82AAFF;">removeBinding</span><span style="color:#A6ACCD;">(name) </span><span style="color:#676E95;font-style:italic;">// 删除某个 binding</span></span>
<span class="line"><span style="color:#82AAFF;">hasBinding</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> noGlobals) </span><span style="color:#676E95;font-style:italic;">// 从当前作用域查找 binding，可以指定是否算上全局变量，默认是 false</span></span>
<span class="line"><span style="color:#82AAFF;">moveBindingTo</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scope) </span><span style="color:#676E95;font-style:italic;">// 把当前作用域中的某个 binding 移动到其他作用域</span></span>
<span class="line"><span style="color:#82AAFF;">generateUid</span><span style="color:#A6ACCD;">(name) </span><span style="color:#676E95;font-style:italic;">// 生成作用域内唯一的名字，根据 name 添加下划线，比如 name 为 a，会尝试生成 _a，如果被占用就会生成 __a，直到生成没有被使用的名字i</span></span>
<span class="line"></span></code></pre></div><p>path.scope.bindings 如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">bindings</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constant</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 是否被修改过</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constantViolations</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 所有修改过的语句的 path</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">identifier</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Identifier</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">const</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 声明变量的形式</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">,...}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">referenced</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 是否被引用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">referencePaths</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 引用的语句对应的 path</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">references</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 引用的数目</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">scope</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,20),e=[o];function t(c,r,y,i,F,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
