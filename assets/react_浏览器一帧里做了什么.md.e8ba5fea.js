import{_ as a}from"./chunks/life-of-a-frame.c78631ff.js";import{_ as n,o as l,c as p,Q as o}from"./chunks/framework.baea2d07.js";const e="/assets/anatomy-of-a-frame.ed2cbaac.jpg",s="/assets/event-loop.37bf6931.png",t="/assets/frame-user-event.da3825ed.png",c="/assets/frame-message-channel.b7726944.png",r="/assets/frame-settimeout.54a71d41.png",E="/assets/frame-promise.d17a50c5.png",k=JSON.parse('{"title":"浏览器一帧里做了什么？","description":"","frontmatter":{},"headers":[],"relativePath":"react/浏览器一帧里做了什么.md","filePath":"react/浏览器一帧里做了什么.md","lastUpdated":1699268300000}'),y={name:"react/浏览器一帧里做了什么.md"},i=o('<h1 id="浏览器一帧里做了什么" tabindex="-1">浏览器一帧里做了什么？ <a class="header-anchor" href="#浏览器一帧里做了什么" aria-label="Permalink to &quot;浏览器一帧里做了什么？&quot;">​</a></h1><h2 id="帧" tabindex="-1">帧 <a class="header-anchor" href="#帧" aria-label="Permalink to &quot;帧&quot;">​</a></h2><p>主流的屏幕刷新率都在 60Hz，那么渲染一帧的时间为 16.7ms。在这段时间内，浏览器需要完成如下事情：</p><ul><li>脚本执行（JavaScript）：脚本造成了需要重绘的改动，比如增删 DOM、请求动画等</li><li>样式计算（CSS Object Model）：级联地生成每个节点的生效样式。</li><li>布局（Layout）：计算布局，执行渲染算法</li><li>重绘（Paint）：各层分别进行绘制（比如 3D 动画）</li><li>合成（Composite）：合成各层的渲染结果 <a href="https://harttle.land/2017/08/15/browser-render-frame.html#" target="_blank" rel="noreferrer">https://harttle.land/2017/08/15/browser-render-frame.html</a></li></ul><h2 id="一帧里事件执行顺序" tabindex="-1">一帧里事件执行顺序 <a class="header-anchor" href="#一帧里事件执行顺序" aria-label="Permalink to &quot;一帧里事件执行顺序&quot;">​</a></h2><p>在一帧里事件的执行顺序为：</p><ul><li><p>用户事件</p><ul><li>阻塞输入事件，如<code>wheel</code>、<code>touch</code>等。</li><li>非阻塞输入事件，如<code>click</code>、<code>keypress</code>等。</li></ul></li><li><p>宏任务 + 微任务</p><ul><li>先执行宏任务。</li><li>每个宏任务执行完后，会执行宏任务中产生的微任务。</li><li>如果微任务中还有微任务，那么添加到微任务队列后，继续执行微任务。</li><li>微任务执行完成后，可能会继续执行另一个宏任务（一帧里可以执行多个宏任务），也可能进入后续渲染阶段。</li></ul></li><li><p>begin frame</p><ul><li>window.resize</li><li>scroll</li><li>mediaquery changed （媒体查询）</li><li>animation events （动画事件）</li></ul></li><li><p>requestAnimationFrame回调（在每次渲染之前执行，丢帧时不执行）</p></li><li><p>浏览器渲染过程</p><ul><li>样式计算</li><li>布局</li><li>重绘</li><li>合成</li></ul></li><li><p>requestIdleCallback回调（空闲时间）</p></li><li><p><a href="https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4" target="_blank" rel="noreferrer">life of a frame</a></p></li></ul><p><img src="'+a+'" alt="img"></p><ul><li><p><a href="https://aerotwist.com/blog/the-anatomy-of-a-frame/" target="_blank" rel="noreferrer">anatomy of a frame</a><img src="'+e+'" alt="anatomy-of-a-frame"></p></li><li><p><a href="https://juejin.cn/post/6844904165462769678" target="_blank" rel="noreferrer">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000008589736" target="_blank" rel="noreferrer">Vue源码详解之nextTick：MutationObserver只是浮云，microtask才是核心！</a><img src="'+s+`" alt="img"></p></li></ul><h2 id="事件循环模拟代码" tabindex="-1">事件循环模拟代码 <a class="header-anchor" href="#事件循环模拟代码" aria-label="Permalink to &quot;事件循环模拟代码&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!</span><span style="color:#79B8FF;">DOCTYPE</span><span style="color:#E1E4E8;"> html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http-equiv</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;X-UA-Compatible&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;IE=edge&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;事件循环模拟代码&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;btn&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onclick</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;handle()&quot;</span><span style="color:#E1E4E8;">&gt;点击事件&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.onload = () =&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click 事件&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// click 事件</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;btn&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        dom </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> dom.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 宏任务 message channel</span></span>
<span class="line"><span style="color:#E1E4E8;">      const channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      const port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.port2;</span></span>
<span class="line"><span style="color:#E1E4E8;">      channel.port1.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;channel 被执行了&#39;</span><span style="color:#E1E4E8;">, message.data)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        port.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(num);</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 宏任务 timeout</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delay</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, delay)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 微任务</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(num).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise&#39;</span><span style="color:#E1E4E8;">, num))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 帧动画 requestAnimationFrame</span></span>
<span class="line"><span style="color:#E1E4E8;">      let start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">animate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">timestamp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;timestamp ==&gt; &#39;</span><span style="color:#E1E4E8;">, timestamp </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// idleCallback()</span></span>
<span class="line"><span style="color:#E1E4E8;">        start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timestamp</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(animate)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(animate)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 空闲时间</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">timestamp</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;requestIdleCallback&#39;</span><span style="color:#E1E4E8;">, timestamp.</span><span style="color:#B392F0;">timeRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      const </span><span style="color:#B392F0;">idleCallback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requestIdleCallback</span><span style="color:#E1E4E8;">(callback)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 模拟</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// timeout()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// promise() </span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!</span><span style="color:#005CC5;">DOCTYPE</span><span style="color:#24292E;"> html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http-equiv</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;X-UA-Compatible&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;IE=edge&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;事件循环模拟代码&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;btn&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onclick</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;handle()&quot;</span><span style="color:#24292E;">&gt;点击事件&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    window.onload = () =&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click 事件&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// click 事件</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">click</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;btn&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        dom </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> dom.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 宏任务 message channel</span></span>
<span class="line"><span style="color:#24292E;">      const channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      const port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.port2;</span></span>
<span class="line"><span style="color:#24292E;">      channel.port1.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;channel 被执行了&#39;</span><span style="color:#24292E;">, message.data)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        port.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 宏任务 timeout</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num)</span></span>
<span class="line"><span style="color:#24292E;">        }, delay)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 微任务</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(num).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;promise&#39;</span><span style="color:#24292E;">, num))</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 帧动画 requestAnimationFrame</span></span>
<span class="line"><span style="color:#24292E;">      let start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">timestamp</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;timestamp ==&gt; &#39;</span><span style="color:#24292E;">, timestamp </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// idleCallback()</span></span>
<span class="line"><span style="color:#24292E;">        start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timestamp</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(animate)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(animate)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 空闲时间</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">timestamp</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;requestIdleCallback&#39;</span><span style="color:#24292E;">, timestamp.</span><span style="color:#6F42C1;">timeRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      const </span><span style="color:#6F42C1;">idleCallback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requestIdleCallback</span><span style="color:#24292E;">(callback)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 模拟</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// timeout()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// promise() </span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h2><h3 id="用户事件" tabindex="-1">用户事件 <a class="header-anchor" href="#用户事件" aria-label="Permalink to &quot;用户事件&quot;">​</a></h3><h4 id="执行代码" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码" aria-label="Permalink to &quot;执行代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对比 click 和 channel</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对比 click 和 channel</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="执行结果" tabindex="-1">执行结果 <a class="header-anchor" href="#执行结果" aria-label="Permalink to &quot;执行结果&quot;">​</a></h4><p><img src="`+t+`" alt="img"></p><h4 id="结果分析" tabindex="-1">结果分析 <a class="header-anchor" href="#结果分析" aria-label="Permalink to &quot;结果分析&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">用户事件</p><p>click 事件优先于 MessageChannel 事件，而且会执行 899ms，阻塞渲染。</p></div><h3 id="宏任务-messagechannel" tabindex="-1">宏任务 - MessageChannel <a class="header-anchor" href="#宏任务-messagechannel" aria-label="Permalink to &quot;宏任务 - MessageChannel&quot;">​</a></h3><h4 id="执行代码-1" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码-1" aria-label="Permalink to &quot;执行代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// channel</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// channel</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="执行结果-1" tabindex="-1">执行结果 <a class="header-anchor" href="#执行结果-1" aria-label="Permalink to &quot;执行结果&quot;">​</a></h4><p><img src="`+c+`" alt="img"></p><h4 id="结果分析-1" tabindex="-1">结果分析 <a class="header-anchor" href="#结果分析-1" aria-label="Permalink to &quot;结果分析&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">宏任务 messageChannel</p><p>在一次渲染过程中，MessageChannel 可以被执行多次，并且 MessageChannel 最大执行时间为 100ms 左右，此时也会影响正常的渲染，但是不是特别明显。</p></div><h3 id="宏任务-settimeout" tabindex="-1">宏任务 - setTimeout <a class="header-anchor" href="#宏任务-settimeout" aria-label="Permalink to &quot;宏任务 - setTimeout&quot;">​</a></h3><h4 id="执行代码-2" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码-2" aria-label="Permalink to &quot;执行代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="执行结果-2" tabindex="-1">执行结果 <a class="header-anchor" href="#执行结果-2" aria-label="Permalink to &quot;执行结果&quot;">​</a></h4><p><img src="`+r+`" alt="img"></p><h4 id="结果分析-2" tabindex="-1">结果分析 <a class="header-anchor" href="#结果分析-2" aria-label="Permalink to &quot;结果分析&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">宏任务 setTimeout</p><p>一次渲染中，setTimeout同样可以执行多次，但是基本不会影响正常渲染。MessageChannel 和 setTimeout 都是宏任务，通常来讲，MessageChannel 是优先于 setTimeout 执行的。但这也需要根据 setTimeout 设置的延迟时间相关。</p></div><h3 id="微任务-promise" tabindex="-1">微任务 - Promise <a class="header-anchor" href="#微任务-promise" aria-label="Permalink to &quot;微任务 - Promise&quot;">​</a></h3><h4 id="执行代码-3" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码-3" aria-label="Permalink to &quot;执行代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">promise</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">promise</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="执行结果-3" tabindex="-1">执行结果 <a class="header-anchor" href="#执行结果-3" aria-label="Permalink to &quot;执行结果&quot;">​</a></h4><p><img src="`+E+'" alt="img"></p><h4 id="结果分析-3" tabindex="-1">结果分析 <a class="header-anchor" href="#结果分析-3" aria-label="Permalink to &quot;结果分析&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">微任务 promise</p><p>一次渲染中微任务会多次执行，并且直到执行完微任务才会开始渲染。这里微任务执行了 1316ms，阻塞了渲染。</p><p>并且微任务之后渲染之前，可能还会出现 宏任务+微任务。</p></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><img src="'+s+`" alt="img"></p><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><h3 id="vue-nexttick-为什么优先使用-promise-而不是-settimeout" tabindex="-1">vue $nextTick 为什么优先使用 promise 而不是 setTimeout？ <a class="header-anchor" href="#vue-nexttick-为什么优先使用-promise-而不是-settimeout" aria-label="Permalink to &quot;vue $nextTick 为什么优先使用 promise 而不是 setTimeout？&quot;">​</a></h3><p>从宏任务和微任务的关系可以知道，当执行<code>this.$nextTick</code>时处于宏任务阶段，而将其回调加入到微任务队列中。当前任务执行完成后，执行微任务，也就是<code>$nextTick</code>回调，最后执行渲染过程。这样就保证了在渲染之前，所有微任务（这里指<code>$nextTick</code>回调）都被执行。</p><p>如果使用<code>setTimeout</code>，此时<code>$nextTick</code>回调是宏任务，回调可能在当前帧执行，可能被推迟到下一帧执行。如果推迟到下一帧执行，此时会先进行当前帧渲染。然后在下一帧<code>$nextTick</code>回调，触发<code>Vue</code>更新再次渲染。例如 <a href="http://jsfiddle.net/v9q9L0hw/2/" target="_blank" rel="noreferrer">宏任务下的Vue效果抖动明显</a><a href="https://jsfiddle.net/k6bgu2z6/4/" target="_blank" rel="noreferrer">微任务下的Vue效果相对稳定</a></p><h3 id="react-时间切片的实现" tabindex="-1">react 时间切片的实现 <a class="header-anchor" href="#react-时间切片的实现" aria-label="Permalink to &quot;react 时间切片的实现&quot;">​</a></h3><p>假设<code>react</code>整个更新过程的时间为160ms，那么这个过程中渲染会被阻塞，此时用户的输入等事件都无法被响应。那么该如何解决这个问题呢？答案是时间切片。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">\`react\`</span><span style="color:#E1E4E8;">的整个更新过程的时间 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 所有节点内容的计算时间 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> 将节点渲染到浏览器时间</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">\`react\`</span><span style="color:#24292E;">的整个更新过程的时间 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 所有节点内容的计算时间 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> 将节点渲染到浏览器时间</span></span></code></pre></div><p><code>将节点渲染到浏览器时间</code>应该是一个完整体，必须一次性进行，否则，出现一点点渲染的问题，影响到用户体验。</p><p>其次是<code>节点相关内容的计算时间</code>，假设它耗时比较长，为150ms，那么我们可以把他拆分为单个节点的计算时间之和。单个节点的计算非常快，这里假设都为0.1ms。那么可以根据宏任务在帧中执行的特点（一帧里可以执行多个宏任务，同时浏览器还会将宏任务合理分配到不同帧中），将渲染过程改为如下过程：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在内存中进行</span></span>
<span class="line"><span style="color:#E1E4E8;">第1帧开始</span></span>
<span class="line"><span style="color:#E1E4E8;">  宏任务开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第1个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第2个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第3个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第4个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第50个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    总耗时5ms，开始下一个宏任务</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  渲染开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    由于更新是在内存中计算的，节点没有任何更新，那么不进行重新渲染</span></span>
<span class="line"><span style="color:#E1E4E8;">第1帧结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">第2帧开始</span></span>
<span class="line"><span style="color:#E1E4E8;">  宏任务开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第51个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第52个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第53个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第100个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    总耗时5ms，开始下一个宏任务</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  渲染开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    由于更新是在内存中计算的，节点没有任何更新，那么不进行重新渲染</span></span>
<span class="line"><span style="color:#E1E4E8;">第2帧结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">第n帧开始</span></span>
<span class="line"><span style="color:#E1E4E8;">  宏任务开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第m</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">2个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第m</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">1个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行第m个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    所有节点计算完毕！</span></span>
<span class="line"><span style="color:#E1E4E8;">    开始更新创建真实节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  渲染开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    真实节点更新，将其渲染到浏览器上</span></span>
<span class="line"><span style="color:#E1E4E8;">第n帧结束</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在内存中进行</span></span>
<span class="line"><span style="color:#24292E;">第1帧开始</span></span>
<span class="line"><span style="color:#24292E;">  宏任务开始</span></span>
<span class="line"><span style="color:#24292E;">    执行第1个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第2个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第3个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第4个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    执行第50个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    总耗时5ms，开始下一个宏任务</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  渲染开始</span></span>
<span class="line"><span style="color:#24292E;">    由于更新是在内存中计算的，节点没有任何更新，那么不进行重新渲染</span></span>
<span class="line"><span style="color:#24292E;">第1帧结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">第2帧开始</span></span>
<span class="line"><span style="color:#24292E;">  宏任务开始</span></span>
<span class="line"><span style="color:#24292E;">    执行第51个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第52个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第53个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    执行第100个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    总耗时5ms，开始下一个宏任务</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  渲染开始</span></span>
<span class="line"><span style="color:#24292E;">    由于更新是在内存中计算的，节点没有任何更新，那么不进行重新渲染</span></span>
<span class="line"><span style="color:#24292E;">第2帧结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">第n帧开始</span></span>
<span class="line"><span style="color:#24292E;">  宏任务开始</span></span>
<span class="line"><span style="color:#24292E;">    执行第m</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">2个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第m</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">1个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    执行第m个节点，耗时0.1ms</span></span>
<span class="line"><span style="color:#24292E;">    所有节点计算完毕！</span></span>
<span class="line"><span style="color:#24292E;">    开始更新创建真实节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  渲染开始</span></span>
<span class="line"><span style="color:#24292E;">    真实节点更新，将其渲染到浏览器上</span></span>
<span class="line"><span style="color:#24292E;">第n帧结束</span></span></code></pre></div><p>通过上面的执行过程，我们可以把<code>react</code>渲染过程切分为一个个执行时间大约<code>5ms</code>的宏任务，同时这些宏任务又被合理分配到了每一帧中，不会阻塞其他任务的进行。所以如果还有其他比较重要的操作，比如点击事件，那么会在下一帧中直接执行。</p>`,53),m=[i];function d(F,h,u,g,C,A){return l(),p("div",null,m)}const q=n(y,[["render",d]]);export{k as __pageData,q as default};
