import{_ as a,o as t,c as e,Q as r}from"./chunks/framework.92ce8a2a.js";const b=JSON.parse('{"title":"二叉查找树（BST）","description":"","frontmatter":{},"headers":[],"relativePath":"data-structures/二叉查找树.md","filePath":"data-structures/二叉查找树.md","lastUpdated":1695640069000}'),l={name:"data-structures/二叉查找树.md"},i=r('<h1 id="二叉查找树-bst" tabindex="-1">二叉查找树（BST） <a class="header-anchor" href="#二叉查找树-bst" aria-label="Permalink to &quot;二叉查找树（BST）&quot;">​</a></h1><h2 id="增加" tabindex="-1">增加 <a class="header-anchor" href="#增加" aria-label="Permalink to &quot;增加&quot;">​</a></h2><ul><li>递归对比大小，找到合适位置插入。</li></ul><h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h2><ul><li>如果没有孩子结点，直接删除。</li><li>如果只有一个孩子结点，则将孩子结点替换当前结点即可。</li><li>如果有两个孩子结点，要么查找<strong>左子树上的最大值</strong>，要么查找<strong>右子树上的最小值</strong>，然后将需要删除的结点替换为这个值，最后删除查找到的那个结点。</li></ul><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-label="Permalink to &quot;查找&quot;">​</a></h2><ul><li>递归查找</li></ul><h2 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h2><ul><li><strong>中序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之间</li><li><strong>前序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之前</li><li><strong>后序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之后</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>算法导论 - 二叉搜索树</li><li>数据结构与算法JavaScript描述</li></ul>',11),o=[i];function s(n,d,h,c,u,_){return t(),e("div",null,o)}const f=a(l,[["render",s]]);export{b as __pageData,f as default};
