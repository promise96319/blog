import{_ as o,o as e,c as t,Q as a,k as r}from"./chunks/framework.c610f10c.js";const l="/assets/slide-window.69a36acd.jpeg",i="/assets/three-times-connection.cc5024b0.jpeg",n="/assets/four-times-disconnection.30ba06bc.jpeg",f=JSON.parse('{"title":"运输层","description":"","frontmatter":{},"headers":[],"relativePath":"network/运输层.md","filePath":"network/运输层.md","lastUpdated":1695632838000}'),d={name:"network/运输层.md"},s=a('<h1 id="运输层" tabindex="-1">运输层 <a class="header-anchor" href="#运输层" aria-label="Permalink to &quot;运输层&quot;">​</a></h1><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>运输层协议为运行在<strong>不同主机上的应用进程之间</strong>提供了<strong>逻辑通信</strong>。而网络层则是提供了<strong>主机之间</strong> 的<strong>逻辑通信</strong>。 因此运输层主要工作之一就是对报文进行端口的”封装“，而网络层是对<code>ip</code>地址的”封装“。</p><h2 id="多路复用、多路分解" tabindex="-1">多路复用、多路分解 <a class="header-anchor" href="#多路复用、多路分解" aria-label="Permalink to &quot;多路复用、多路分解&quot;">​</a></h2><p>在接收端，运输层检查这些字段，标识出接收套接字，进而将报文段定向到该套接字。将运输层报文段中的数据交付到正确的套接字的工作称为<strong>多路分解</strong>。例如，网络请求中在接收端中解析出请求的端口号，然后找到对应的应用程序进行处理。</p><p>在源主机从不同套接字中收集数据块，并为每个数据块<strong>封装上首部信息</strong>从而生成报文段，然后将报文段传递到网络层，所有这些过程称为<strong>多路复用</strong>。多路复用需要封装<strong>源端口号字段</strong>和<strong>目的端口号字段</strong>。端口号是一个16比特的数，在0~65535之间。0~1023范围的端口号称为<strong>周知端口号</strong>。</p><h2 id="无连接运输-udp" tabindex="-1">无连接运输：UDP <a class="header-anchor" href="#无连接运输-udp" aria-label="Permalink to &quot;无连接运输：UDP&quot;">​</a></h2><p><code>UDP</code>(用户数据报协议)为调用它的应用程序提供了一种<strong>不可靠</strong>、<strong>无连接</strong>的服务。</p><p><code>UDP</code>首部由4个字段组成，为8个字节：源端口号16比特，目的端口号16比特，检验和16比特， 报文长度16比特。</p><p><code>DNS</code>是一个使用<code>UDP</code>的应用层协议的例子。</p><h2 id="可靠数据传输原理" tabindex="-1">可靠数据传输原理 <a class="header-anchor" href="#可靠数据传输原理" aria-label="Permalink to &quot;可靠数据传输原理&quot;">​</a></h2><h3 id="rdt1-0" tabindex="-1">rdt1.0 <a class="header-anchor" href="#rdt1-0" aria-label="Permalink to &quot;rdt1.0&quot;">​</a></h3><p>假设底层信道是完全可靠的（实际上是TCP是在不可靠的IP网络层上实现的可靠的数据传输协议），那么接收端就不需要提供给发送端任何反馈信息。</p><h3 id="rdt2-0" tabindex="-1">rdt2.0 <a class="header-anchor" href="#rdt2-0" aria-label="Permalink to &quot;rdt2.0&quot;">​</a></h3><p>底层信道更为实际的模型是分组中的比特可能受损的模型。</p><ul><li>差错监测：判断分组是否受损</li><li>接收方反馈：进行<strong>肯定确认(ACK)<strong>和</strong>否定确认(NAK)</strong>。</li><li>重传：添加<strong>序号(seq)</strong>，用于分辨分组并判断是否需要重传。</li></ul><h3 id="rdt3-0" tabindex="-1">rdt3.0 <a class="header-anchor" href="#rdt3-0" aria-label="Permalink to &quot;rdt3.0&quot;">​</a></h3><ul><li>为了实现基于时间的重传机制，需要一个倒计时定时器，在一个给定时间量过期后，可中断发送方。</li><li>将<strong>停等协议</strong>(发送方等到ACK了才发送下一个请求)改为<strong>流水线的方式</strong>。解决流水线的差错恢复有两种方法：<strong>回退N步</strong>和<strong>选择重传</strong>。</li></ul><h3 id="滑动窗口结构" tabindex="-1">滑动窗口结构 <a class="header-anchor" href="#滑动窗口结构" aria-label="Permalink to &quot;滑动窗口结构&quot;">​</a></h3><p>包含已被确认、已发送还未确认、可用但未发送和不可用四部分。</p><p><img src="'+l+'" alt="img"></p><p>其中<strong>已发送还未确认</strong>和<strong>可用但未发送</strong>的长度为<strong>窗口长度</strong>。</p><h3 id="回退n步" tabindex="-1">回退N步 <a class="header-anchor" href="#回退n步" aria-label="Permalink to &quot;回退N步&quot;">​</a></h3><p><strong>回退N步</strong>中<strong>接收方丢弃所有失序分组</strong>，这种方法的优点是接收缓存简单，即接收方不需要缓存任何分组。</p><h3 id="选择重传" tabindex="-1">选择重传 <a class="header-anchor" href="#选择重传" aria-label="Permalink to &quot;选择重传&quot;">​</a></h3><p>接收方会缓存失序的分组，等到所有丢失的分组被收到的时候，这时才将一批分组按需交付给上层。</p><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>面向连接：传输数据前必须进行三次握手。</li><li>可靠：保证数据的完整性。</li><li>全双工服务：发送方和接收方可互相通信。</li></ul><h3 id="报文结构" tabindex="-1">报文结构 <a class="header-anchor" href="#报文结构" aria-label="Permalink to &quot;报文结构&quot;">​</a></h3><p>首部一般是20字节：</p><ul><li>源端口号16比特</li><li>目的端口号16比特</li><li>序号32比特</li><li>确认号32比特</li><li>接收窗口16比特</li><li>检验和16特比</li><li>标志字段（FIN/SYN/ACK等等）和紧急数据指针共32比特</li></ul><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><ul><li>TCP只确认该流中至第一个丢失字节为止的字节，所以TCP被称为<strong>累积确认</strong>。</li></ul><h3 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h3><p><img src="'+i+'" alt="img"></p><ul><li><p>第一次：</p><ul><li>SYN置为1，用于标识现在是握手。</li><li>客户端随机选择一个初始序号seq为x。</li><li>此时不包含应用层数据。</li></ul></li><li><p>第二次：服务端接收请求，为该TCP链接分配TCP缓存和变量。返回响应时：</p><ul><li>将SYN置为1，标识现在是握手。</li><li>将客户端序号进行确认，返回ack为x+1。</li><li>随机选择自己的初始序号，seq为y。</li><li>此时不包含应用层数据。</li></ul></li><li><p>第三次：</p><ul><li>连接已经建立，SYN置为0。</li><li>确认服务端的序号，ack为y+1。</li><li>自身的序号seq为 x+1。</li><li>携带应用层数据进行传输。</li></ul></li></ul><h3 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h3><p><img src="'+n+'" alt="img"></p><ul><li>第一次：客户端将FIN置为1，表示”我准备断开连接了“</li><li>第二次：服务端接收到断开连接的报文，进行确认，表示”我已经知道你要断开连接了”。</li><li>第三次：并等待一段时间，看下还有没有未处理的客户端的数据到来，如果没有的话，就开始告诉客户端“我也要断开连接了”。</li><li>第四次：客户端接收到服务端的关闭请求，并进行确认，“你可以断开连接了”。并且客户端等待一段时间，用于确保服务端已经断开连接了。如果服务端没有正常断开连接，那么会进行重传。</li></ul><h3 id="syn洪泛攻击" tabindex="-1">SYN洪泛攻击 <a class="header-anchor" href="#syn洪泛攻击" aria-label="Permalink to &quot;SYN洪泛攻击&quot;">​</a></h3><p>攻击者发送大量的TCP SYN报文段，而不完成第三次握手的步骤。随着SYN报文段的纷至沓来，服务器不断为这些半开连接分配资源（但从未使用），导致服务器的连接资源被消耗殆尽。</p><h3 id="流量控制" tabindex="-1">流量控制 <a class="header-anchor" href="#流量控制" aria-label="Permalink to &quot;流量控制&quot;">​</a></h3><p>服务端缓存已用空间可表示为：</p><blockquote><p>服务端缓存已用空间 = 接收数据流的最后一个字节的编号 - 上层应用从缓存中读出的数据流的最后一个字节的编号</p></blockquote><p><strong>接收窗口rwnd</strong>可表示为：</p><blockquote><p>rwnd = 服务器缓存总空间 - 服务器缓存已用空间</p></blockquote><p>客户端接收到<code>rwnd</code>，需要保证：</p><blockquote><p>最后发送的字节的编号 - 已经被确认的字节的编号 &lt; rwnd</p></blockquote><p>如果<code>rwnd = 0</code>，那么说明没有可用的空间了，此时客户端继续发送只有一个字节数据的报文段，直到服务端的<code>rwnd &gt; 0</code>。</p><h3 id="拥塞控制" tabindex="-1">拥塞控制 <a class="header-anchor" href="#拥塞控制" aria-label="Permalink to &quot;拥塞控制&quot;">​</a></h3>',51),c=r("p",{"服务端接收窗口,":"",客户端拥塞窗口:""},"发送窗口 = min",-1),h=a('<ul><li><p><strong>慢启动：拥塞窗口cwnd</strong>的值以1个<code>MSS</code>开始并且每当传输的报文段首次被确认就增加1个<code>MSS</code>。这个过程每过一个<code>RTT</code>，<code>cwnd</code>就翻倍。因此是指数级增加，过程比较短。结束慢启动的方式有：</p><ul><li>接收到丢包事件时，将<strong>慢启动阈值(ssthresh)</strong> 为<code>cwnd</code>的一半，并将<code>cwnd</code>置为1，并重新开始慢启动过程。</li><li>当达到或超过<strong>ssthresh时</strong>，结束慢启动转移到拥塞避免。</li><li>如果检测到有3个冗余<code>ACK</code>，执行快速重传，进入快速恢复状态。</li></ul></li><li><p><strong>拥塞避免</strong>：每一个新的确认到达<code>cwnd</code>加1。</p><ul><li>当出现超时时，与慢启动一样，<code>ssthresh</code>置为<code>cwnd</code>的一半， <code>cwnd</code>置为1。</li><li>如果是接收到3个冗余<code>ACK</code>，<code>ssthresh</code>置为<code>cwnd</code>的一半， <code>cwnd</code>置为一半，进行快速恢复状态。</li></ul></li><li><p><strong>快速恢复</strong>：对收到的每个冗余的<code>ACK</code>，<code>cwnd</code>值增加一个<code>MSS</code>，当丢失报文的<code>ACK</code>都到达的时候，降低<code>cwnd</code>进入拥塞避免阶段。</p><ul><li>超时时，处理和慢启动一致。</li></ul></li></ul><h2 id="差错校验" tabindex="-1">差错校验 <a class="header-anchor" href="#差错校验" aria-label="Permalink to &quot;差错校验&quot;">​</a></h2><h3 id="奇偶校验" tabindex="-1">奇偶校验 <a class="header-anchor" href="#奇偶校验" aria-label="Permalink to &quot;奇偶校验&quot;">​</a></h3><p>附加一个比特，使得发送的信息的比特中1的个数为奇数（或偶数）。</p><p>为了更好的定位单个比特的出错信息，使用<strong>二维奇偶校验</strong>。</p><h3 id="校验和" tabindex="-1">校验和 <a class="header-anchor" href="#校验和" aria-label="Permalink to &quot;校验和&quot;">​</a></h3><p><code>d</code>比特数据被作为一个<code>k</code>比特整数的序列处理。将所有<code>k</code>比特整数相加，加出来的值放到首部中（16比特）。接收方在接收数据的时候，做同样的处理，并与发送方的和进行相加取反。看最终相加的比特中是否包含0，如果包含，说明有比特出错。</p><h3 id="循环冗余检测" tabindex="-1">循环冗余检测 <a class="header-anchor" href="#循环冗余检测" aria-label="Permalink to &quot;循环冗余检测&quot;">​</a></h3>',8),p=[s,c,h];function u(g,q,b,_,m,P){return e(),t("div",null,p)}const x=o(d,[["render",u]]);export{f as __pageData,x as default};
