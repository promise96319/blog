import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.c610f10c.js";const _=JSON.parse('{"title":"自动引入方案","description":"","frontmatter":{},"headers":[],"relativePath":"project/auto-import.md","filePath":"project/auto-import.md","lastUpdated":1695631559000}'),l={name:"project/auto-import.md"},r=t('<h1 id="自动引入方案" tabindex="-1">自动引入方案 <a class="header-anchor" href="#自动引入方案" aria-label="Permalink to &quot;自动引入方案&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>对于一些通用库和共用文件，每个文件都需要重复引入一遍，比较繁琐。如果引入内容过多时，代码的可读性不强。</p><h2 id="解决目标" tabindex="-1">解决目标 <a class="header-anchor" href="#解决目标" aria-label="Permalink to &quot;解决目标&quot;">​</a></h2><p>对于通用文件可以无需引入即可使用相关 api：</p><ul><li>通用库：比如 <code>react/react-dom/mobx/classnames/...</code> 等等。</li><li>内部私有库： 比如 <code>@qt/design、@qt/ui、@qt/style、@qt/shared</code> 等等。</li><li>公用文件：比如 <code>common/</code> 文件夹下的公用组件等。</li></ul><h2 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h2><p>使用 <code>auto-import-plugin</code> 插件：<a href="https://github.com/antfu/unplugin-auto-import" target="_blank" rel="noreferrer">https://github.com/antfu/unplugin-auto-import</a></p><ol><li>根据文档在 <code>webpack</code> 配置中添加 <code>auto-import-plugin</code> 插件。</li><li><code>tsconfig.json</code> 引入插件生成的类型声明文件。</li><li><code>.eslintrc</code> 引入插件生成的 <code>global</code> 声明文件。</li></ol><h2 id="一些问题" tabindex="-1">一些问题 <a class="header-anchor" href="#一些问题" aria-label="Permalink to &quot;一些问题&quot;">​</a></h2><h3 id="是否支持按需引入" tabindex="-1">是否支持按需引入？ <a class="header-anchor" href="#是否支持按需引入" aria-label="Permalink to &quot;是否支持按需引入？&quot;">​</a></h3><ul><li>支持，插件内部会判断是否使用了某个库的某个变量，来决定是否引入该库。</li></ul><h3 id="是否支持类型提示" tabindex="-1">是否支持类型提示？ <a class="header-anchor" href="#是否支持类型提示" aria-label="Permalink to &quot;是否支持类型提示？&quot;">​</a></h3><ul><li>支持，但是会多一层类型声明，点击跳转的时候会多点一次，不够理想。</li></ul><h3 id="是否有-eslint-错误" tabindex="-1">是否有 <code>eslint</code> 错误？ <a class="header-anchor" href="#是否有-eslint-错误" aria-label="Permalink to &quot;是否有 `eslint` 错误？&quot;">​</a></h3><ul><li>没有。插件内部会将相应的变量在 <code>eslint global</code> 中声明，所以不会存在 <code>no-undef</code> 错误。但是 <code>react/jsx-no-undef</code> 会存在错误，需要开启 <code>allowGlobal: true</code> 配置，允许全局定义的变量解决。</li></ul><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><ul><li><a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5" target="_blank" rel="noreferrer">Element Plus</a></li></ul>',18),i=[r];function c(d,n,h,s,u,p){return a(),o("div",null,i)}const b=e(l,[["render",c]]);export{_ as __pageData,b as default};
