import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.b96c6c14.js";const u=JSON.parse('{"title":"vue-loader实现","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/vue-loader实现.md","filePath":"webpack/vue-loader实现.md","lastUpdated":1698927986000}'),l={name:"webpack/vue-loader实现.md"},o=p(`<h1 id="vue-loader实现" tabindex="-1">vue-loader实现 <a class="header-anchor" href="#vue-loader实现" aria-label="Permalink to &quot;vue-loader实现&quot;">​</a></h1><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p><a href="https://webpack.docschina.org/configuration/module/" target="_blank" rel="noreferrer">webpack loader 配置地址</a></p><p><a href="https://vue-loader.vuejs.org/zh/guide/#vue-cli" target="_blank" rel="noreferrer">vue-loader 文档地址</a></p><p><a href="https://github.com/vuejs/vue-loader#how-it-works" target="_blank" rel="noreferrer">github vue-loader</a></p><p>安装<code>vue-loader</code>以及<code>vue-template-compiler</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">D</span><span style="color:#E1E4E8;"> vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">compiler</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">D</span><span style="color:#24292E;"> vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">compiler</span></span></code></pre></div><p><code>webpack</code>配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js 文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">VueLoaderPlugin</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue-loader&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        loader: </span><span style="color:#9ECBFF;">&#39;vue-loader&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VueLoaderPlugin</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js 文件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">VueLoaderPlugin</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vue-loader&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">config</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        loader: </span><span style="color:#032F62;">&#39;vue-loader&#39;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VueLoaderPlugin</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="vueloaderplugin应用" tabindex="-1">VueLoaderPlugin应用 <a class="header-anchor" href="#vueloaderplugin应用" aria-label="Permalink to &quot;VueLoaderPlugin应用&quot;">​</a></h2><p>找到<code>vue-loader/lib/plugin-webpack5.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VueLoaderPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 定义 picther loader</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pitcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      loader: require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./loaders/pitcher&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resourceQuery</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">query</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">query) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parsed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qs.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(query.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parsed.vue </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cacheDirectory: vueLoaderUse.options.cacheDirectory,</span></span>
<span class="line"><span style="color:#E1E4E8;">        cacheIdentifier: vueLoaderUse.options.cacheIdentifier</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 替换 rules</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.options.module.rules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitcher,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">clonedRules,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">rules</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VueLoaderPlugin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 定义 picther loader</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pitcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      loader: require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./loaders/pitcher&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resourceQuery</span><span style="color:#24292E;">: </span><span style="color:#E36209;">query</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">query) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parsed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qs.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(query.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parsed.vue </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      options: {</span></span>
<span class="line"><span style="color:#24292E;">        cacheDirectory: vueLoaderUse.options.cacheDirectory,</span></span>
<span class="line"><span style="color:#24292E;">        cacheIdentifier: vueLoaderUse.options.cacheIdentifier</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 替换 rules</span></span>
<span class="line"><span style="color:#24292E;">    compiler.options.module.rules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      pitcher,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">clonedRules,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">rules</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该插件的主要作用是添加了一个<code>pitcher</code>的<code>loader</code>。该<code>loader</code>通过<code>resourceQuery</code>判断<code>query</code>是否存在，也就是文件请求路径是否带有查询参数。如果有查询参数，还需要解析<code>query</code>判断查询参数中是否有<code>vue</code>。因此，<code>pitcher loader</code>是在文件请求路径查询参数中包含<code>vue</code>时才会匹配。</p><h2 id="解析-loaders" tabindex="-1">解析 loaders <a class="header-anchor" href="#解析-loaders" aria-label="Permalink to &quot;解析 loaders&quot;">​</a></h2><p>在<code>make</code>阶段的<code>factorizeModule</code>过程中，会进行文件的解析(<code>resolve</code>)。对于以<code>.vue</code>结尾的文件，根据<code>rules</code>规则，会匹配到<code>vue-loader</code>，从而解析出<code>vue-loader</code>的实际引用路径，类似如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;/Users/xxx/xxx/node_modules/vue-loader/lib/index.js&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;/Users/xxx/xxx/node_modules/vue-loader/lib/index.js&#39;</span></span></code></pre></div><h2 id="loader-runner" tabindex="-1">loader-runner <a class="header-anchor" href="#loader-runner" aria-label="Permalink to &quot;loader-runner&quot;">​</a></h2><p>在<code>make</code>阶段的<code>buildModule</code>过程中，<code>webpack</code>使用<a href="https://github.com/webpack/loader-runner" target="_blank" rel="noreferrer">loader-runner</a>库执行<code>loaders</code>。对于以<code>.vue</code>结尾的文件，此时只会执行<code>vue-loader</code>。</p><h2 id="vue-loader" tabindex="-1">vue-loader <a class="header-anchor" href="#vue-loader" aria-label="Permalink to &quot;vue-loader&quot;">​</a></h2><p>找到<code>node_modules/vue-loader/lib/index.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 解析查询参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">resourceQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderContext</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rawQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resourceQuery.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">incomingQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qs.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(rawQuery)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 解析源码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">descriptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    source,</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler: options.compiler </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadTemplateCompiler</span><span style="color:#E1E4E8;">(loaderContext),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename,</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceRoot,</span></span>
<span class="line"><span style="color:#E1E4E8;">    needMap: sourceMap</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3. 如果参数中有 type ，使用对应的 loader 执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (incomingQuery.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">selectBlock</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      descriptor,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      incomingQuery,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">options.appendExtension</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 4. 其他，根据不同的 type，分别生成不同的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 解析查询参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">resourceQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderContext</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rawQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resourceQuery.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">incomingQuery</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qs.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(rawQuery)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 解析源码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">descriptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    source,</span></span>
<span class="line"><span style="color:#24292E;">    compiler: options.compiler </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadTemplateCompiler</span><span style="color:#24292E;">(loaderContext),</span></span>
<span class="line"><span style="color:#24292E;">    filename,</span></span>
<span class="line"><span style="color:#24292E;">    sourceRoot,</span></span>
<span class="line"><span style="color:#24292E;">    needMap: sourceMap</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3. 如果参数中有 type ，使用对应的 loader 执行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (incomingQuery.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">selectBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      descriptor,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      incomingQuery,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">options.appendExtension</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 4. 其他，根据不同的 type，分别生成不同的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>vue-loader</code>会通过<code>component-compiler-utils</code>包对<code>.vue</code>文件代码解析，解析出来的格式为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">script</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;script&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">styles</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">template</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customBlocks</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">errors</span><span style="color:#E1E4E8;">: []</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">script</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;script&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">styles</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">template</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customBlocks</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">errors</span><span style="color:#24292E;">: []</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在首次加载时，没有查询参数，所以会进入到第四步，根据不同的<code>type</code>将解析出来的代码按照模块的形式引入，如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// type 为 template</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;import { render, staticRenderFns } from &quot;./component.vue?vue&amp;type=template&amp;id=a8ea6a18&amp;scoped=true&amp;&quot;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// type 为 script</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;import script from &quot;./component.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span><span style="color:#79B8FF;">\\n</span></span>
<span class="line"><span style="color:#9ECBFF;">export * from &quot;./component.vue?vue&amp;type=script&amp;lang=js&amp;&quot;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// type 为 style</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;import style0 from &quot;./component.vue?vue&amp;type=style&amp;index=0&amp;id=a8ea6a18&amp;lang=css&amp;scoped=true&amp;&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// type 为 template</span></span>
<span class="line"><span style="color:#032F62;">&#39;import { render, staticRenderFns } from &quot;./component.vue?vue&amp;type=template&amp;id=a8ea6a18&amp;scoped=true&amp;&quot;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// type 为 script</span></span>
<span class="line"><span style="color:#032F62;">&#39;import script from &quot;./component.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span><span style="color:#005CC5;">\\n</span></span>
<span class="line"><span style="color:#032F62;">export * from &quot;./component.vue?vue&amp;type=script&amp;lang=js&amp;&quot;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// type 为 style</span></span>
<span class="line"><span style="color:#032F62;">&#39;import style0 from &quot;./component.vue?vue&amp;type=style&amp;index=0&amp;id=a8ea6a18&amp;lang=css&amp;scoped=true&amp;&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span></code></pre></div><h2 id="pitch" tabindex="-1">pitch <a class="header-anchor" href="#pitch" aria-label="Permalink to &quot;pitch&quot;">​</a></h2><p><a href="https://webpack.docschina.org/api/loaders/#pitching-loader" target="_blank" rel="noreferrer">Picthing Loader 文档</a></p><p><code>vue-loader</code>代码转换后，下次加载这些模块的时候，由于请求路径参数带有<code>vue</code>，因此在<code>VueLoaderPlugin</code>插件中添加的<code>pitcher loader</code>也会匹配。所以对于<code>?vue&amp;type=xxx</code>结尾的文件，会匹配<code>[pitcher loader, vue-loader]</code>这两个<code>loader</code>。首先执行的是<code>pitcher loader</code> 的<code>pitch</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (query.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`template\`</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genRequest</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">cacheLoader,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">postLoaders,</span></span>
<span class="line"><span style="color:#E1E4E8;">    templateLoaderPath </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`??vue-loader-options\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">preLoaders</span></span>
<span class="line"><span style="color:#E1E4E8;">  ])</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`export * from \${</span><span style="color:#E1E4E8;">request</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (query.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`template\`</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genRequest</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">cacheLoader,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">postLoaders,</span></span>
<span class="line"><span style="color:#24292E;">    templateLoaderPath </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`??vue-loader-options\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">preLoaders</span></span>
<span class="line"><span style="color:#24292E;">  ])</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`export * from \${</span><span style="color:#24292E;">request</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数同样是根据不同的<code>type</code>对引用路径做不同的处理。比如<code>template</code>在加载时，由于还需要解析<code>template</code>内的代码，所以加入了<code>templateLoader</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">compileTemplate</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@vue/component-compiler-utils&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compiled</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compileTemplate</span><span style="color:#E1E4E8;">(finalOptions)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compiled</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">export { render, staticRenderFns }\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">compileTemplate</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@vue/component-compiler-utils&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compiled</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compileTemplate</span><span style="color:#24292E;">(finalOptions)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compiled</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">export { render, staticRenderFns }\`</span></span></code></pre></div><p>该<code>loader</code>会将<code>template</code>中<code>Vue</code>代码进行编译。（这里<code>template</code>中的代码则是由<code>vue-loader</code>中的<code>selectBlock</code>方法提供）</p><h2 id="vue热更新" tabindex="-1">vue热更新 <a class="header-anchor" href="#vue热更新" aria-label="Permalink to &quot;vue热更新&quot;">​</a></h2><p><a href="https://github.com/vuejs/vue-loader/blob/master/lib/codegen/hotReload.js" target="_blank" rel="noreferrer">hot reload 源码</a></p><p><a href="https://github.com/vuejs/vue-hot-reload-api/blob/master/src/index.js" target="_blank" rel="noreferrer">vue-hot-reload-api 源码</a></p><p>在<code>vue-loader/lib/index.js</code>文件中后半段，处理完<code>script/template/style</code>等代码之后，会添加热更新相关代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 整理属性，定义 component 变量</span></span>
<span class="line"><span style="color:#9ECBFF;">\`/* normalize component */</span></span>
<span class="line"><span style="color:#9ECBFF;">import normalizer from \${</span><span style="color:#B392F0;">stringifyRequest</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">\`!\${</span><span style="color:#E1E4E8;">componentNormalizerPath</span><span style="color:#9ECBFF;">}\`</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">var component = normalizer(</span></span>
<span class="line"><span style="color:#9ECBFF;">script,</span></span>
<span class="line"><span style="color:#9ECBFF;">render,</span></span>
<span class="line"><span style="color:#9ECBFF;">staticRenderFns,</span></span>
<span class="line"><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">hasFunctional</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`true\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`false\`},</span></span>
<span class="line"><span style="color:#9ECBFF;">\${/</span><span style="color:#DBEDFF;">injectStyles</span><span style="color:#9ECBFF;">/</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">test</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">stylesCode</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`injectStyles\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`null\`},</span></span>
<span class="line"><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">hasScoped</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`null\`},</span></span>
<span class="line"><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">isServer</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#B392F0;">hash</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">request</span><span style="color:#9ECBFF;">)) </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`null\`}</span></span>
<span class="line"><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">isShadow</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`,true\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`\`}</span></span>
<span class="line"><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加 module.hot 代码</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (needsHotReload) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genHotReloadCode</span><span style="color:#E1E4E8;">(id, hasFunctional, templateRequest)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 整理属性，定义 component 变量</span></span>
<span class="line"><span style="color:#032F62;">\`/* normalize component */</span></span>
<span class="line"><span style="color:#032F62;">import normalizer from \${</span><span style="color:#6F42C1;">stringifyRequest</span><span style="color:#032F62;">(</span><span style="color:#032F62;">\`!\${</span><span style="color:#24292E;">componentNormalizerPath</span><span style="color:#032F62;">}\`</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">var component = normalizer(</span></span>
<span class="line"><span style="color:#032F62;">script,</span></span>
<span class="line"><span style="color:#032F62;">render,</span></span>
<span class="line"><span style="color:#032F62;">staticRenderFns,</span></span>
<span class="line"><span style="color:#032F62;">\${</span><span style="color:#24292E;">hasFunctional</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`true\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`false\`},</span></span>
<span class="line"><span style="color:#032F62;">\${/injectStyles/</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">test</span><span style="color:#032F62;">(</span><span style="color:#24292E;">stylesCode</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`injectStyles\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`null\`},</span></span>
<span class="line"><span style="color:#032F62;">\${</span><span style="color:#24292E;">hasScoped</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">id</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`null\`},</span></span>
<span class="line"><span style="color:#032F62;">\${</span><span style="color:#24292E;">isServer</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#6F42C1;">hash</span><span style="color:#032F62;">(</span><span style="color:#24292E;">request</span><span style="color:#032F62;">)) </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`null\`}</span></span>
<span class="line"><span style="color:#032F62;">\${</span><span style="color:#24292E;">isShadow</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`,true\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`\`}</span></span>
<span class="line"><span style="color:#032F62;">)</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加 module.hot 代码</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (needsHotReload) {</span></span>
<span class="line"><span style="color:#24292E;">  code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genHotReloadCode</span><span style="color:#24292E;">(id, hasFunctional, templateRequest)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先定义了<code>component</code>变量，随后通过<code>genHotReloadCode</code>方法添加热更新代码。</p><h3 id="genhotreloadcode" tabindex="-1">genHotReloadCode <a class="header-anchor" href="#genhotreloadcode" aria-label="Permalink to &quot;genHotReloadCode&quot;">​</a></h3><p>在<code>lib/codegen/hotReload.js</code>文件中找到<code>genHotReloadCode</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hotReloadAPIPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue-hot-reload-api&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">genHotReloadCode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">functional</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">templateRequest</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">/* hot reload */</span></span>
<span class="line"><span style="color:#9ECBFF;">if (module.hot) {</span></span>
<span class="line"><span style="color:#9ECBFF;">  var api = require(\${</span><span style="color:#E1E4E8;">hotReloadAPIPath</span><span style="color:#9ECBFF;">})</span></span>
<span class="line"><span style="color:#9ECBFF;">  api.install(require(&#39;vue&#39;))</span></span>
<span class="line"><span style="color:#9ECBFF;">  if (api.compatible) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    module.hot.accept()</span></span>
<span class="line"><span style="color:#9ECBFF;">    if (!api.isRecorded(&#39;\${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}&#39;)) {</span></span>
<span class="line"><span style="color:#9ECBFF;">      api.createRecord(&#39;\${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}&#39;, component.options)</span></span>
<span class="line"><span style="color:#9ECBFF;">    } else {</span></span>
<span class="line"><span style="color:#9ECBFF;">      api.\${</span><span style="color:#E1E4E8;">functional</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;rerender&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;reload&#39;}(&#39;\${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}&#39;, component.options)</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">    \${</span><span style="color:#E1E4E8;">templateRequest</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">genTemplateHotReloadCode</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">templateRequest</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;&#39;}</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hotReloadAPIPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;vue-hot-reload-api&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">genHotReloadCode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">functional</span><span style="color:#24292E;">, </span><span style="color:#E36209;">templateRequest</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">/* hot reload */</span></span>
<span class="line"><span style="color:#032F62;">if (module.hot) {</span></span>
<span class="line"><span style="color:#032F62;">  var api = require(\${</span><span style="color:#24292E;">hotReloadAPIPath</span><span style="color:#032F62;">})</span></span>
<span class="line"><span style="color:#032F62;">  api.install(require(&#39;vue&#39;))</span></span>
<span class="line"><span style="color:#032F62;">  if (api.compatible) {</span></span>
<span class="line"><span style="color:#032F62;">    module.hot.accept()</span></span>
<span class="line"><span style="color:#032F62;">    if (!api.isRecorded(&#39;\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}&#39;)) {</span></span>
<span class="line"><span style="color:#032F62;">      api.createRecord(&#39;\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}&#39;, component.options)</span></span>
<span class="line"><span style="color:#032F62;">    } else {</span></span>
<span class="line"><span style="color:#032F62;">      api.\${</span><span style="color:#24292E;">functional</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;rerender&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;reload&#39;}(&#39;\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}&#39;, component.options)</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">    \${</span><span style="color:#24292E;">templateRequest</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">genTemplateHotReloadCode</span><span style="color:#032F62;">(</span><span style="color:#24292E;">id</span><span style="color:#032F62;">, </span><span style="color:#24292E;">templateRequest</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;&#39;}</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">  \`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="api-install" tabindex="-1">api.install <a class="header-anchor" href="#api-install" aria-label="Permalink to &quot;api.install&quot;">​</a></h3><p>如果<code>module.hot</code>存在，首先会加载<code>vue-hot-reload-api</code>模块，然后调用其<code>install</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">browserify</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (installed) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  installed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vue.__esModule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> vue.default </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> vue</span></span>
<span class="line"><span style="color:#E1E4E8;">  version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Vue.version.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Number)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.compatible </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> version[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">browserify</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (installed) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  installed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  Vue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vue.__esModule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> vue.default </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> vue</span></span>
<span class="line"><span style="color:#24292E;">  version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Vue.version.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Number)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.compatible </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> version[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>主要是处理一些版本兼容的问题，如<code>vue-hot-reload-api</code>只适合<code>Vue</code>版本大于<code>2</code>的情况。</p><h3 id="api-createrecord" tabindex="-1">api.createRecord <a class="header-anchor" href="#api-createrecord" aria-label="Permalink to &quot;api.createRecord&quot;">​</a></h3><p>其次如果<code>id</code>没有被记录的话，会执行<code>api.createRecord(&#39;\${id}&#39;, component.options)</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createRecord</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(map[id]) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. Ctor 为当前组件的构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options</span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ctor.options</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 注入生命周期</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">makeOptionsHot</span><span style="color:#E1E4E8;">(id, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3. 记录当前id 对应的构造函数等信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  map[id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ctor: Ctor,</span></span>
<span class="line"><span style="color:#E1E4E8;">    options: options,</span></span>
<span class="line"><span style="color:#E1E4E8;">    instances: []</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createRecord</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(map[id]) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. Ctor 为当前组件的构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options</span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ctor.options</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 注入生命周期</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">makeOptionsHot</span><span style="color:#24292E;">(id, options)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3. 记录当前id 对应的构造函数等信息</span></span>
<span class="line"><span style="color:#24292E;">  map[id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Ctor: Ctor,</span></span>
<span class="line"><span style="color:#24292E;">    options: options,</span></span>
<span class="line"><span style="color:#24292E;">    instances: []</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中<code>makeOptionsHot</code>方法在不为函数组件时，会执行下列代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 注入 beforeCreate 生命周期回调</span></span>
<span class="line"><span style="color:#B392F0;">injectHook</span><span style="color:#E1E4E8;">(options, initHookName, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> record </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map[id]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">record.Ctor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    record.Ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  record.instances.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入 beforeDestroy 生命周期回调</span></span>
<span class="line"><span style="color:#B392F0;">injectHook</span><span style="color:#E1E4E8;">(options, </span><span style="color:#9ECBFF;">&#39;beforeDestroy&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> instances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map[id].instances</span></span>
<span class="line"><span style="color:#E1E4E8;">  instances.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(instances.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注入 beforeCreate 生命周期回调</span></span>
<span class="line"><span style="color:#6F42C1;">injectHook</span><span style="color:#24292E;">(options, initHookName, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map[id]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">record.Ctor) {</span></span>
<span class="line"><span style="color:#24292E;">    record.Ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  record.instances.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入 beforeDestroy 生命周期回调</span></span>
<span class="line"><span style="color:#6F42C1;">injectHook</span><span style="color:#24292E;">(options, </span><span style="color:#032F62;">&#39;beforeDestroy&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> instances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map[id].instances</span></span>
<span class="line"><span style="color:#24292E;">  instances.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(instances.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>当注入了<code>beforeCreate</code>后，组件被实例化时，就会将组件实例添加到<code>instances</code>中。</p><h3 id="api-reload" tabindex="-1">api.reload <a class="header-anchor" href="#api-reload" aria-label="Permalink to &quot;api.reload&quot;">​</a></h3><p>当前自身模块发生变化时，如果该<code>component</code>已经被<code>record</code>了，那么会执行<code>api.reload</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 继承新的 options</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> newCtor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> record.Ctor.super.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">newCtor.options._Ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> record.options._Ctor</span></span>
<span class="line"><span style="color:#E1E4E8;">record.Ctor.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCtor.options</span></span>
<span class="line"><span style="color:#E1E4E8;">record.Ctor.cid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCtor.cid</span></span>
<span class="line"><span style="color:#E1E4E8;">record.Ctor.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newCtor</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">record.instances.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance.$vnode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.$vnode.context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.$vnode.context.</span><span style="color:#B392F0;">$forceUpdate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 继承新的 options</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> newCtor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> record.Ctor.super.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">newCtor.options._Ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> record.options._Ctor</span></span>
<span class="line"><span style="color:#24292E;">record.Ctor.options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCtor.options</span></span>
<span class="line"><span style="color:#24292E;">record.Ctor.cid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newCtor.cid</span></span>
<span class="line"><span style="color:#24292E;">record.Ctor.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newCtor</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">record.instances.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">instance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance.$vnode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.$vnode.context) {</span></span>
<span class="line"><span style="color:#24292E;">    instance.$vnode.context.</span><span style="color:#6F42C1;">$forceUpdate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数会替换原来记录的组件构造函数，并遍历相关实例进行更新。</p><h3 id="api-rerender" tabindex="-1">api.rerender <a class="header-anchor" href="#api-rerender" aria-label="Permalink to &quot;api.rerender&quot;">​</a></h3><p>最后执行<code>genTemplateHotReloadCode</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genTemplateHotReloadCode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    module.hot.accept(\${</span><span style="color:#E1E4E8;">request</span><span style="color:#9ECBFF;">}, function () {</span></span>
<span class="line"><span style="color:#9ECBFF;">      api.rerender(&#39;\${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}&#39;, {</span></span>
<span class="line"><span style="color:#9ECBFF;">        render: render,</span></span>
<span class="line"><span style="color:#9ECBFF;">        staticRenderFns: staticRenderFns</span></span>
<span class="line"><span style="color:#9ECBFF;">      })</span></span>
<span class="line"><span style="color:#9ECBFF;">    })</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genTemplateHotReloadCode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    module.hot.accept(\${</span><span style="color:#24292E;">request</span><span style="color:#032F62;">}, function () {</span></span>
<span class="line"><span style="color:#032F62;">      api.rerender(&#39;\${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}&#39;, {</span></span>
<span class="line"><span style="color:#032F62;">        render: render,</span></span>
<span class="line"><span style="color:#032F62;">        staticRenderFns: staticRenderFns</span></span>
<span class="line"><span style="color:#032F62;">      })</span></span>
<span class="line"><span style="color:#032F62;">    })</span></span>
<span class="line"><span style="color:#032F62;">  \`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法通过<code>module.hot.accept</code>监听组件中<code>template</code>的变化。如果<code>template</code>有变化，那么执行<code>api.rerender</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.rerender </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryWrap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> record </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map[id]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (record.Ctor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    record.Ctor.options.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.render</span></span>
<span class="line"><span style="color:#E1E4E8;">    record.Ctor.options.staticRenderFns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.staticRenderFns</span></span>
<span class="line"><span style="color:#E1E4E8;">    record.instances.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.$options.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.render</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.$options.staticRenderFns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.staticRenderFns</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> restore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patchScopedSlots</span><span style="color:#E1E4E8;">(instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.</span><span style="color:#B392F0;">$forceUpdate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;">(restore)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.rerender </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryWrap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map[id]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (record.Ctor) {</span></span>
<span class="line"><span style="color:#24292E;">    record.Ctor.options.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.render</span></span>
<span class="line"><span style="color:#24292E;">    record.Ctor.options.staticRenderFns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.staticRenderFns</span></span>
<span class="line"><span style="color:#24292E;">    record.instances.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">instance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      instance.$options.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.render</span></span>
<span class="line"><span style="color:#24292E;">      instance.$options.staticRenderFns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.staticRenderFns</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> restore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">patchScopedSlots</span><span style="color:#24292E;">(instance)</span></span>
<span class="line"><span style="color:#24292E;">      instance.</span><span style="color:#6F42C1;">$forceUpdate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      instance.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;">(restore)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时会遍历收集到的<code>instances</code>，通过<code>$forceUpdate</code>方法强制更新组件。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>vue-loader</code>的实现主要包括以下几个步骤：</p><ol><li>通过<code>VueLoaderPlugin</code>替换<code>webpack</code>中<code>module.rules</code>配置，添加一个<code>pitcher loader</code>，该<code>loader</code>会匹配路径参数中带有<code>vue</code>的文件。</li><li>通过<code>loader-runner</code>对<code>.vue</code>文件解析。通过<code>component-compiler-utils</code>包将<code>.vue</code>文件解析为对象形式，然后根据不同的<code>type</code>（<code>script/template</code>等等），生成不同的查询参数，添加到<code>.vue</code>文件后。</li><li>当下一次<code>build</code>时，遇到前面处理后带参数的<code>.vue</code>文件，会匹配到<code>VueLoaderPlugin</code>插件中添加的<code>pitcher loader</code>。首先会执行<code>pitcher loader</code>的<code>pitch</code>方法，该方法根据参数中不同的<code>type</code>为文件添加不同的<code>loader</code>进行处理。如<code>template</code>会添加<code>templateLoader</code>，<code>css</code>添加<code>css-loader</code>等。相当于根据路径的<code>type</code>为路径包装了一层。添加完成后，会移除<code>pitcher loader</code>。</li><li>在下一次进入到<code>vue-loader</code>时，由于存在<code>type</code>，此时进入到<code>selectBlock</code>环节。根据不同的<code>type</code>对相应代码做不同的处理即可。</li></ol><p><code>vue-loader</code>热更新实现原理：</p><ol><li>通过<code>vue-loader</code>解析代码的末尾，将解析出来的属性整理成<code>component</code>对象，并添加热更新代码。</li><li>热更新代码首先调用<code>createRecord</code>会为当前<code>component</code>注入<code>beforeCreate</code>等生命周期。当组件实例化时，会记录下组件实例。</li><li>如果当前模块代码改变了，且<code>record</code>存在，此时调用<code>reload</code>方法更新组件构造函数，并重新渲染。</li><li>如果<code>vue</code>组件中<code>template</code>代码改变了，此时调用<code>rerender</code>方法进行重新渲染。</li></ol>`,66),e=[o];function c(t,r,y,E,i,d){return n(),a("div",null,e)}const C=s(l,[["render",c]]);export{u as __pageData,C as default};
