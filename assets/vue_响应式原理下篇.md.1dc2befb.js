import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.92ce8a2a.js";const v=JSON.parse('{"title":"数据初始化之响应式原理","description":"","frontmatter":{},"headers":[],"relativePath":"vue/响应式原理下篇.md","filePath":"vue/响应式原理下篇.md","lastUpdated":1695719180000}'),l={name:"vue/响应式原理下篇.md"},o=p(`<h1 id="数据初始化之响应式原理" tabindex="-1">数据初始化之响应式原理 <a class="header-anchor" href="#数据初始化之响应式原理" aria-label="Permalink to &quot;数据初始化之响应式原理&quot;">​</a></h1><p><strong>本章知识要点：</strong></p><ul><li>生命周期和事件机制的初始化过程是怎样的？</li><li>父组件如何快捷监听子组件的生命周期触发事件？</li><li><code>inject/provide</code>的实现与传值时的问题。</li><li><code>props/data/methods</code>的初始化过程。</li><li><code>computed</code>的实现原理。</li><li><code>watch</code>的实现原理。</li><li>为什么<code>beforeCreate</code>生命周期里无法获取数据？</li></ul><p>上一章中我们已经结合<code>Vue</code>源码分析了响应式系统源码的组成，并且熟悉了<code>defineReactive/observe</code>方法和<code>Watcher/Dep/Observer</code>类的代码实现。这一章我们主要侧重于<code>Vue</code>的数据初始化过程，并且通过数据初始化的过程，看看<code>Vue</code>是如何将<code>Watcher、defineReactive</code>应用到项目中的。</p><p>回到<code>Vue</code>初始化过程，找到<code>core/init.js</code>中的<code>_init</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_init</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 选项合并过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    vm.$options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeOptions</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolveConstructorOptions</span><span style="color:#E1E4E8;">(vm.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 数据初始化过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initLifecycle</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initEvents</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initRender</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initInjections</span><span style="color:#E1E4E8;">(vm) </span><span style="color:#6A737D;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initProvide</span><span style="color:#E1E4E8;">(vm) </span><span style="color:#6A737D;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;created&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 挂载过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 选项合并过程</span></span>
<span class="line"><span style="color:#24292E;">    vm.$options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeOptions</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolveConstructorOptions</span><span style="color:#24292E;">(vm.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">      vm</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 数据初始化过程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initLifecycle</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initEvents</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initRender</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;beforeCreate&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initInjections</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initProvide</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;created&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 挂载过程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#24292E;">      vm.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>_init</code>方法是<code>Vue</code>实例化过程的关键。其中第一步<code>mergeOptions</code>方法已经在前面章节中讲过，它在这里主要的作用是将外部用户传入的<code>options</code>和<code>Vue</code>内部的选项配置进行合并。第二步则是数据的初始化过程，也就是本章主要分析的内容，下面我们逐一分析下其中每一个方法的含义。</p><h2 id="initlifecycle" tabindex="-1">initLifecycle <a class="header-anchor" href="#initlifecycle" aria-label="Permalink to &quot;initLifecycle&quot;">​</a></h2><p>找到<code>./lifecycle.js</code>文件中的<code>initLifecycle</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initLifecycle</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 建立父子关系，在父元素中 $children 添加自身</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.parent</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// keep-alive组件的 abstract 为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.abstract) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (parent.$options.abstract </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parent.$parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.$parent</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent.$children.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initLifecycle</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 建立父子关系，在父元素中 $children 添加自身</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.parent</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// keep-alive组件的 abstract 为 true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.abstract) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parent.$options.abstract </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parent.$parent) {</span></span>
<span class="line"><span style="color:#24292E;">      parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.$parent</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    parent.$children.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>initLifecycle</code>方法的第一步做的工作就是处理建立<code>parent</code>和自身实例<code>vm</code>之间的关系：在<code>parent.$children</code>中添加<code>vm</code>。这里<code>options.abstract</code>的判断主要是区分是否是<code>KeepAlive</code>组件，如果是<code>KeepAlive</code>则继续查找上一级的<code>parent</code>。</p><p>接着往下看，这里定义了一些比较常用的属性，第一类是<code>vnode</code>节点相关的，如<code>$parent,$root,$children,$refs</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vm.$parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent</span></span>
<span class="line"><span style="color:#E1E4E8;">vm.$root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parent.$root </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> vm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">vm.$children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">vm.$refs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vm.$parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent</span></span>
<span class="line"><span style="color:#24292E;">vm.$root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> parent.$root </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> vm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">vm.$children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">vm.$refs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>第二类则跟生命周期比较相关，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里存的是渲染 watcher，</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在 vm.$forceUpdate()调用的是此 watcher</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._watcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于控制组件是否活跃，在 keep-alive 组件有使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._inactive </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._directInactive </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否挂载完毕</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._isMounted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否已经销毁</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._isDestroyed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否正在销毁</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._isBeingDestroyed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里存的是渲染 watcher，</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在 vm.$forceUpdate()调用的是此 watcher</span></span>
<span class="line"><span style="color:#24292E;">  vm._watcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于控制组件是否活跃，在 keep-alive 组件有使用</span></span>
<span class="line"><span style="color:#24292E;">  vm._inactive </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  vm._directInactive </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否挂载完毕</span></span>
<span class="line"><span style="color:#24292E;">  vm._isMounted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否已经销毁</span></span>
<span class="line"><span style="color:#24292E;">  vm._isDestroyed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否正在销毁</span></span>
<span class="line"><span style="color:#24292E;">  vm._isBeingDestroyed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>这里的几个属性都比较好理解，需要注意的是<code>_watcher</code>这个属性，这里存放的是渲染<code>Watcher</code>，后面会提到这个属性，同时它也是<code>$forceUpdate()</code>实现的关键。</p><h2 id="initevents" tabindex="-1">initEvents <a class="header-anchor" href="#initevents" aria-label="Permalink to &quot;initEvents&quot;">​</a></h2><p>找到<code>./events.js</code>文件中的<code>initEvents</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initEvents</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 存储所有的 events</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否有名称以 hook: 开头的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._hasHookEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">listeners</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options._parentListeners</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (listeners) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateComponentListeners</span><span style="color:#E1E4E8;">(vm, listeners)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initEvents</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 存储所有的 events</span></span>
<span class="line"><span style="color:#24292E;">  vm._events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否有名称以 hook: 开头的事件</span></span>
<span class="line"><span style="color:#24292E;">  vm._hasHookEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">listeners</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options._parentListeners</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (listeners) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateComponentListeners</span><span style="color:#24292E;">(vm, listeners)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出，这个方法的定义很简单。首先是定义了<code>_events</code>属性，用于存储所有绑定了的事件。其次设置了<code>_hasHookEvent</code>属性，这个属性用于判别监听的事件中是否有名称以<code>hook:</code>的事件。而最后的<code>updateComponentListeners</code>方法是当父组件在子组件上有监听事件的时候，会把相应的监听事件更新到子组件上，即存储<code>_events</code>里。因此使用<code>$emit</code>的时候能够触发<code>_events</code>里的事件，也就是触发了父组件的事件。</p><p>那么这里的<code>_hasHookEvent</code>属性到底有什么用呢？这里先挖个坑，待会在<code>callHook</code>方法里再具体说明。</p><h2 id="initrender" tabindex="-1">initRender <a class="header-anchor" href="#initrender" aria-label="Permalink to &quot;initRender&quot;">​</a></h2><p>找到<code>./render.js</code>中的<code>initRender</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initRender</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 虚拟 DOM</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// the root of the child tree</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// v-once 编译缓存的 虚拟DOM</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._staticTrees </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// v-once cached trees</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// _parentVnode 为父组件的 vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentVnode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options._parentVnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentVnode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parentVnode.context</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// _renderChildren 是父组件调用子组件，在子组件之间的内容，用于 slot</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// slots = { default: [Vnode], [name]: [Vnode], ... }</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm.$slots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveSlots</span><span style="color:#E1E4E8;">(options._renderChildren, renderContext)</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm.$scopedSlots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> emptyObject</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initRender</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 虚拟 DOM</span></span>
<span class="line"><span style="color:#24292E;">  vm._vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// the root of the child tree</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// v-once 编译缓存的 虚拟DOM</span></span>
<span class="line"><span style="color:#24292E;">  vm._staticTrees </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// v-once cached trees</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// _parentVnode 为父组件的 vnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentVnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options._parentVnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentVnode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parentVnode.context</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// _renderChildren 是父组件调用子组件，在子组件之间的内容，用于 slot</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// slots = { default: [Vnode], [name]: [Vnode], ... }</span></span>
<span class="line"><span style="color:#24292E;">  vm.$slots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveSlots</span><span style="color:#24292E;">(options._renderChildren, renderContext)</span></span>
<span class="line"><span style="color:#24292E;">  vm.$scopedSlots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> emptyObject</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里初始化了几个属性，都是和<code>render</code>阶段相关，如<code>_vnode</code>存储<code>render</code>生成的<code>vnode</code>，<code>$slots</code>存储<code>slot</code>的<code>vnode</code>等。</p><p>接下来又定义了两个比较重要的方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(vm, a, b, c, d, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$createElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(vm, a, b, c, d, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(vm, a, b, c, d, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$createElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(vm, a, b, c, d, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span></code></pre></div><p>两者唯一的区别就是最后一个参数不同：<code>_c</code>主要用于模板编译，如<code>template</code>编译后生成的代码将会使用<code>_c</code>来创建节点。而<code>$createElement</code>主要用于用户编写的<code>render</code>函数。</p><p>最后，<code>initRender</code>还将<code>$attrs/$listeners</code>设置为响应式了。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;$attrs&#39;</span><span style="color:#E1E4E8;">, parentData </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parentData.attrs </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> emptyObject, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;$listeners&#39;</span><span style="color:#E1E4E8;">, options._parentListeners </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> emptyObject, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;$attrs&#39;</span><span style="color:#24292E;">, parentData </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parentData.attrs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> emptyObject, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;$listeners&#39;</span><span style="color:#24292E;">, options._parentListeners </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> emptyObject, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="callhook" tabindex="-1">callHook <a class="header-anchor" href="#callhook" aria-label="Permalink to &quot;callHook&quot;">​</a></h2><p><code>callHook</code>方法同样是在<code>./lifecycle.js</code>文件当中，代码如下</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hook</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// issue: https://github.com/vuejs/vue/pull/7596/files</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 每次执行生命周期的时候，不应该进行依赖收集，</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 因此这个位置传的 target 为 undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pushTarget</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handlers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options[hook]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">hook</span><span style="color:#9ECBFF;">} hook\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handlers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handlers.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> j; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeWithErrorHandling</span><span style="color:#E1E4E8;">(handlers[i], vm, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, vm, info)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">popTarget</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hook</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// issue: https://github.com/vuejs/vue/pull/7596/files</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 每次执行生命周期的时候，不应该进行依赖收集，</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 因此这个位置传的 target 为 undefined</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pushTarget</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handlers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options[hook]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">info</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">hook</span><span style="color:#032F62;">} hook\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handlers) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handlers.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> j; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeWithErrorHandling</span><span style="color:#24292E;">(handlers[i], vm, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, vm, info)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">popTarget</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于生命周期里使用数据时不应该搜集依赖，所以会先执行<code>pushTarget</code>。上一章我们已经学习过，<code>pushTarget</code>推入的就是当前的<code>Watcher</code>，由于这里传入的是<code>undefined</code>，那么当前<code>Watcher</code>是不存在的，因此也就不会进行依赖搜集。</p><p>但是，为什么生命周期里不需要进行依赖搜集呢？举个例子：有一个属性<code>A</code>和<code>WatcherB</code>，他们之间没有任何关系，但是如果生命周期里使用了属性<code>A</code>，此时进行依赖搜集，即属性<code>A</code>与<code>WatcherB</code>绑定关系，那么每次在其他地方改变属性<code>A</code>都会去触发这个<code>WatcherB</code>，这就会产生副作用。</p><p>看完了这段代码，再看下一段代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// * 如果绑定的事件中有 hook:[eventName], 那么 _hasHookEvent 为true</span></span>
<span class="line"><span style="color:#6A737D;">// * 可以通过这种方法监听子组件的生命周期事件</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vm._hasHookEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hook:&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> hook)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// * 如果绑定的事件中有 hook:[eventName], 那么 _hasHookEvent 为true</span></span>
<span class="line"><span style="color:#6A737D;">// * 可以通过这种方法监听子组件的生命周期事件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vm._hasHookEvent) {</span></span>
<span class="line"><span style="color:#24292E;">  vm.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hook:&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hook)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里就提到了我们前面挖下的坑：<code>_hasHookEvent</code>具体有什么作用？这里用一个简单的例子说明：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// child.vue</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">created</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child created&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// parent.vue</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@hook:created=&quot;childCreated&quot;&gt;&lt;/Child&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  components: { Child },</span></span>
<span class="line"><span style="color:#E1E4E8;"> methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">childCreated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child crerated in parent&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果</span></span>
<span class="line"><span style="color:#6A737D;">// child created</span></span>
<span class="line"><span style="color:#6A737D;">// child crerated in parent</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// child.vue</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">created</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child created&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// parent.vue</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Child</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@hook:created=&quot;childCreated&quot;&gt;&lt;/Child&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">export</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  components: { Child },</span></span>
<span class="line"><span style="color:#24292E;"> methods: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">childCreated</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child crerated in parent&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出结果</span></span>
<span class="line"><span style="color:#6A737D;">// child created</span></span>
<span class="line"><span style="color:#6A737D;">// child crerated in parent</span></span></code></pre></div><p>这个例子中，子组件<code>Child</code>有一个<code>created</code>钩子。父组件<code>Parent</code>里监听了<code>hook:created</code>事件。由于父组件监听的事件会记录到子组件中，因此当前实例的<code>_hasHookEvent</code>为<code>true</code>。那么在子组件触发钩子的时候，调用<code>callHook</code>，也就是这里会触发<code>vm.$emit(&#39;hook:&#39; + hook)</code>。而此时，我们在父组件监听了<code>hook:created</code>。所以当子组件调用<code>callHook(&#39;created&#39;)</code>的时候，会触发组件<code>hook:created</code>绑定的事件。换句话来说，<strong>也就是我们可以通过hook:来监听子组件生命周期钩子的执行。</strong></p><h2 id="initinjections-initprovide" tabindex="-1">initInjections/initProvide <a class="header-anchor" href="#initinjections-initprovide" aria-label="Permalink to &quot;initInjections/initProvide&quot;">​</a></h2><p>先来看下<code>initInjections</code>，打开<code>./initInjections.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initInjections</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveInject</span><span style="color:#E1E4E8;">(vm.$options.inject, vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// * 只监听最外层，内层的值不监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">toggleObserving</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(vm, key, result[key])</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">toggleObserving</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initInjections</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveInject</span><span style="color:#24292E;">(vm.$options.inject, vm)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// * 只监听最外层，内层的值不监听</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toggleObserving</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(vm, key, result[key])</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toggleObserving</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>initInjects</code>首先是通过<code>resolveInject</code>方法找到对应的注入的值，然后将值遍历进行响应式处理。这里<code>toggleObserving(false)</code>的函数是将<code>shouldObserve</code>变量改为<code>false</code>，从而使得<code>observe</code>方法不能监测对象：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shouldObserve</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggleObserving</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  shouldObserve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">asRootData</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Observer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shouldObserve </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Observer</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shouldObserve</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggleObserving</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  shouldObserve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">asRootData</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Observer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shouldObserve </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Observer</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>即如果<code>inject</code>某个字段的值为对象，那么就不会进行深度监测了。</p><p>接下里是<code>initProvide</code>方法，也比较简单：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initProvide</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">provide</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options.provide</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (provide) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vm._provided </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> provide </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> provide.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> provide</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initProvide</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">provide</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options.provide</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (provide) {</span></span>
<span class="line"><span style="color:#24292E;">    vm._provided </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> provide </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> provide.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> provide</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果<code>provide</code>为函数，就直接执行，最终将值赋值给<code>vm._provided</code>。而<code>initInject</code>里<code>resolveInject</code>的核心就是递归向上查找<code>_provided</code>提供的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (source) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (source._provided </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(source._provided, provideKey)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source._provided[provideKey]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.$parent</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (source) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source._provided </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(source._provided, provideKey)) {</span></span>
<span class="line"><span style="color:#24292E;">    result[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source._provided[provideKey]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.$parent</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里有几点需要注意：</p><ul><li><p>无法通过<code>provide</code>里的值无法通过<code>this.xxx</code>来访问，因为没有做任何代理处理。</p></li><li><p><code>provide</code>里的值需要通过<code>this._provided.xxx</code>访问</p></li><li><p><code>provide</code>里的值未经过响应式处理，因此改变其值，<code>inject</code>不像<code>props</code>那样，无法接收到这种变化，所以<code>inject</code>里的值还是原值，没有变化。</p></li></ul><p>从这里其实就可以看出<code>provide/inject</code>传值过程中的一些局限性了。</p><h2 id="initstate" tabindex="-1">initState <a class="header-anchor" href="#initstate" aria-label="Permalink to &quot;initState&quot;">​</a></h2><p><code>initState</code>方法是处理响应式数据的核心，在讲这个方法实现之前，我们先熟悉一个知识点：<code>Watcher</code>的种类有哪些？</p><p><code>Vue</code>中<code>watcher</code>主要分为三类：</p><p>第一种是<code>renderWatcher</code>，它的核心是视图的渲染，在渲染的过程中，将渲染需要的数据搜集为依赖。</p><p>第二种是<code>computedWatcher</code>，它的核心是计算属性，在使用<code>computed</code>属性时，它会将它内部计算的数据搜集为依赖。</p><p>第三种是<code>watchWatcher</code>，它的核心是监测字段，直接将某个字段或函数依赖的数据搜集为依赖。</p><p>了解完这个知识点后我们就看看<code>initState</code>是如何处理这三种<code>watcher</code>的。打开<code>./initState.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm._watchers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">opts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 校验 props 并添加到 vm 上 设置为响应式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (opts.props) </span><span style="color:#B392F0;">initProps</span><span style="color:#E1E4E8;">(vm, opts.props)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 将 options 里的 methods 分别挂载到 vm 上</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (opts.methods) </span><span style="color:#B392F0;">initMethods</span><span style="color:#E1E4E8;">(vm, opts.methods)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 校验 data key是否冲突 并添加到 vm 上 设置为响应式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (opts.data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initData</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(vm._data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* asRootData */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 实例化 computed watcher 并作为依赖添加到相应的数据中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (opts.computed) </span><span style="color:#B392F0;">initComputed</span><span style="color:#E1E4E8;">(vm, opts.computed)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (opts.watch </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> opts.watch </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> nativeWatch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initWatch</span><span style="color:#E1E4E8;">(vm, opts.watch)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  vm._watchers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">opts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 校验 props 并添加到 vm 上 设置为响应式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.props) </span><span style="color:#6F42C1;">initProps</span><span style="color:#24292E;">(vm, opts.props)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 将 options 里的 methods 分别挂载到 vm 上</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.methods) </span><span style="color:#6F42C1;">initMethods</span><span style="color:#24292E;">(vm, opts.methods)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 校验 data key是否冲突 并添加到 vm 上 设置为响应式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.data) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initData</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(vm._data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* asRootData */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 实例化 computed watcher 并作为依赖添加到相应的数据中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.computed) </span><span style="color:#6F42C1;">initComputed</span><span style="color:#24292E;">(vm, opts.computed)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.watch </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> opts.watch </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> nativeWatch) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initWatch</span><span style="color:#24292E;">(vm, opts.watch)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出<code>initState</code>里对<code>props,methods,data,computed,watch</code>都进行了处理，下面我们分别看一下这5个方法。</p><h2 id="initprops" tabindex="-1">initProps <a class="header-anchor" href="#initprops" aria-label="Permalink to &quot;initProps&quot;">​</a></h2><p>先看下<code>initProps</code>里定义的几个属性：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">propsData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options.propsData </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm._props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options._propKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">propsData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options.propsData </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm._props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keys</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options._propKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span></code></pre></div><p><code>propsData</code>是在<code>core/init.js</code>中的<code>initInternalComponent</code>中进行赋值的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentVnode.componentOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">opts.propsData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnodeComponentOptions.propsData</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnodeComponentOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentVnode.componentOptions</span></span>
<span class="line"><span style="color:#24292E;">opts.propsData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnodeComponentOptions.propsData</span></span></code></pre></div><p><code>propsData</code>表示父组件传到子组件的值，<code>_props</code>是存储处理后的<code>props</code>，<code>_propKeys</code>用于存储<code>key</code>，将其保存为数组形式，这样后续就不用遍历对象的<code>key</code>，而是直接遍历数组，相当于做了一点优化。</p><p>接着校验父组件传入的值是否符合规范，<code>validateProp</code>方法将出入的值<code>propsData</code>和当前我们写的规范<code>propsOptions</code>进行对比校验了</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validateProp</span><span style="color:#E1E4E8;">(key, propsOptions, propsData, vm)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validateProp</span><span style="color:#24292E;">(key, propsOptions, propsData, vm)</span></span></code></pre></div><p>接着校验属性是否是保留属性，如<code>key,ref,slot,slot-scope,is,style,class</code>这些都不能使用，判断的代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isReservedAttribute</span><span style="color:#E1E4E8;">(hyphenatedKey) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">isReservedAttr</span><span style="color:#E1E4E8;">(hyphenatedKey)) { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isReservedAttribute</span><span style="color:#24292E;">(hyphenatedKey) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">isReservedAttr</span><span style="color:#24292E;">(hyphenatedKey)) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>校验完成就会将<code>props</code>定义为响应式了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">defineReactive</span><span style="color:#E1E4E8;">(props, key, value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">defineReactive</span><span style="color:#24292E;">(props, key, value)</span></span></code></pre></div><p>最后还有一段代码，对<code>props</code>做了一层代理：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 代理方法</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sourceKey</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxyGetter</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[sourceKey][key]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxySetter</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[sourceKey][key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(target, key, sharedPropertyDefinition)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对 key 进行代理</span></span>
<span class="line"><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">\`_props\`</span><span style="color:#E1E4E8;">, key)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 代理方法</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sourceKey</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxyGetter</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[sourceKey][key]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxySetter</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[sourceKey][key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(target, key, sharedPropertyDefinition)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对 key 进行代理</span></span>
<span class="line"><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">\`_props\`</span><span style="color:#24292E;">, key)</span></span></code></pre></div><p><code>proxy</code>方法代理完后，每次访问<code>this.key</code>相当于访问<code>this._props.key</code>。这就解释了为什么我们可以直接在<code>Vue</code>中用<code>this</code>来访问<code>props</code>里的属性。</p><h2 id="initmethods" tabindex="-1">initMethods <a class="header-anchor" href="#initmethods" aria-label="Permalink to &quot;initMethods&quot;">​</a></h2><p><code>initMethods</code>方法比较简单，它主要的工作是遍历<code>options</code>中的<code>methods</code>，然后将所有<code>method</code>添加到<code>vm</code>实例上。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initMethods</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options.props</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> methods) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    vm[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> methods[key] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> noop </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(methods[key], vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initMethods</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options.props</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> methods) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    vm[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> methods[key] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> noop </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(methods[key], vm)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在添加到实例之前，它还做了三层判断：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> methods[key] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(props, key)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vm) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isReserved</span><span style="color:#E1E4E8;">(key)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> methods[key] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(props, key)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vm) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isReserved</span><span style="color:#24292E;">(key)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在非生产环境下，如果<code>method</code>不是函数，或者和<code>props</code>属性重名，或者是以<code>_</code>或<code>$</code>开头命名都会进行警告。这里之所以不能以<code>_</code>或<code>$</code>开头命名，是为了防止将这些属性代理到<code>Vue</code>实例上的时候，与<code>Vue</code>内置的属性、<code>api</code>等冲突。后面<code>data</code>的处理亦是如此。</p><h2 id="initdata" tabindex="-1">initData <a class="header-anchor" href="#initdata" aria-label="Permalink to &quot;initData&quot;">​</a></h2><p>首先如果<code>data</code>是函数形式，那么会立即执行一次：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm._data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(data, vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm._data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(data, vm)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>注意这里在执行<code>genData</code>的时候同样是不需要搜集依赖的，所以在执行<code>data</code>函数前会进行<code>pushTarget()</code>当前<code>Watcher</code>置空：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// #7573 disable dep collection when invoking data getters</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pushTarget</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(vm, vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleError</span><span style="color:#E1E4E8;">(e, vm, </span><span style="color:#9ECBFF;">\`data()\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">popTarget</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">, </span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// #7573 disable dep collection when invoking data getters</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pushTarget</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(vm, vm)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleError</span><span style="color:#24292E;">(e, vm, </span><span style="color:#032F62;">\`data()\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">popTarget</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着就是<code>data</code>了属性的校验和代理了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methods </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(methods, key)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasOwn</span><span style="color:#E1E4E8;">(props, key)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isReserved</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">\`_data\`</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* asRootData */</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methods </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(methods, key)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasOwn</span><span style="color:#24292E;">(props, key)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isReserved</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">\`_data\`</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* asRootData */</span><span style="color:#24292E;">)</span></span></code></pre></div><p>首先校验<code>data</code>里的属性是否与<code>methods</code>和<code>props</code>里的属性重名；其次将<code>data</code>里的属性进行代理，使得每次访问<code>this.key</code>相当于访问<code>this._data.key</code>。最后使用<code>observe</code>方法将<code>data</code>变为响应式，这里第二个参数为<code>true</code>，代表他是根数据。之前响应式章节提到过根数据的<code>ob.vmCount</code>大于0，因此<code>$set</code>方法是无法直接对<code>data</code>下的属性进行响应式处理的。</p><h2 id="initcomputed" tabindex="-1">initComputed <a class="header-anchor" href="#initcomputed" aria-label="Permalink to &quot;initComputed&quot;">​</a></h2><p>首先，在<code>vm</code>上定义一个属性<code>_computedWatchers</code>，用于保存所有的计算属性<code>Watcher</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watchers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm._computedWatchers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watchers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm._computedWatchers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span></code></pre></div><p>然后遍历所有的计算属性，分别取出它们的<code>get</code>，如果<code>get</code>不存在，那么在非生产环境下会进行警告：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> computed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userDef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> computed[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> userDef </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> userDef </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> userDef.get</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> getter </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> computed) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userDef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> computed[key]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> userDef </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> userDef </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> userDef.get</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> getter </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着，通过获得的<code>getter</code>实例化<code>Watcher</code>，保存到<code>_computedWatchers</code>上:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">computedWatcherOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { lazy: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">watchers[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> noop,</span></span>
<span class="line"><span style="color:#E1E4E8;">  noop,</span></span>
<span class="line"><span style="color:#E1E4E8;">  computedWatcherOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">computedWatcherOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { lazy: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">watchers[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  vm,</span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> noop,</span></span>
<span class="line"><span style="color:#24292E;">  noop,</span></span>
<span class="line"><span style="color:#24292E;">  computedWatcherOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>值得注意的是，这里的传入的<code>lazy</code>为<code>true</code>。我们看一下<code>Watcher</code>类的执行过程：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dirty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lazy</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lazy</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dirty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lazy</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lazy</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span></code></pre></div><p>也就是说<strong>lazy为true的时候，Watcher实例化过程是不会进行依赖搜集的</strong>。此时<code>computed</code>与所依赖的数据是没有绑定关系的。</p><p>接着往下看，在实例化<code>Watcher</code>后，就开始对对计算属性进行响应式处理：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vm)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">defineComputed</span><span style="color:#E1E4E8;">(vm, key, userDef)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vm.$data) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vm.$options.props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vm.$options.props) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vm)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">defineComputed</span><span style="color:#24292E;">(vm, key, userDef)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vm.$data) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vm.$options.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vm.$options.props) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一是判断<code>computed</code>的名称是否和<code>data</code>，<code>props</code>里的属性名称冲突；二是通过<code>defineComputed</code>来进行响应式处理。</p><p>找到<code>defineComputed</code>方法，由于这里不讨论服务端渲染相关的，我们将代码简化后如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> userDef </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.get </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComputedGetter</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.get </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDef.get</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComputedGetter</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#E1E4E8;">  sharedPropertyDefinition.set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDef.set </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(target, key, sharedPropertyDefinition)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> userDef </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.get </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComputedGetter</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.get </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDef.get</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComputedGetter</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#24292E;">  sharedPropertyDefinition.set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDef.set </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(target, key, sharedPropertyDefinition)</span></span></code></pre></div><p>这里<code>computed</code>主要对函数和对象两种写法进行了兼容处理，同时<code>get</code>都是通过<code>createComputedGetter</code>来创建的，找到该函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComputedGetter</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computedGetter</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._computedWatchers </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._computedWatchers[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (watcher) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (watcher.dirty) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        watcher.</span><span style="color:#B392F0;">evaluate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        watcher.</span><span style="color:#B392F0;">depend</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> watcher.value</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComputedGetter</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computedGetter</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._computedWatchers </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._computedWatchers[key]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (watcher) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (watcher.dirty) {</span></span>
<span class="line"><span style="color:#24292E;">        watcher.</span><span style="color:#6F42C1;">evaluate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#24292E;">        watcher.</span><span style="color:#6F42C1;">depend</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> watcher.value</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的代码并不多，我们一步步来看具体是如何执行的。首先是判断相应的<code>watcher</code>是否存在。如果不存在，则不进行任何处理。如果存在，判断<code>watcher.dirty</code>是否为<code>true</code>。由于实例化时<code>lazy</code>为<code>true</code>，所以<code>dirty=lazy</code>也为<code>true</code>。因此首次获取<code>computed</code>的属性时，会执行<code>watcher.evaluate()</code>。在<code>Watcher</code>类中找到<code>evaluate</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">evaluate</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dirty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">evaluate</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dirty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先会执行<code>get</code>方法，进行依赖搜集，搜集完后，将<code>dirty</code>置为<code>true</code>。因此下次再获取<code>computed</code>属性的时候，判断<code>watcher.dirty</code>为<code>false</code>，那么就会直接返回上次计算的值<code>watcher.value</code>。这样就实现了<code>computed</code>的缓存特性，那么<code>computed</code>是如何在数据改变的时候更新的呢？从响应式章节，我们知道，当数据改变时会触发<code>watcher</code>的<code>update</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lazy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dirty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">update</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lazy) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dirty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>所以当数据变化时，由于<code>this.lazy</code>为<code>true</code>，<code>dirty</code>被置为<code>true</code>。此时再去获取<code>computed</code>属性的时候，判断<code>watcher.dirty</code>为<code>true</code>，那么就会重新进行计算新的值了。至此，我们就能明白<code>computed</code>缓存和更新的实现原理了。</p><p>最后，在<code>computedGetter</code>的后半段还有一段代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  watcher.</span><span style="color:#B392F0;">depend</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#24292E;">  watcher.</span><span style="color:#6F42C1;">depend</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这行代码是什么意思呢？为什么要在这个位置进行依赖搜集呢？这里用一个例子来说明：比如现在是在<code>render</code>的过程，当前<code>Dep.target</code>为<code>renderWatcher</code>。在渲染过程中发现模板里有一个<code>computed</code>属性，这个时候就会触发<code>computed</code>的<code>get</code>属性，也就是会执行<code>watcher.depend()</code>。执行这个的过程会使得<code>renderWatcher</code>将<code>computed</code>依赖的数据搜集为自己的依赖，这样在依赖数据改变的时候，视图就会更新。如果没有这个搜集过程呢？那么当<code>computed</code>依赖的数据改变时，视图并不会一定就更新，因为<code>data</code>和<code>computed</code>都和<code>renderWatcher</code>没有绑定关系。至此，<code>computed</code>的所有代码就讲完了。</p><h2 id="initwatch" tabindex="-1">initWatch <a class="header-anchor" href="#initwatch" aria-label="Permalink to &quot;initWatch&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initWatch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">watch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> watch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> watch[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(handler)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">createWatcher</span><span style="color:#E1E4E8;">(vm, key, handler[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">createWatcher</span><span style="color:#E1E4E8;">(vm, key, handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initWatch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">watch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> watch) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> watch[key]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(handler)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> handler.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">createWatcher</span><span style="color:#24292E;">(vm, key, handler[i])</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createWatcher</span><span style="color:#24292E;">(vm, key, handler)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码比较容易理解，<code>initWatch</code>方法主要是遍历<code>watch</code>，然后分别用<code>createWatcher</code>来创建<code>watcher</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWatcher</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">expOrFn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">handler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPlainObject</span><span style="color:#E1E4E8;">(handler)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm[handler]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(expOrFn, handler, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWatcher</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">expOrFn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">handler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isPlainObject</span><span style="color:#24292E;">(handler)) {</span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler</span></span>
<span class="line"><span style="color:#24292E;">    handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.handler</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm[handler]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(expOrFn, handler, options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>前面一段判断的代码，主要是将对象形式和字符串形式定义的<code>watch</code>转成函数形式，然后调用<code>$watch</code>方法。<code>$watch</code>方法是在定义<code>Vue</code>原型对象5个<code>mixin</code>的时候定义的，看下其核心实现：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">expOrFn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">cb</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    options.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;">(vm, expOrFn, cb, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">expOrFn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">cb</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span></span>
<span class="line"><span style="color:#24292E;">  )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    options.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;">(vm, expOrFn, cb, options)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出，这里其实就是实例化了一个<code>watcher</code>，并且<code>options.user</code>为<code>true</code>。这个实例化过程与普通的搜集依赖的过程并无差别，唯一的区别在于<code>options.user</code>为<code>true</code>时会在<code>run</code>方法执行回调里捕捉错误：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.user) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cb.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cb.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.user) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cb.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#24292E;"> } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cb.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vm, value, oldValue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为什么要这样处理呢？因为<code>watch</code>的回调函数是用户自己写的，如果错误会给用户进行提示。</p><p>最后，<code>$watch</code>返回的是一个函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// * 取消监听，从依赖中移除</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unwatchFn</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  watcher.</span><span style="color:#B392F0;">teardown</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// * 取消监听，从依赖中移除</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unwatchFn</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  watcher.</span><span style="color:#6F42C1;">teardown</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>主要是用于取消监听某个值：<code>teardown</code>的本质也是对<code>Dep</code>和<code>Watcher</code>之间的关系进行解绑：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deps.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.deps[i].</span><span style="color:#B392F0;">removeSub</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.active </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deps.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.deps[i].</span><span style="color:#6F42C1;">removeSub</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.active </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过三章响应式原理相关的学习，我们分别了解了如何构建一个极简的响应式系统，<code>Vue</code>是如何实现和应用响应式系统的。这一章我们从<code>Vue</code>实例化的角度，熟悉了数据初始化的过程，包括生命周期，事件机制以及相关数据的初始化过程，并了解了<code>computed</code>，<code>watch</code>的实现原理。</p><p>最后，附加一个知识点，为什么生命周期中<code>beforeCreate</code>钩子里不能获取到数据，但是<code>created</code>钩子里能获取数据呢？</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">initLifecycle</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">initEvents</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">initRender</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">initInjections</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">initProvide</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;created&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">initLifecycle</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">initEvents</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">initRender</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;beforeCreate&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">initInjections</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">initProvide</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;created&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这里可以明显看出，<code>beforeCreate</code>是在数据初始化（如<code>data,props,inject</code>等）前调用的，而<code>created</code>是在数据初始化后调用的，这也就能解释上面那个问题了。</p>`,134),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const h=s(l,[["render",c]]);export{v as __pageData,h as default};
