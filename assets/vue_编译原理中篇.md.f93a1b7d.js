import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.c610f10c.js";const p="/assets/parse-overview.6f4467b1.jpeg",u=JSON.parse('{"title":"编译过程之parse方法","description":"","frontmatter":{},"headers":[],"relativePath":"vue/编译原理中篇.md","filePath":"vue/编译原理中篇.md","lastUpdated":1695631559000}'),o={name:"vue/编译原理中篇.md"},e=l('<h1 id="编译过程之parse方法" tabindex="-1">编译过程之parse方法 <a class="header-anchor" href="#编译过程之parse方法" aria-label="Permalink to &quot;编译过程之parse方法&quot;">​</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p>在讲编译过程中的<code>parse</code>方法前，先上一张流程图：</p><p><img src="'+p+`" alt="img"></p><p>（图片来自<a href="https://www.jianshu.com/p/51ceaa1d96d2" target="_blank" rel="noreferrer">这里</a>）</p><p>这张流程图完美地解释了<code>parse</code>方法的整个过程。中间部分<code>parse</code>=&gt;<code>parseHTML</code>=&gt;<code>html</code>=&gt;<code>!lastTag ||...</code>一直往下是整个过程的主流程，而左右两侧则是<code>parse</code>过程中根据不同情况出现的不同分支。下面我们沿着主流程将整个<code>parse</code>过程过一遍源码，看看它是如何将<code>template</code>模板转换成抽象语法树的。</p><h2 id="parsehtml" tabindex="-1">parseHTML <a class="header-anchor" href="#parsehtml" aria-label="Permalink to &quot;parseHTML&quot;">​</a></h2><p>整个<code>parse</code>相关的方法都是放在<code>src/compiler/parser</code>目录下的，打开<code>index.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompilerOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parseHTML</span><span style="color:#E1E4E8;">(template, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attrs</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">unary</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">chars</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">start</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">comment</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompilerOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parseHTML</span><span style="color:#24292E;">(template, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">tag</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attrs</span><span style="color:#24292E;">, </span><span style="color:#E36209;">unary</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">end</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">tag</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">chars</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">comment</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>parse</code>的核心实现是调用了<code>parseHTML</code>函数，且传入了<code>start,end,chars,comment</code>四个方法。在<code>./html-parser.js</code>文件中找到<code>parseHTML</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseHTML</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">html</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 存放解析的标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 默认为true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expectHTML</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.expectHTML</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否为自闭标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isUnaryTag</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.isUnaryTag </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> no</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否为能半开标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canBeLeftOpenTag</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.canBeLeftOpenTag </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> no</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * lastTag 为最后一次处理的结束标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> last, lastTag</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (html) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    last </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">lastTag </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isPlainTextElement</span><span style="color:#E1E4E8;">(lastTag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> textEnd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (textEnd </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (comment.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(html)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (conditionalComment.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(html)) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (doctypeMatch) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (endTagMatch) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (startTagMatch) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (textEnd </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (textEnd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (text) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.chars </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> text) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseHTML</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">html</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 存放解析的标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认为true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expectHTML</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.expectHTML</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否为自闭标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isUnaryTag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.isUnaryTag </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> no</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否为能半开标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canBeLeftOpenTag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.canBeLeftOpenTag </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> no</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * lastTag 为最后一次处理的结束标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> last, lastTag</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (html) {</span></span>
<span class="line"><span style="color:#24292E;">    last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">lastTag </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isPlainTextElement</span><span style="color:#24292E;">(lastTag)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> textEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (textEnd </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (comment.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(html)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (conditionalComment.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(html)) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (doctypeMatch) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (endTagMatch) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (startTagMatch) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (textEnd </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (textEnd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (text) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.chars </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> text) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p><code>parseHTML</code>先是定义了解析时需要的一些变量，然后通过<code>while</code>来循环解析<code>html</code>。首先我们先了解下前面定义的变量：</p><ul><li>传入的<code>html</code>参数就是我们平时书写的<code>template</code>模板字符串。</li><li><code>stack</code>是用于存放解析完的标签。</li><li><code>isUnaryTag</code>用于判断标签是否是自闭和标签，如<code>&lt;img/&gt;,&lt;input/&gt;</code>等。</li><li><code>canBeLeftOpenTag</code>用于判断标签是否是可半开标签，如末尾的<code>p</code>标签等。</li><li><code>letlast</code>存储着最后一次解析的标签。</li></ul><p>了解完这个之后，我们再看看具体是怎么解析<code>html</code>的。首先是判断<code>!lastTag||!isPlainTextElement(lastTag)</code>是否为<code>true</code>，如果为<code>false</code>，代表<code>lastTag</code>既存在又是<code>script/style/textarea</code>标签中的一种，需要另做处理。这里我们主要讲解为<code>true</code>的情况，此时会执行如下代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> textEnd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> textEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在<code>html</code>字符串中找到第一个<code>&lt;</code>符号，如果<code>&lt;</code>位于第一个位置，那么它有几种可能：</p><ul><li><p><code>comment.test(html)</code>为<code>true</code>代表可能是注释标签。需要判断是否有<code>--&gt;</code>结尾才能肯定是否是注释标签。</p></li><li><p><code>conditionalComment.test(html)</code>为<code>true</code>代表可能是浏览器兼容判断相关的标签。需要判断是否有<code>]&gt;</code>结尾才能肯定是否是注释标签。</p></li><li><p><code>doctypeMatch</code>为<code>true</code>代表是<code>&lt;!DOCTYPE&gt;</code>标签。</p></li></ul><p>以上三者都是一些比较特殊的标签，基本都会通过<code>advance</code>方法跳过这些标签：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">advance</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  index </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#E1E4E8;">  html </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">advance</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  index </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> n</span></span>
<span class="line"><span style="color:#24292E;">  html </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而<code>advance</code>的作用就是每解析一段<code>html</code>代码就将解析完的截取掉，然后通过<code>while</code>循环解析剩下的<code>html</code>代码。</p><p>紧接着，剩下的就只有两种其他的标签，一种是开始标签如<code>&lt;div</code>，一种是结束标签如<code>&lt;/div&gt;</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (endTagMatch) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (startTagMatch) {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (endTagMatch) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (startTagMatch) {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span></code></pre></div><p>他们分别对应两个方法：<code>parseStartTag</code>和<code>parseEndTag</code></p><h2 id="options-start" tabindex="-1">options.start <a class="header-anchor" href="#options-start" aria-label="Permalink to &quot;options.start&quot;">​</a></h2><p><code>parseStartTag</code>主要做了两件事：<strong>第一件事是解析出开始标签名称</strong>；<strong>第二件事是解析出开始标签的属性</strong>。这里以一个模板为例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">&gt;编译过程&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;isShow&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;编译过程&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这个模板经过<code>parseStartTag</code>的时候，会先通过正则匹配解析出开始标签：<code>[&quot;&lt;div&quot;,&quot;div&quot;]</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(startTagOpen)</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;&lt;div&quot;,&quot;div&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(startTagOpen)</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;&lt;div&quot;,&quot;div&quot;]</span></span></code></pre></div><p>然后通过<code>while</code>循环匹配属性，解析出所有的属性：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(startTagClose)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (attr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(dynamicArgAttribute) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> html.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(attribute))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  attr.start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advance</span><span style="color:#E1E4E8;">(attr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  attr.end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index</span></span>
<span class="line"><span style="color:#E1E4E8;">  match.attrs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(attr)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(startTagClose)) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (attr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(dynamicArgAttribute) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> html.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(attribute))) {</span></span>
<span class="line"><span style="color:#24292E;">  attr.start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advance</span><span style="color:#24292E;">(attr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  attr.end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index</span></span>
<span class="line"><span style="color:#24292E;">  match.attrs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(attr)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后得到的<code>match</code>为：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;tagName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;attrs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot; v-if=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">isShow</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;v-if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot; class=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">header</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;tagName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;attrs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot; v-if=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">isShow</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;v-if&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;isShow&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot; class=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">header</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>解析完成后，会使用<code>handleStartTag</code>进一步处理标签：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleStartTag</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> l; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">      attrs[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        value: </span><span style="color:#B392F0;">decodeAttr</span><span style="color:#E1E4E8;">(value, shouldDecodeNewlines)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.start) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      options.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(tagName, attrs, unary, match.start, match.end)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleStartTag</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">match</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> l; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">      attrs[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name: args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        value: </span><span style="color:#6F42C1;">decodeAttr</span><span style="color:#24292E;">(value, shouldDecodeNewlines)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.start) {</span></span>
<span class="line"><span style="color:#24292E;">      options.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(tagName, attrs, unary, match.start, match.end)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>这里主要是对上一步骤解析处理的属性进一步处理，得到的<code>attrs</code>如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 处理前</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&#39; v-if=&quot;isShow&quot;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v-if&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&#39; class=&quot;header&quot;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;header&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理后</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;v-if&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span><span style="color:#E1E4E8;">, start: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { name: </span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&#39;header&#39;</span><span style="color:#E1E4E8;">, start: </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 处理前</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39; v-if=&quot;isShow&quot;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;v-if&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;isShow&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39; class=&quot;header&quot;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;class&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;header&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理后</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;v-if&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&#39;isShow&#39;</span><span style="color:#24292E;">, start: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { name: </span><span style="color:#032F62;">&#39;class&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&#39;header&#39;</span><span style="color:#24292E;">, start: </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">33</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>可以看出，处理后的属性更加直观，同时也更方便我们去处理。</p><p>接着调用了<code>start</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">options.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(tagName, attrs, unary, match.start, match.end)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">options.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(tagName, attrs, unary, match.start, match.end)</span></span></code></pre></div><p>这个方法是我们在<code>parse</code>函数里传给<code>parseHTML</code>的，所以回到<code>index.js</code>文件中，找到<code>start</code>方法。由于该方法较长，这里仅按照它的主要处理步骤进行讲解。</p><h3 id="_1-创建ast树" tabindex="-1">1.创建AST树 <a class="header-anchor" href="#_1-创建ast树" aria-label="Permalink to &quot;1.创建AST树&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> element</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createASTElement</span><span style="color:#E1E4E8;">(tag, attrs, currentParent)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> element</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createASTElement</span><span style="color:#24292E;">(tag, attrs, currentParent)</span></span></code></pre></div><p>通过我们解析到的标签名称和属性来创建一个语法树节点：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">attrsList</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">attrs</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">attrsMap</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">makeAttrsMap(attrs)</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">rawAttrsMap</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">parent,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">children</span><span style="color:#E1E4E8;">: []</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">type</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">tag,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">attrsList</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">attrs</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">attrsMap</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">makeAttrsMap(attrs)</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">rawAttrsMap</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">parent,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">children</span><span style="color:#24292E;">: []</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-处理特殊标签" tabindex="-1">2.处理特殊标签 <a class="header-anchor" href="#_2-处理特殊标签" aria-label="Permalink to &quot;2.处理特殊标签&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> preTransforms.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preTransforms[i](element, options) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> preTransforms.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preTransforms[i](element, options) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的<code>preTransforms</code>是在<code>/platforms/web/compiler/modules/model</code>文件中定义的，主要是处理<code>input</code>标签为<code>radio/checkbox</code>等特殊情况。</p><h3 id="_3-处理vue相关的属性" tabindex="-1">3.处理<code>Vue</code>相关的属性 <a class="header-anchor" href="#_3-处理vue相关的属性" aria-label="Permalink to &quot;3.处理\`Vue\`相关的属性&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">processPre</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">platformIsPreTag</span><span style="color:#E1E4E8;">(element.tag)</span></span>
<span class="line"><span style="color:#B392F0;">processRawAttrs</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">processFor</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">processIf</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">processOnce</span><span style="color:#E1E4E8;">(element)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">processPre</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">platformIsPreTag</span><span style="color:#24292E;">(element.tag)</span></span>
<span class="line"><span style="color:#6F42C1;">processRawAttrs</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">processFor</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">processIf</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">processOnce</span><span style="color:#24292E;">(element)</span></span></code></pre></div><p>将<code>v-pre/v-if/v-for/v-once</code>等指令都进行了相应的处理，如下表对照所示：</p><table><thead><tr><th>方法</th><th>模板中处理前的属性</th><th>处理后的属性</th></tr></thead><tbody><tr><td>processPre</td><td>v-pre</td><td>el.pre = true</td></tr><tr><td>processFor</td><td>v-for=&quot;(item, index) in arr&quot;</td><td>el.for = &quot;arr&quot;<br>el.alias = &quot;item&quot;<br>el.iterator1 = &quot;index&quot;<br>el.iterator2 = undefined (遍历对象的时候存在)</td></tr><tr><td>processIf</td><td>v-if=&quot;isShow&quot;</td><td>el.if=&quot;isShow&quot;<br>el.ifConditions=[{ exp:&quot;isShow&quot; , block: el}]</td></tr><tr><td>processIf</td><td>v-else</td><td>el.else=true</td></tr><tr><td>processIf</td><td>v-else-if=&quot;isElse&quot;</td><td>el.elseif=&quot;isElse&quot;</td></tr><tr><td>processOnce</td><td>v-once</td><td>el.once=true</td></tr></tbody></table><p>由于处理的过程代码比较多，而且也没有多大的难度，所以这里将最终的处理结果直接进行展示。</p><h3 id="_4-建立父子关系" tabindex="-1">4.建立父子关系 <a class="header-anchor" href="#_4-建立父子关系" aria-label="Permalink to &quot;4.建立父子关系&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">unary) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#E1E4E8;">  stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 如果是单标签，需要闭合标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">closeElement</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">unary) {</span></span>
<span class="line"><span style="color:#24292E;">  currentParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">  stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 如果是单标签，需要闭合标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">closeElement</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果是单标签的话，就直接走结束标签的流程，否则<strong>将当前开始标签置为currentParent，并压入栈中</strong>。这里压入栈中的步骤比较关键，后面分析结束标签的时候会提起。</p><p>这样<code>parseStartTag</code>这个流程就走完了，我们得到了一个已经处理完属性的<code>ast</code>节点，并且这个节点就是<code>currentParent</code>。接下来我们继续分析。</p><h2 id="options-chars" tabindex="-1">options.chars <a class="header-anchor" href="#options-chars" aria-label="Permalink to &quot;options.chars&quot;">​</a></h2><p>还是以刚刚的模板为例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">&gt;编译过程&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;isShow&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;编译过程&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>由于开始标签接下完成了，那么会调用<code>advance</code>方法，截取开始标签，因此<code>html</code>只会剩下以下内容了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">编译过程</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">编译过程</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>此时会继续执行<code>while</code>循环，最后通过判断得出当前走到了文本内容，会执行以下方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// text 代表的就是上方的 “编译过程” 字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">options.</span><span style="color:#B392F0;">chars</span><span style="color:#E1E4E8;">(text, index </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, index)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// text 代表的就是上方的 “编译过程” 字符串</span></span>
<span class="line"><span style="color:#24292E;">options.</span><span style="color:#6F42C1;">chars</span><span style="color:#24292E;">(text, index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, index)</span></span></code></pre></div><p>这个<code>chars</code>同样是在<code>parse</code>方法里传入的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">inVPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseText</span><span style="color:#E1E4E8;">(text, delimiters))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    expression: res.expression,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tokens: res.tokens,</span></span>
<span class="line"><span style="color:#E1E4E8;">    text</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (text </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> children[children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].text </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    text</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">children</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentParent.children</span></span>
<span class="line"><span style="color:#E1E4E8;">children.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(child)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inVPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseText</span><span style="color:#24292E;">(text, delimiters))) {</span></span>
<span class="line"><span style="color:#24292E;">  child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    expression: res.expression,</span></span>
<span class="line"><span style="color:#24292E;">    tokens: res.tokens,</span></span>
<span class="line"><span style="color:#24292E;">    text</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (text </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> children[children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].text </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    text</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">children</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentParent.children</span></span>
<span class="line"><span style="color:#24292E;">children.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(child)</span></span></code></pre></div><p>这里主要是分为两种情况，一种是文本里有动态数据的，比如我们文本里有<code>\\{\\{ msg \\}\\}</code>定义的数据，那么就会通过<code>parseText</code>解析出相应的<code>tokens</code>。否则直接按静态文本处理。最后将文本添加到<code>currentParent.children</code>中。</p><h2 id="options-end" tabindex="-1">options.end <a class="header-anchor" href="#options-end" aria-label="Permalink to &quot;options.end&quot;">​</a></h2><p>解析完文本后，<code>html</code>就只剩下<code>&lt;/div&gt;</code>了，此时<code>while</code>循环会走<code>parseEndTag</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (pos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; pos </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; pos</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stack[pos].lowerCasedTag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> lowerCasedTagName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; pos </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; pos</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stack[pos].lowerCasedTag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> lowerCasedTagName) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法主要的目的就是通过当前结束标签去找起始标签。起始标签我们都存在一个栈里了，举个例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>以上标签在解析时，先解析<code>h1</code>起始标签，压入到栈中为<code>[h1起始标签]</code>。然后解析到<code>div</code>起始标签，压入到栈中为<code>[h1起始标签, div起始标签]</code>。继续解析发现是<code>div</code>结束标签，这个时候就要去栈中找相匹配的标签了。找到<code>div</code>起始标签，那么证明这两者就是一个完整的标签内容，形成一个完整的<code>ast</code>节点。然后将<code>div</code>起始标签弹出栈，栈就只剩下<code>[h1起始标签]</code>了。最后，解析到<code>h1</code>结束标签，重复上述步骤，匹配到<code>h1</code>起始标签，将<code>h1</code>起始标签弹出栈。此时栈已经空了，也完成了所有的解析，最终就形成<code>ast</code>树了。</p><p>所以这里的<code>parseEndTag</code>方法的目的就是为了去找起始标签，找到后就会执行<code>end</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">options.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(stack[i].tag, start, end)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// end 方法</span></span>
<span class="line"><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;"> (tag, start, end) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">element</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stack[stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stack[stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">closeElement</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">options.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(stack[i].tag, start, end)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// end 方法</span></span>
<span class="line"><span style="color:#6F42C1;">end</span><span style="color:#24292E;"> (tag, start, end) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">element</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack[stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  currentParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack[stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">closeElement</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的思路和上面举的例子一样，匹配完成后将起始标签弹出栈，最后执行<code>closeElement</code>来处理整个标签：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">closeElement</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">inVPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">element.processed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processElement</span><span style="color:#E1E4E8;">(element, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">closeElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inVPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element.processed) {</span></span>
<span class="line"><span style="color:#24292E;">    element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processElement</span><span style="color:#24292E;">(element, options)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们主要讨论<code>closeElement</code>里的<code>processElement</code>方法:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">processKey</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#E1E4E8;">element.plain </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">element.key </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">element.scopedSlots </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">element.attrsList.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#6A737D;">// el.ref = ref, el.refInFor = 检查是否在 for 循环中</span></span>
<span class="line"><span style="color:#B392F0;">processRef</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析类似父组件中使用 slot 的情况</span></span>
<span class="line"><span style="color:#6A737D;">// el.slot el.slotTarget el.slotTargetDynamic el.scopedSlots</span></span>
<span class="line"><span style="color:#B392F0;">processSlotContent</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析 slot 标签</span></span>
<span class="line"><span style="color:#B392F0;">processSlotOutlet</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// :is =&gt; el.component / inlineTemplate =&gt; el.inlineTemplate</span></span>
<span class="line"><span style="color:#B392F0;">processComponent</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> transforms.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transforms[i](element, options) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">processKey</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#24292E;">element.plain </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element.key </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element.scopedSlots </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element.attrsList.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#6A737D;">// el.ref = ref, el.refInFor = 检查是否在 for 循环中</span></span>
<span class="line"><span style="color:#6F42C1;">processRef</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析类似父组件中使用 slot 的情况</span></span>
<span class="line"><span style="color:#6A737D;">// el.slot el.slotTarget el.slotTargetDynamic el.scopedSlots</span></span>
<span class="line"><span style="color:#6F42C1;">processSlotContent</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析 slot 标签</span></span>
<span class="line"><span style="color:#6F42C1;">processSlotOutlet</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// :is =&gt; el.component / inlineTemplate =&gt; el.inlineTemplate</span></span>
<span class="line"><span style="color:#6F42C1;">processComponent</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> transforms.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transforms[i](element, options) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里和之前提到的<code>processFor</code>等方法类似，我们也用一个对照表来进行说明：</p><table><thead><tr><th>方法</th><th>模板中处理前的属性</th><th>处理后的属性</th></tr></thead><tbody><tr><td>processKey</td><td>:key=&quot;id&quot;</td><td>el.key=&quot;id&quot;</td></tr><tr><td>processRef</td><td>:ref=&quot;id&quot;</td><td>el.ref=&quot;id&quot;el.refInFor=当前节点是否在for循环内</td></tr><tr><td>processSlotContent</td><td>v-slot:default=&quot;scope&quot;</td><td>el.slotTarget=&quot;default&quot;<br>el.slotTargetDynamic=动态绑定的名称<br>el.slotScope=scope<br>el.children=只有在组件上使用才有children</td></tr><tr><td>processSlotOutlet</td><td>&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</td><td>el.slotName=&quot;header&quot;</td></tr><tr><td>processComponent</td><td>&lt;component :is=&quot;Com&quot;&gt;&lt;/component&gt;</td><td>el.component=&quot;Com&quot;</td></tr><tr><td>processComponent</td><td>&lt;component inline-template&quot;&gt;&lt;/component&gt;</td><td>el.inlineTemplate=true</td></tr><tr><td>processAttrs</td><td>@click:foo.bar=&quot;onClick&quot;</td><td>这里处理比较复杂，主要是将其他的属性和事件进行处理</td></tr></tbody></table><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>到这里，<code>parse</code>方法的大致过程就已经过了一遍了。<strong>其主要思想就是遍历html的字符，然后进行匹配，将所有匹配到的开始标签压入栈中。当匹配到结束标签时，从栈中找到最近的相匹配的标签，将其弹出栈，然后形成一个完整的ast节点。当遍历完成时，所有的节点就会形成一棵语法树（ast）。</strong></p><p>当然，这里介绍的可能不是很详细，其实最好的学习方法还是自己亲自多调试几遍源码，调试多了流程就自然明白了。所以这里算是抛砖引玉，比如还有<code>parseText</code>，<code>parseFilter</code>等方法都没有讲解，如果感兴趣的话也可以都调试一下。</p>`,83),t=[e];function c(r,E,y,i,d,F){return a(),n("div",null,t)}const g=s(o,[["render",c]]);export{u as __pageData,g as default};
