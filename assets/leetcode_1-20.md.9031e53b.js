import{_ as n,c as s,o as a,a as p}from"./app.d5a482e8.js";const b='{"title":"1-20\u9898","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. \u4E24\u6570\u4E4B\u548C","slug":"_1-\u4E24\u6570\u4E4B\u548C"},{"level":2,"title":"2. \u4E24\u6570\u76F8\u52A0","slug":"_2-\u4E24\u6570\u76F8\u52A0"},{"level":2,"title":"3. \u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32","slug":"_3-\u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32"},{"level":2,"title":"4. \u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570","slug":"_4-\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570"},{"level":2,"title":"5. \u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32","slug":"_5-\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32"},{"level":2,"title":"6. Z \u5B57\u5F62\u53D8\u6362","slug":"_6-z-\u5B57\u5F62\u53D8\u6362"},{"level":2,"title":"7. \u6574\u6570\u7FFB\u8F6C","slug":"_7-\u6574\u6570\u7FFB\u8F6C"},{"level":2,"title":"9. \u56DE\u6587\u6570","slug":"_9-\u56DE\u6587\u6570"}],"relativePath":"leetcode/1-20.md","lastUpdated":1657366488000}',t={},o=p(`<h1 id="_1-20\u9898" tabindex="-1">1-20\u9898 <a class="header-anchor" href="#_1-20\u9898" aria-hidden="true">#</a></h1><h2 id="_1-\u4E24\u6570\u4E4B\u548C" tabindex="-1">1. \u4E24\u6570\u4E4B\u548C <a class="header-anchor" href="#_1-\u4E24\u6570\u4E4B\u548C" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/two-sum/submissions/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/two-sum/submissions/</a></p><div class="tip custom-block"><p class="custom-block-title">\u601D\u8DEF</p><p>\u5EFA\u7ACB\u4E00\u4E2A { \u6570\u5B57: index } \u7684\u5BF9\u8C61\uFF0C\u904D\u5386\u6570\u7EC4\uFF0C\u6839\u636E\u5F53\u524D\u6570\u7B97\u51FA\u7701\u5173\u4E8E\u7684\u6570\uFF0C\u901A\u8FC7\u5EFA\u7ACB\u7684\u5BF9\u8C61\u5224\u65AD\u5269\u4F59\u7684\u6570\u5BF9\u5E94\u7684 index \u662F\u5426\u5B58\u5728\u3002</p><p>\u65F6\u95F4\u590D\u6742\u5EA6O(n)\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6O(n)</p></div><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> rest <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_2-\u4E24\u6570\u76F8\u52A0" tabindex="-1">2. \u4E24\u6570\u76F8\u52A0 <a class="header-anchor" href="#_2-\u4E24\u6570\u76F8\u52A0" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/add-two-numbers/submissions/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/add-two-numbers/submissions/</a></p><div class="tip custom-block"><p class="custom-block-title">\u601D\u8DEF</p><ol><li>\u9700\u8981\u904D\u5386\u4E24\u4E2A\u94FE\u8868\uFF0C\u5E76\u5C06\u76F8\u52A0\u7684\u7ED3\u679C\u653E\u5230\u65B0\u7684\u94FE\u8868\u4E2D\u3002</li><li>\u9700\u8981\u4E00\u4E2A\u53D8\u91CF\u6807\u8BB0\u76F8\u52A0\u7ED3\u679C\u662F\u5426\u4F1A\u5411\u524D\u4E00\u4F4D\u8FDB1\u3002</li><li>\u6CE8\u610F\u5728\u6700\u9AD8\u65F6\u5B58\u5728\u8282\u70B9\u6D88\u8017\u5B8C\uFF0C\u4F46\u662F\u8FDB1\u7684\u60C5\u51B5\u3002</li></ol></div><div class="language-typescript"><pre><code><span class="token comment">/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */</span>

<span class="token keyword">function</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>l1<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l2<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> node1 <span class="token operator">=</span> l1
    <span class="token keyword">let</span> node2 <span class="token operator">=</span> l2
    <span class="token keyword">let</span> cur <span class="token operator">=</span> result
    <span class="token comment">// \u662F\u5426\u9700\u8981\u52A01</span>
    <span class="token keyword">let</span> needAddOne <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">||</span> node2 <span class="token operator">||</span> needAddOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>node1 <span class="token operator">&amp;&amp;</span> node1<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>node2 <span class="token operator">&amp;&amp;</span> node2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>needAddOne <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
        needAddOne <span class="token operator">=</span> sum <span class="token operator">&gt;=</span> <span class="token number">10</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        node1 <span class="token operator">=</span> node1 <span class="token operator">&amp;&amp;</span> node1<span class="token punctuation">.</span>next
        node2 <span class="token operator">=</span> node2 <span class="token operator">&amp;&amp;</span> node2<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_3-\u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32" tabindex="-1">3. \u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32 <a class="header-anchor" href="#_3-\u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/submissions/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/submissions/</a></p><div class="tip custom-block"><p class="custom-block-title">\u601D\u8DEF</p><p>\u904D\u5386\u5B57\u7B26\u4E32\uFF0C\u8BB0\u5F55\u4EE5\u5F53\u524D\u5B57\u7B26\u4E32\u7ED3\u5C3E\u7684\u6700\u957F\u4E0D\u91CD\u590D\u5B57\u7B26\u4E32\u3002\u5982\u679C\u9047\u5230\u91CD\u590D\u7684\u60C5\u51B5\uFF0C\u5219\u627E\u5230\u54EA\u4E00\u4E2A\u5B57\u7B26\u91CD\u590D\uFF0C\u622A\u53D6\u4E0B\u6765\u3002</p></div><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> curStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5224\u65AD\u5185\u90E8\u662F\u5426\u5B58\u5728\uFF0C\u5982\u679C\u5B58\u5728\uFF0C\u8BF4\u660E\u91CD\u590D\u4E86\u3002</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> curStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u4E0D\u7B26\u5408\u8981\u6C42\uFF0C\u627E\u5230\u5BF9\u5E94\u7684 index\uFF0C\u5220\u9664\u524D\u9762\u7684string</span>
            curStr <span class="token operator">=</span> curStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7B26\u5408\u8981\u6C42</span>
            curStr <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>curStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> max<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_4-\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570" tabindex="-1">4. \u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570 <a class="header-anchor" href="#_4-\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p><div class="tip custom-block"><p class="custom-block-title">\u601D\u8DEF</p><ol><li>\u627E\u5230\u4E2D\u4F4D\u6570\u5BF9\u5E94\u7684 index</li><li>\u904D\u5386\u4E24\u4E2A\u6B63\u5E8F\u6570\u7EC4\uFF0C\u5E76\u6BD4\u8F83\u76F8\u5E94\u5143\u7D20\uFF0C\u627E\u5230\u7B2C index \u4E2A\u7B26\u5408\u8981\u6C42\u7684\u5143\u7D20\u3002</li><li>\u5982\u679C\u603B\u6570\u76EE\u662F\u5947\u6570\uFF0C\u76F4\u63A5\u8FD4\u56DE\u7ED3\u679C\u3002\u5982\u679C\u662F\u5076\u6570\uFF0C\u9700\u8981\u8BA1\u7B97\u5E73\u5747\u503C\u3002</li></ol></div><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>nums1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length <span class="token operator">+</span> nums2<span class="token punctuation">.</span>length
    <span class="token keyword">const</span> isEven <span class="token operator">=</span> total <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
    <span class="token keyword">const</span> middle <span class="token operator">=</span> isEven <span class="token operator">?</span> total <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token punctuation">(</span>total <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length <span class="token operator">||</span> n <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
            n <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span>
            m <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span>
            m <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
            n <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">===</span> middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> next <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> 
                    <span class="token operator">?</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> 
                    <span class="token operator">:</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>
                        <span class="token operator">?</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span>
                        <span class="token operator">:</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> 
                            <span class="token operator">?</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> 
                            <span class="token operator">:</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>cur <span class="token operator">+</span> next<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cur
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_5-\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32" tabindex="-1">5. \u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32 <a class="header-anchor" href="#_5-\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><div class="tip custom-block"><p class="custom-block-title">\u601D\u8DEF</p><ol><li>\u52A8\u6001\u89C4\u5212\uFF1A\u8BB0\u5F55\u54EA\u4E9B\u5B50\u5B57\u7B26\u4E32\u662F\u56DE\u6587\u5B57\u7B26\u4E32\u3002\u65F6\u95F4O(n2)\uFF0C\u7A7A\u95F4O(n2)\u3002</li><li>\u4E2D\u5FC3\u6269\u5C55\u6CD5\uFF1A\u904D\u5386\u6570\u7EC4\uFF0C\u7136\u540E\u4EE5\u5F53\u524D\u5143\u7D20\u4E3A\u4E2D\u5FC3\uFF0C\u5411\u5916\u6269\u5C55\uFF0C\u5F97\u5230\u6700\u5927\u7684\u957F\u5EA6\uFF0C\u6700\u7EC8\u8BA1\u7B97\u51FA\u7684\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u8D77\u59CB\u7D22\u5F15\u3002\u65F6\u95F4O(n2)\uFF0C\u7A7A\u95F4O(1)\u3002</li></ol></div><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// \u8BB0\u5F55\u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32\u7684\u8D77\u59CB index</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">// \u8BB0\u5F55\u662F\u5426\u662F\u56DE\u6587\u5B57\u7B26\u4E32</span>
    <span class="token keyword">const</span> dp<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">===</span> j <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u53EA\u6709\u4E24\u4E2A\u6570\u65F6\uFF0C\u76F8\u7B49\u5373\u53EF</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5426\u5219\u4F9D\u8D56\u4E8E dp[i+1][j-1]</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6700\u957F\u56DE\u6587\u5B57\u7B26\u4E32</span>
                result <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>
                max <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_6-z-\u5B57\u5F62\u53D8\u6362" tabindex="-1">6. Z \u5B57\u5F62\u53D8\u6362 <a class="header-anchor" href="#_6-z-\u5B57\u5F62\u53D8\u6362" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/zigzag-conversion/</a></p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> numRows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s
    <span class="token punctuation">}</span>
    <span class="token comment">// \u539F\u672C\u53EF\u4EE5\u6839\u636E i,j \u8BB0\u505A\u4E8C\u7EF4\u6570\u7EC4\u7684\uFF0C\u4F46\u662F\u6CA1\u6709\u5FC5\u8981\uFF0C\u53EF\u4EE5\u76F4\u63A5\u62FC\u63A5\u6210\u5B57\u7B26\u4E32</span>
    <span class="token keyword">const</span> data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token comment">// \u5224\u65AD\u6B63\u786E\u7684\u4F4D\u7F6E</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> numRows <span class="token operator">&amp;&amp;</span> j <span class="token operator">%</span> <span class="token punctuation">(</span>numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            i <span class="token operator">-=</span> <span class="token number">1</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
        index<span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       str <span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_7-\u6574\u6570\u7FFB\u8F6C" tabindex="-1">7. \u6574\u6570\u7FFB\u8F6C <a class="header-anchor" href="#_7-\u6574\u6570\u7FFB\u8F6C" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/reverse-integer/</a></p><div class="language-typescript"><pre><code><span class="token comment">// \u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\u8FDB\u884C\u7FFB\u8F6C</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> isMinus <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span>
    <span class="token keyword">const</span> str <span class="token operator">=</span> isMinus <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> s
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> result <span class="token operator">&gt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> isMinus <span class="token operator">?</span> <span class="token operator">-</span>result <span class="token operator">:</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> rest <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// \u8FB9\u754C\u6761\u4EF6 x \u9664\u5B8C\u4E86</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06\u6700\u540E\u4E00\u4F4D\u653E\u5230\u6700\u524D\u9762</span>
        <span class="token keyword">const</span> digit <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span>
        rest <span class="token operator">=</span> rest <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit
        <span class="token comment">// \u79FB\u9664\u5C0F\u6570 </span>
        x <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> rest <span class="token operator">&gt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rest
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_9-\u56DE\u6587\u6570" tabindex="-1">9. \u56DE\u6587\u6570 <a class="header-anchor" href="#_9-\u56DE\u6587\u6570" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/palindrome-number/submissions/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/palindrome-number/submissions/</a></p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5C0F\u4E8E0\u6216\u8005\u5C3E\u90E8\u4E3A0\uFF0C\u90FD\u4E0D\u4F1A\u662F\u56DE\u6587\u6570</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7FFB\u8F6C\u4E00\u534A\u7684\u6570\u8BB0\u5F55\u4E0B\u6765</span>
    <span class="token keyword">let</span> reverseNum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>reverseNum <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reverseNum <span class="token operator">=</span> reverseNum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span>
        x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5076\u6570\u4F4D\u6570\u65F6\u76F8\u7B49\uFF0C\u5947\u6570\u4F4D\u6570\u65F6\u53BB\u9664\u4E00\u4F4D\u518D\u5224\u65AD</span>
    <span class="token keyword">return</span> x <span class="token operator">===</span> reverseNum  <span class="token operator">||</span> x <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>reverseNum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,31),e=[o];function c(l,u,k,r,i,d){return a(),s("div",null,e)}var w=n(t,[["render",c]]);export{b as __pageData,w as default};
