import{_ as e,c as o,o as a,a as t}from"./app.da177e40.js";const k=JSON.parse('{"title":"Tapable","description":"","frontmatter":{},"headers":[{"level":2,"title":"Hook类型介绍","slug":"hook类型介绍","link":"#hook类型介绍","children":[]}],"relativePath":"webpack/Tapable.md","lastUpdated":1677323371000}'),r={name:"webpack/Tapable.md"},n=t('<h1 id="tapable" tabindex="-1">Tapable <a class="header-anchor" href="#tapable" aria-hidden="true">#</a></h1><p><a href="https://github.com/webpack/tapable" target="_blank" rel="noreferrer">github仓库地址</a></p><h2 id="hook类型介绍" tabindex="-1">Hook类型介绍 <a class="header-anchor" href="#hook类型介绍" aria-hidden="true">#</a></h2><ul><li><p><code>Basic hook</code>(没有<code>Waterfall/Bail/Loop</code>) - 按顺序执行回调。</p></li><li><p><strong>Waterfall</strong> - 按顺序执行回调。不过前一个回调函数的返回值会传给下一个回调函数。</p></li><li><p><strong>Bail</strong> - 按顺序执行回调。如果回调函数执行后有返回值，那么将不会执行下一个回调函数。</p></li><li><p><strong>Loop</strong> - 按顺序执行回调。如何某个回调函数返回一个非<code>undefined</code>的值，那么将会从第一个回调函数重新执行，直到所有的回调函数都返回<code>undefined</code>。</p></li><li><p><strong>Sync</strong> - 只能使用<code>hook.tap()</code>监听。</p></li><li><p><strong>AsyncSeries</strong> - 能被<code>hook.tap()/tapAsync()/tapPromise()</code>监听。<strong>按顺序执行异步回调</strong>。</p></li><li><p><strong>AsyncParallel</strong> - 能被<code>hook.tap()/tapAsync()/tapPromise()</code>监听。<strong>并列执行异步回调</strong>。</p></li></ul>',4),l=[n];function s(p,c,i,d,h,_){return a(),o("div",null,l)}const b=e(r,[["render",s]]);export{k as __pageData,b as default};
