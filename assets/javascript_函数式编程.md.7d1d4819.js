import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.c610f10c.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/函数式编程.md","filePath":"javascript/函数式编程.md","lastUpdated":1695632838000}'),p={name:"javascript/函数式编程.md"},o=l(`<p>#《javascript 函数式编程》</p><h2 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h2><p>函数既可以作为参数传入也可以作为值返回。</p><h2 id="纯度" tabindex="-1">纯度 <a class="header-anchor" href="#纯度" aria-label="Permalink to &quot;纯度&quot;">​</a></h2><ul><li>其结果只能从它参数的值来计算。<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()</span></span></code></pre></div></li><li>不能依赖能被外部操作改变的数据。<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> global </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> global </span></span>
<span class="line"><span style="color:#E1E4E8;">global </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> global </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> global </span></span>
<span class="line"><span style="color:#24292E;">global </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">())</span></span></code></pre></div></li><li>不能改变外部的状态。<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> global </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> global</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> global </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> global</span><span style="color:#D73A49;">++</span></span></code></pre></div></li></ul><p>纯函数对于测试更加友好，功能职责清晰。</p><h2 id="幂等" tabindex="-1">幂等 <a class="header-anchor" href="#幂等" aria-label="Permalink to &quot;幂等&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 执行无数次后结果还是一样。</span></span>
<span class="line"><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">())) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 比如</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 执行无数次后结果还是一样。</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">())) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 比如</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="不变性" tabindex="-1">不变性 <a class="header-anchor" href="#不变性" aria-label="Permalink to &quot;不变性&quot;">​</a></h2><ul><li>不可变对象应该在构造时固定它们的值而之后不能再修改。</li><li>不可变对象操作并返回新的对象。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#6A737D;">// 改变了原有的 person</span></span>
<span class="line"><span style="color:#E1E4E8;">person.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 隐藏可变性</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">obj2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">obj1, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">obj2}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 不会修改原有的 person</span></span>
<span class="line"><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(person, { age: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6A737D;">// 改变了原有的 person</span></span>
<span class="line"><span style="color:#24292E;">person.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 隐藏可变性</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">obj2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj1, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj2}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 不会修改原有的 person</span></span>
<span class="line"><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(person, { age: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;"> })</span></span></code></pre></div><h2 id="链式编程" tabindex="-1">链式编程 <a class="header-anchor" href="#链式编程" aria-label="Permalink to &quot;链式编程&quot;">​</a></h2><h3 id="惰性链" tabindex="-1">惰性链 <a class="header-anchor" href="#惰性链" aria-label="Permalink to &quot;惰性链&quot;">​</a></h3><blockquote><p>封装了一些行为的函数通常被称为 <code>chunk</code>。</p></blockquote>`,14),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const g=s(p,[["render",c]]);export{F as __pageData,g as default};
