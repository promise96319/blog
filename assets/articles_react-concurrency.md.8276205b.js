import{_ as s,c as n,o as a,a as l}from"./app.788a9091.js";const o="/assets/image-20221017222235509.a0826dbf.png",p="/assets/v2-2b266fe54332cc73d37dded88f9eb5dd_1440w.b2c97b1a.jpg",e="/assets/image-20221017222318345.ad849b62.png",c="/assets/1649159127182-08cf6bfd-3d56-4672-9202-230718949f44.d5ce0e02.png",t="/assets/v2-9693cb733d690acf00fa14f7450a7825_1440w.b73f9083.jpg",r="/assets/image-20221017222353750.9f5f346a.png",y="/assets/image-20221017222619886.ea8d67c4.png",F="/assets/image-20221017222521303.4fc0747a.png",D="/assets/image-20221017222656471.c7f3ea96.png",i="/assets/v2-5030355c9fe44af1ec7f59c615a298f9_1440w.da90d809.jpg",C="/assets/image-20221017222735388.17583a0f.png",A="/assets/v2-34548b96aaa56d9e22e3104d7c09fcf0_1440w.99fa12d0.jpg",d="/assets/image-20221017222801276.b27d181e.png",v=JSON.parse('{"title":"React18 并发原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"0. 前言","slug":"_0-前言","link":"#_0-前言","children":[]},{"level":2,"title":"1. 什么是并发","slug":"_1-什么是并发","link":"#_1-什么是并发","children":[]},{"level":2,"title":"2. React 为什么需要并发","slug":"_2-react-为什么需要并发","link":"#_2-react-为什么需要并发","children":[]},{"level":2,"title":"3. 浏览器的一帧里做了什么？","slug":"_3-浏览器的一帧里做了什么","link":"#_3-浏览器的一帧里做了什么","children":[]},{"level":2,"title":"4. 时间切片","slug":"_4-时间切片","link":"#_4-时间切片","children":[]},{"level":2,"title":"5. Fiber 架构","slug":"_5-fiber-架构","link":"#_5-fiber-架构","children":[]},{"level":2,"title":"6. 小结","slug":"_6-小结","link":"#_6-小结","children":[]},{"level":2,"title":"7. Scheduler调度","slug":"_7-scheduler调度","link":"#_7-scheduler调度","children":[]},{"level":2,"title":"8. 更新优先级","slug":"_8-更新优先级","link":"#_8-更新优先级","children":[]},{"level":2,"title":"9. React18 并发渲染","slug":"_9-react18-并发渲染","link":"#_9-react18-并发渲染","children":[]},{"level":2,"title":"10. 新特性","slug":"_10-新特性","link":"#_10-新特性","children":[{"level":3,"title":"Suspense","slug":"suspense","link":"#suspense","children":[]},{"level":3,"title":"useTransition/useDeferredValue","slug":"usetransition-usedeferredvalue","link":"#usetransition-usedeferredvalue","children":[]},{"level":3,"title":"useSyncExternalStore","slug":"usesyncexternalstore","link":"#usesyncexternalstore","children":[]}]},{"level":2,"title":"11. 源码调试","slug":"_11-源码调试","link":"#_11-源码调试","children":[]}],"relativePath":"articles/react-concurrency.md","lastUpdated":1677396047000}'),u={name:"articles/react-concurrency.md"},g=l(`<h1 id="react18-并发原理" tabindex="-1">React18 并发原理 <a class="header-anchor" href="#react18-并发原理" aria-hidden="true">#</a></h1><h2 id="_0-前言" tabindex="-1">0. 前言 <a class="header-anchor" href="#_0-前言" aria-hidden="true">#</a></h2><p>前阵子，打磨已久的<code>React18</code>终于正式发布，其中最重要的一个更新就是<strong>并发</strong>（<code>concurrency</code>）。其他的新特性如<code>Suspense</code>、<code>useTransition</code>、<code>useDeferredValue</code> 的内部原理都是基于并发的，可想而知在这次更新中并发的重要性。</p><p>但是，并发究竟是什么？<code>React</code>团队引入并发又是为了解决哪些问题呢？它到底是如何去解决的呢？前面提到的<code>React18</code>新特性与并发之间又有什么关系呢？</p><p>相信大家在看官方文档或者看其他人描述<code>React</code>新特性时，或多或少可能会对以上几个问题产生疑问。因此，本文将通过分享<code>并发更新</code>的整体实现思路，来帮助大家更好地理解<code>React18</code>这次更新的内容。</p><h2 id="_1-什么是并发" tabindex="-1">1. 什么是并发 <a class="header-anchor" href="#_1-什么是并发" aria-hidden="true">#</a></h2><p>首先我们来看一下<code>并发</code>的概念：</p><p>并发，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但<strong>任一个时刻点上只有一个程序在处理机上运行</strong>。</p><p>举个通俗的例子来讲就是：</p><ul><li>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。</li><li>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。</li><li>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。</li></ul><p>并发的关键是具备处理多个任务的能力，但不是在同一时刻处理，而是交替处理多个任务。比如吃饭到一半，开始打电话，打电话到一半发现信号不好挂断了，继续吃饭，又来电话了...但是每次只会处理一个任务。</p><p>在了解了并发的概念后，我们现在思考下，在<code>React</code>中并发指的是什么，它有什么作用呢？</p><h2 id="_2-react-为什么需要并发" tabindex="-1">2. React 为什么需要并发 <a class="header-anchor" href="#_2-react-为什么需要并发" aria-hidden="true">#</a></h2><p>我们都知道，<code>js</code>是单线程语言，同一时间只能执行一件事情。这样就会导致一个问题，如果有一个耗时任务占据了线程，那么后续的执行内容都会被阻塞。比如下面这个例子：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handle()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">点击按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 用户点击事件回调</span></span>
<span class="line"><span style="color:#A6ACCD;">  function handle() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click 事件触发 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  // 耗时任务，一直占用线程，阻塞了后续的用户行为</span></span>
<span class="line"><span style="color:#A6ACCD;">  function render() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;"> (let i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">; i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">; i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(i)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  window.onload = function () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当我们点击按钮时，由于<code>render</code>函数一直在执行，所以<code>handle</code>回调迟迟没有执行。对于用户来讲，界面是卡死且无法交互的。</p><p><img src="`+o+'" alt="image-20221017222235509"></p><p>如果我们把这个例子中的<code>render</code>函数类比成<code>React</code>的<code>更新过程</code>：即<code>setState</code>触发了一次更新，而这次更新耗时非常久，比如<code>200ms</code>。那么在这<code>200ms</code>的时间内界面是卡死的，用户无法进行交互，非常影响用户的使用体验。如下图所示，<code>200ms</code>内浏览器的渲染被阻塞，且用户的<code>click</code>事件回调也被阻塞。</p><p>那我们该如何解决这个问题呢？<code>React18</code>给出的答案就是：<code>并发</code>。</p><p>我们可以将<code>react更新</code>看作一个任务，<code>click</code>事件看作一个任务。在并发的情况下，<code>react更新</code>到一半的时候，进来了<code>click</code>任务，这个时候先去执行<code>click</code>任务。等<code>click</code>任务执行完成后，接着继续执行剩余的<code>react更新</code>。这样就保证了即使在耗时更新的情况下，用户依旧是可以进行交互的（<code>interactive</code>）。</p><p>虽然这个想法看上去非常不错，但是实现起来就有点困难了。比如更新到一半时怎么中断？更新中断了又怎么恢复呢？如果<code>click</code>又触发了<code>react</code>更新不就同时存在了两个更新了吗，它们的状态怎么区分？等等各种问题。</p><p>虽然很困难，但<code>React18</code>确实做到了这一点：</p><blockquote><p>Concurrency is not a feature, per se. It’s a new behind-the-scenes mechanism that enables React to prepare multiple versions of your UI at the same time.</p></blockquote><p>正如官网中描述的：<code>并发</code>是一种新的幕后机制，它允许在同一时间里，准备多个版本的<code>UI</code>，即多个版本的更新，也就是前面我们提到的并发。下面我们将逐步了解<code>React</code>是怎么实现<code>并发</code>的。</p><h2 id="_3-浏览器的一帧里做了什么" tabindex="-1">3. 浏览器的一帧里做了什么？ <a class="header-anchor" href="#_3-浏览器的一帧里做了什么" aria-hidden="true">#</a></h2><p>首先，我们需要了解一个前置知识点——<code>window.requestIdleCallback</code>。它的功能如下：</p><blockquote><p>**window.requestIdleCallback()**方法插入一个函数，这个函数将在浏览器空闲时期被调用。</p></blockquote><p>网上有许多文章在聊到<code>React</code>的<code>调度（schedule）和时间切片（time slicing）</code>的时候都提到了这个<code>api</code>。那么这个<code>api</code>究竟有什么作用呢？浏览器的空闲时间又是指的什么呢？</p><p>带着这个疑问，我们看看浏览器里的一帧发生了什么。我们知道，通常情况下，浏览器的一帧为<code>16.7ms</code>。由于<code>js</code>是单线程，那么它内部的一些事件，比如 <code>click</code>事件，宏任务，微任务，<code>requestAnimatinFrame</code>，<code>requestIdleCallback</code>等等都会在浏览器帧里按一定的顺序去执行。具体的执行顺序如下：</p><p><img src="'+p+'" alt="img"></p><p>(图片来自<a href="https://medium.com/@paul_irish/requestanimationframe-scheduling-for-nerds-9c57f7438ef4" target="_blank" rel="noreferrer">这里</a>)</p><p>我们可以发现，浏览器一帧里回调的执行顺序为：</p><ol><li>用户事件：最先执行，比如<code>click</code>等事件。</li><li><code>js</code>代码：宏任务和微任务，这段时间里可以执行多个宏任务，但是必须把微任务队列执行完成。宏任务会被浏览器自动调控。比如浏览器如果觉得宏任务执行时间太久，它会将下一个宏任务分配到下一帧中，避免掉帧。</li><li>在渲染前执行 <code>scroll/resize</code> 等事件回调。</li><li>在渲染前执行<code>requestAnimationFrame</code>回调。</li><li>渲染界面：面试中经常提到的浏览器渲染时<code>html、css</code>的计算布局绘制等都是在这里完成。</li><li><code>requestIdleCallback</code>执行回调：如果前面的那些任务执行完成了，一帧还剩余时间，那么会调用该函数。</li></ol><p>从上面可以知道，<code>requestIdleCallback</code>表示的是浏览器里每一帧里在确保其他任务完成时，还剩余时间，那么就会执行<code>requestIdleCallback</code>回调。比如其余任务执行了<code>10ms</code>，那么这一帧里就还剩<code>6.7ms</code>的时间，那么就会触发<code>requestIdleCallback</code>的回调。</p><p>了解了这个方法后，我们可以做一个假设：如果我们把<code>React</code>的更新（如<code>200ms</code>）拆分成一个个小的更新（如<code>40 个 5ms 的更新</code>），然后每个小更新放到<code>requestIdleCallback</code>中执行。那么就意味着这些小更新会在浏览器每一帧的空闲时间去执行。如果一帧里有多余时间就执行，没有多余时间就推到下一帧继续执行。这样的话，更新一直在继续，并且同时还能确保每一帧里的事件如<code>click，宏任务，微任务，渲染</code>等能够正常执行，也就可以达到用户可交互的目的。</p><p><img src="'+e+'" alt="image-20221017222318345"></p><p>但是，<code>requestIdleCallback</code>的兼容性太差了：</p><p><img src="'+c+'" alt=""></p><p>因此，<code>React</code>团队决定自己实现一个类似的功能：时间切片（<code>time slicing</code>）。接下来我们看看时间切片是如何实现的。</p><h2 id="_4-时间切片" tabindex="-1">4. 时间切片 <a class="header-anchor" href="#_4-时间切片" aria-hidden="true">#</a></h2><p>假如<code>React</code>一个更新需要耗时<code>200ms</code>，我们可以将其拆分为<code>40</code>个<code>5ms</code>的更新（后续会讲到如何拆分），然后每一帧里只花<code>5ms</code>来执行更新。那么，每一帧里不就剩余<code>16.7 - 5 = 11.7ms</code>的时间可以进行<code>用户事件</code>，<code>渲染</code>等其他的<code>js</code>操作吗？如下所示：</p><p><img src="'+t+'" alt="img"></p><p>那么这里就有两个问题：</p><ul><li>问题1：如何控制每一帧只执行<code>5ms</code>的更新？</li><li>问题2：如何控制<code>40</code>个更新分配到每一帧里？</li></ul><p>对于问题1比较容易，我们可以在更新开始时记录<code>startTime</code>，然后每执行一小段时间判断是否超过<code>5ms</code>。如果超过了<code>5ms</code>就不再执行，等下一帧再继续执行。</p><p>对于问题2，我们可以通过宏任务实现。比如<code>5ms</code>的更新结束了，那么我们可以为下一个<code>5ms</code>更新开启一个宏任务。浏览器则会将这个宏任务分配到当前帧或者是下一帧执行。</p><p>注意：</p><p>浏览器这一行为是内置的，比如设置 10000 个 setTimeout(fn, 0)，并不会阻塞线程，而是浏览器会将这 10000 个回调合理分配到每一帧当中去执行。</p><p>比如：10000个个 setTimeout(fn, 0)在执行时，第一帧里可能执行了300个 setTimeout 回调，第二帧里可能执行了400个 setTimeout 回调，第 n 帧里可能执行了 200 个回调。浏览器为了尽量保证不掉帧，会合理将这些宏任务分配到帧当中去。</p><p>解决了上面两个问题，那么这个时候我们就有下面这种思路了：</p><ol><li>更新开始，记录开始时间 <code>startTime</code>。</li><li><code>js</code> 代码执行时，记录距离开始时间<code>startTime</code>是否超过了 <code>5ms</code>。</li><li>如果超过了 <code>5ms</code>，那么这个时候就不应该再以同步的形式来执行代码了，否则依然会阻塞后续的代码执行。</li><li>所以这个时候我们需要把后续的更新改为一个宏任务，这样浏览器就会分配给他执行的时机。如果有用户事件进来，那么会执行用户事件，等用户事件执行完成后，再继续执行宏任务中的更新。</li></ol><p><img src="'+r+'" alt="image-20221017222353750"></p><p>如上图所示，由于更新拆分成了一个个小的宏任务，从而使得<code>click</code>事件的回调有机会执行。</p><p>现在我们已经解决了更新阻塞的问题，接下来就需要解决如何将一个完整的更新拆分为多个更新，并且让它可以暂停等到<code>click</code>事件完成后再回来更新。</p><h2 id="_5-fiber-架构" tabindex="-1">5. Fiber 架构 <a class="header-anchor" href="#_5-fiber-架构" aria-hidden="true">#</a></h2><p><code>React</code>传统的<code>Reconciler</code>是通过类似于<code>虚拟DOM</code>的方式来进行对比和标记更新。而<code>虚拟DOM</code>的结构不能很好满足将更新拆分的需求。因为它一旦暂停对比过程，下次更新时，很难找到上一个节点和下一个节点的信息，虽然有办法能找到，但是相对而言比较麻烦。所以，<code>React</code>团队引入了<code>Fiber</code>来解决这一问题。</p><p>每一个<code>DOM</code>节点对应一个<code>Fiber</code>对象，<code>DOM</code>树对应的<code>Fiber</code>结构如下：</p><p><img src="'+y+'" alt="image-20221017222619886"></p><p><code>Fiber</code>通过<code>链表</code>的形式来记录节点之间的关系，它与传统的虚拟<code>DOM</code>最大的区别是多加了几个属性：</p><ul><li><code>return</code>表示父节点<code>fiber</code>。</li><li><code>child</code>表示子节点的第一个<code>fiber</code>。</li><li><code>sibling</code>表示下一个兄弟节点的<code>fiber</code>。</li></ul><p>通过这种链表的形式，可以很轻松的找到每一个节点的下一个节点或上一个节点。那么这个特性有什么作用呢？</p><p>结合上面提到的时间切片的思路，我们需要判断更新是否超过了<code>5ms</code>，我们以上面这棵<code>Fiber</code>树梳理一下更新的思路。从<code>App Fiber</code>开始：</p><ul><li><p>浏览器第一帧：</p></li><li><ul><li>记录更新开始时间<code>startTime</code>。</li></ul></li><li><ul><li>首先计算<code>App</code>节点，计算完成时，发现更新未超过<code>5ms</code>，继续更新下一个节点。</li><li>计算<code>div</code>节点，计算完成时，发现更新超过了<code>5ms</code>，那么不会进行更新，而是开启一个宏任务。</li></ul></li><li><p>浏览器第二帧：</p></li><li><ul><li><strong>上一帧最后更新的是div节点</strong>，找到下一个节点<code>hello</code>，计算该节点，发现更新未超过<code>5ms</code>，继续更新下一个节点。</li><li>计算<code>span</code>节点，发现更新超过了<code>5ms</code>，那么不会进行更新，而是开启一个宏任务。</li></ul></li><li><p>浏览器第三帧：</p></li><li><ul><li><strong>上一帧最后更新的是span节点</strong>，找到下一个节点<code>world</code>，计算该节点，更新完成。</li></ul></li></ul><p><img src="'+F+'" alt="image-20221017222521303"></p><p>注：</p><ol><li>实际的更新过程是 beginWork / completeWork 递与归的阶段，与这里有出入，这里仅做演示介绍。</li><li>这里的更新过程有可能不是第二帧和第三帧，而是在一帧里执行完成，具体需要看浏览器如何去分配宏任务。</li><li>更新过程分为 reconciler 和 commit 阶段，这里只会将 reconciler 阶段拆分。而 commit 阶段是映射为真实 DOM，无法拆分。</li></ol><p>对应浏览器中的执行过程如下：</p><p><img src="'+D+`" alt="image-20221017222656471"></p><p>在这个过程中，每个节点计算完成后都会去校验更新时间是否超过了<code>5ms</code>，然后找到下一个节点继续计算，而双向链表恰恰是切合这种需求。</p><h2 id="_6-小结" tabindex="-1">6. 小结 <a class="header-anchor" href="#_6-小结" aria-hidden="true">#</a></h2><p>通过上面的分析，我们可以总结成以下思路：</p><ol><li>更新时遍历更新每一个节点，每更新一个<code>Fiber节点</code>后，会判断累计更新时间是否超过<code>5ms</code>。</li><li>如果超过<code>5ms</code>，将下一个更新创建为一个宏任务，浏览器自动为其分配执行时机，从而不阻塞用户事件等操作。</li><li>如果更新的过程中，用户进行触发了点击事件，那么会在<code>5ms</code>与下一个<code>5ms</code>的间隙中去执行<code>click</code>事件回调。</li></ol><p>通过以上步骤，我们能够将现有的<strong>同步更新转变为多个小更新分配到浏览器帧里，并且不会阻塞用户事件</strong>。接下来看看在<code>React</code>中实际是如何做到的。</p><h2 id="_7-scheduler调度" tabindex="-1">7. Scheduler调度 <a class="header-anchor" href="#_7-scheduler调度" aria-hidden="true">#</a></h2><p>在<code>React</code>中，有一个单独的<code>Scheduler</code>库专门用于处理上面讨论的时间切片。</p><p>我们简单看一下<code>Scheduler</code>关键源码实现：</p><ol><li>首先，在 <code>packagegs/react-reconciler/src/ReactFiberWorkLoop.new.js</code> 文件中：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 循环更新 fiber 节点</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">workLoopConcurrent</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">workInProgress</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">shouldYield</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新单个 fiber 节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">performUnitOfWork</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">workInProgress</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在更新时，如果是<code>Concurrent</code>模式，低优先级更新会进入到<code>workLoopConcurrent</code>函数。该函数的作用就是遍历<code>Fiber</code>节点，创建<code>Fiber</code>树并标记哪些<code>Fiber</code>被更新了。<code>performUnitOfWork</code>表示的是对每个<code>Fiber</code>节点的处理操作，每次处理前都会执行<code>shouldYield()</code>方法，下面看一下<code>shouldYield</code>。</p><ol start="2"><li>其次，在 <code>packages/scheduler/src/forks/Scheduler.js</code>文件中：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> frameYieldMs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> frameInterval </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> frameYieldMs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shouldYieldToHost</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeElapsed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">startTime</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断时间间隔是否小于 5ms</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">timeElapsed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">frameInterval</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>shouldYield()</code>方法会去判断累计更新的时间是否超过<code>5ms</code>。</p><ol start="3"><li>最后，在 <code>packages/scheduler/src/forks/Scheduler.js</code>文件中：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> schedulePerformWorkUntilDeadline</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> localSetImmediate </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">localSetImmediate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">performWorkUntilDeadline</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> MessageChannel </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">channel</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MessageChannel</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">channel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">port2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">channel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">port1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onmessage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">performWorkUntilDeadline</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">schedulePerformWorkUntilDeadline</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">localSetTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">performWorkUntilDeadline</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果超过了<code>5ms</code>，就会通过<code>schedulePerformWorkUntilDeadline</code>开启一个宏任务进行下一个更新。这里<code>react</code>做了兼容的处理，实际上是优先使用<code>MessageChannel</code>而不是<code>setTimeout</code>，这是因为在浏览器帧中<code>MessageChannel</code>更优先于<code>setTimeout</code>执行。</p><p>总的来说，<code>Scheduler</code>库的处理和前面讨论的时间切片类似。事实上，浏览器也正在做同样的<code>Scheduler</code>库做的事情：通过内置一个<code>api</code>——<a href="https://chromestatus.com/feature/6031161734201344" target="_blank" rel="noreferrer">scheduler.postTask</a> 来解决用户交互在某些情况下无法即时相应的问题，有兴趣的话可以看看相关内容。</p><p>最终，通过这种时间切片的方式，在浏览器下的<code>performance</code>面板中，会呈现出如下渲染过程：原本一个耗时的更新（如渲染<code>10000</code>个<code>li</code>标签），被分割为一个个<code>5ms</code>的小更新：</p><p><img src="`+i+`" alt="img"></p><p>到这里，我们已经清楚了如何让一个耗时的更新不去阻塞<code>用户事件和渲染</code>了。但是这只是有一个更新任务的情况，如果在<code>React</code>更新一半时，<code>click</code>事件进来，然后执行<code>click</code>事件回调，并且触发了新的更新，那么该如何处理共存的两个更新呢？如果<code>click</code>事件的更新过程中，又有其他的<code>click</code>事件触发更新呢？这就涉及到多个更新并存的情况，这也是我们接下来需要讨论的点。</p><h2 id="_8-更新优先级" tabindex="-1">8. 更新优先级 <a class="header-anchor" href="#_8-更新优先级" aria-hidden="true">#</a></h2><p>在<code>React</code>中，更新分为两种，紧急更新和过渡更新：</p><ul><li>紧急更新(<code>Urgent updates</code>)：用户交互等，比如<code>点击</code>，<code>输入</code>，<code>按键</code>等等，由于直接影响到用户的使用体验，属于紧急情况。</li><li>过渡更新（<code>Transition updates</code>）：如从一个界面过渡到另一个界面，属于非紧急情况。</li></ul><p>对于用户体验来讲，紧急更新应该是优先于非紧急更新的。例如用<code>input</code>搜索时，我们应该确保用户输入的内容是能够是实时响应的，而根据输入值搜索出来的内容在渲染更新的时候不应该阻塞用户的输入。</p><p>这里就回到了上面提到的多更新并存的问题：哪些更新优先级高，哪些更新优先级低，哪些更新需要立即去执行，哪些更新可以缓一缓再执行。</p><p>为了解决这个问题，<code>React</code>为通过<code>lane</code>的方式每个更新分配了相关优先级。<code>lane</code>可以简单理解为一些数字，数值越小，表明优先级越高。但是为了计算方便，采用二进制的形式来表示。比如我们在判断一个状态的更新是否属于当前更新时，只需要判断<code>updateLanes &amp; renderLanes</code>即可。</p><p>在<code>react-reconciler/src/ReactFiberLane.new.js</code> 文件中，里面一共展示了<code>32</code>条<code>lane</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TotalLanes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NoLanes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NoLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                          */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 同步</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SyncLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 连续事件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> InputContinuousHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*    */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> InputContinuousLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*            */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000000100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> DefaultHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*            */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000001000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> DefaultLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                    */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000010000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 过渡</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000000100000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLanes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000001111111111111111000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000001000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000010000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000000100000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane4</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000001000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane5</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000010000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane6</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000000100000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane7</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000001000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane8</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000010000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane9</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                        */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000000100000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane10</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000001000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane11</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000010000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane12</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000000100000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane13</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000001000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane14</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000010000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane15</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000000100000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TransitionLane16</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000001000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重试</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLanes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                            */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000111110000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLane1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                             */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000010000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLane2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                             */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000000100000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLane3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                             */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000001000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLane4</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                             */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000010000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> RetryLane5</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                             */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0000100000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SomeRetryLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> RetryLane1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SelectiveHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*          */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0001000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NonIdleLanes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                                 */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0001111111111111111111111111111</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> IdleHydrationLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*               */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0010000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> IdleLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                       */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b0100000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 离屏</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> OffscreenLane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*                   */</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0b1000000000000000000000000000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>不同的<code>lane</code>表示不同的更新优先级。比如用户事件比较紧急，那么可以对应比较高的优先级如<code>SyncLane</code>；<code>UI</code>界面过渡的更新不那么紧急，可以对应比较低的优先级如<code>TransitionLane</code>；网络加载的更新也不那么紧急，可以对应低优先级<code>RetryLane</code>，等等。</p><p>通过这种优先级，我们就能判断哪些更新优先执行，哪些更新会被中断滞后执行了。举个例子来讲：假如有两个更新，他们同时对<code>App</code>组件的一个<code>count</code>属性更新：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">You clicked </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> times</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#A6ACCD;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  A按钮</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">startTransition</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setCount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  B按钮</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>一个是<code>A</code>按钮：<code>click</code>事件触发的更新，叫做<code>A更新</code>，对应于<code>SyncLane</code>。</li><li>一个是<code>B</code>按钮：<code>startTransition</code>触发的更新，叫做<code>B更新</code>，对应于<code>TransitionLane1</code>。</li></ul><p>假设<code>B</code>按钮先点击， <code>B更新</code>开始，按照之前提到时间切片的形式进行更新。中途触发了<code>A</code>按钮点击，进而触发<code>A更新</code>。那么此时就会通过<code>lane</code>进行对比，发现<code>DefaultLane</code>优先级高于<code>TransitionLane1</code>。此时会中断<code>B更新</code>，开始<code>A更新</code>。直到<code>A</code>更新完成时，再重新开始<code>B</code>更新。</p><p><img src="`+C+`" alt="image-20221017222735388"></p><p>那么<code>React</code>是如何区分<code>B更新</code>对<code>App</code>的<code>count</code>的更改和<code>A更新</code>中对<code>count</code>的更改呢？</p><p>实际上，在每次更新时，更新 <code>state</code>的操作会被创建为一个 <code>Update</code>，放到循环链表当中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">eventTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">lane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lane</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">*</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">eventTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">lane</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    tag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">UpdateState</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">    callback</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在更新的时候就会依次去执行这个链表上的操作，从而计算出最终的<code>state</code>。</p><p>从<code>Update</code>的定义可以注意到，每个<code>Update</code>里都有一个<code>lane</code>属性。该属性标识了当前的这个<code>Update</code>的更新优先级，属于哪个更新任务中的操作。</p><p>因此当<code>A更新</code>在执行的时候，我们在计算<code>state</code>的时候，只需要去计算与<code>A更新</code>相同<code>lane</code>的<code>update</code>即可。同样，<code>B更新</code>开始，也只更新具有同等<code>lane</code>级别的<code>Update</code>，从而达到不同更新的状态互不干扰的效果。</p><h2 id="_9-react18-并发渲染" tabindex="-1">9. React18 并发渲染 <a class="header-anchor" href="#_9-react18-并发渲染" aria-hidden="true">#</a></h2><p>回顾一下前面讨论的<code>React并发渲染</code>：</p><ol><li><p>为什么需要并发？</p></li><li><p>因为我们期望一些不重要的更新不会影响用户的操作，比如长列表渲染不会阻塞用户<code>input</code>输入，从而提升用户体验。</p></li><li><p>并发模式是怎样的？</p></li><li><p>在多个更新并存的情况下，我们需要根据更新优先级，优先执行紧急的更新，其次再执行不那么紧急的更新。比如优先响应<code>click</code>事件触发的更新，其次再响应长列表渲染的更新。</p></li><li><p>并发模式是如何实现的？</p></li><li><p>对于每个更新，为其分配一个优先级<code>lane</code>，用于区分其紧急程度。</p></li><li><p>通过<code>Fiber</code>结构将不紧急的更新拆分成多段更新，并通过宏任务的方式将其合理分配到浏览器的帧当中。这样就能使得紧急任务能够插入进来。</p></li><li><p>高优先级的更新会打断低优先级的更新，等高优先级更新完成后，再开始低优先级更新。</p></li></ol><h2 id="_10-新特性" tabindex="-1">10. 新特性 <a class="header-anchor" href="#_10-新特性" aria-hidden="true">#</a></h2><p>接下来看看<code>React18</code>部分<code>并发</code>相关的新<code>api</code>。</p><h3 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-hidden="true">#</a></h3><p>在<code>v16/v17</code>中，<code>Suspense</code>主要是配合<code>React.lazy</code>进行<code>code spliting</code>。在<code>v18</code>中，<code>Suspense</code>加入了<code>fallback</code>属性，用于将<code>读取数据</code>和<code>指定加载状态</code>分离。那么这种分离有什么好处呢？</p><p>举一个例子：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">List</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pageId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setData</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">([])</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">isLoading</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setIsLoading</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setIsLoading</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fetchData</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pageId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setIsLoading</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [])</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">isLoading</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Spinner</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">pageId</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这是我们最常见的处理异步数据的方式。虽然看上去还能接受，但实际上会有一些问题：</p><ol><li>存储了两套数据<code>isLoading/data</code>和两种渲染结果，并且代码比较冗余，不利于开发维护。如果用<code>Suspense</code>，可以直接读取数据而不关心加载状态，如：</li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wrappedData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unstable_createResource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pageId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#A6ACCD;">(pageId))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">List</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pageId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wrappedData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pageId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">pageId</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在需要使用 List 组件的地方包裹一层  Suspense 即可自动控制加载抓昂太</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Loading...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以看出使用<code>Suspense</code>后代码变得简洁清晰易懂，对于开发效率和代码维护性都有很大的提升。</p><ol><li>另外一个问题：如果有两个组件<code>Header</code>和<code>List</code>，它们分别有自己的<code>loading</code>状态。现在我们想要把这两个<code>loading</code>状态合并在一起，放到<code>page</code>里。如下所示：</li></ol><p><img src="`+A+`" alt="img"></p><p>如果按照传统的方式，我们需要将大量的代码移动到上一层<code>page</code>里。但是在<code>React18</code>里，<code>Suspense</code>能够很轻松的解决这一问题：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">Skeleton</span><span style="color:#89DDFF;"> /&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Header</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">pageId</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">pageId</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>如果<code>Header</code>组件和<code>List</code>组件都在请求数据当中，那么就会显示<code>Skeleton</code>组件。如果我们想给<code>List</code>组件添加一个单独的占位组件，只需要再套一层<code>Suspense</code>即可实现，无需对数据进行做特殊处理。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">Skeleton</span><span style="color:#89DDFF;"> /&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Header</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#FFCB6B;">ListPlaceholder</span><span style="color:#89DDFF;"> /&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">pageId</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">pageId</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以看出，<code>Suspense</code>通过数据和加载状态分离的方式，极大地简化了加载状态的处理。</p><p>下面我们看另外一个实际的<code>Suspense</code>使用案例，了解下<code>Suspense</code>如何实现的：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Suspense</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">unstable_createResource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-cache</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./utils/api</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unstable_createResource</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">request</span><span style="color:#A6ACCD;">(data))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> AsyncComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(res)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      ))</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SuspenseComp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Loading...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AsyncComponent</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> SuspenseComp</span></span>
<span class="line"></span></code></pre></div><p>在数据读取时我们需要对数据加载的<code>promise</code>通过<code>unstable_createResource</code>方法进行一层封装。其核心目的是为了在<code>promise</code>处于<code>pending</code>状态时会抛出错误，将<code>promise</code>抛出，而<code>Suspense</code>组件会去捕捉这个<code>promise</code>，从而显示<code>fallback</code>。并在<code>promise.then</code>方法中重新触发更新。伪代码如下：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 抛出错误</span></span>
<span class="line"><span style="color:#82AAFF;">unstable_createResource</span><span style="color:#A6ACCD;">(promise) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 数据没加载完成，抛出 promise</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pending</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 数据加载完成，返回加载完的结果</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fulfilled</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Suspense 捕捉错误，捕捉到抛出的 promise，并添加更新</span></span>
<span class="line"><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">renderAgain</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>需要注意的是，<code>Suspense</code>捕捉错误后触发的更新为低优先级更新，会通过时间切片的形式去更新，因此不会阻塞用户交互和渲染流程，这也是前面提到的并发更新的一个实际应用。</p><h3 id="usetransition-usedeferredvalue" tabindex="-1">useTransition/useDeferredValue <a class="header-anchor" href="#usetransition-usedeferredvalue" aria-hidden="true">#</a></h3><p><code>useTransition</code>和<code>useDeferredValue</code>其实功能上相差不太多，都是通过时间切片的形式进行更新。关于它们之间的区别，<code>react</code>有做相关描述：</p><p>It&#39;s tricky. We didn&#39;t document useDeferredValue precisely because we don&#39;t know how to explain it well yet. So I won&#39;t be able to come up with a great explanation on the spot.</p><p>startTransition requires you to have access to the place where state is being <em>set</em>. In long term it&#39;ll likely mostly be used by code like routers (page navigations) or data fetching libraries (refetching data). Whereas useDeferredValue can be used anywhere because it only takes a value — it doesn&#39;t care where the state was set.</p><p><code>useDeferredValue</code>不关心输数据在哪里设置的，它主要用于将一些紧急的事转换为非紧急的事。而<code>useTransition</code>未来可能会用于<code>page navigations</code>或数据获取库等。</p><p>那么这两个<code>hook</code>在实际中有什么作用呢？我们看一个实际例子：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useDeferredValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Defer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">searchValue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setSearchValue</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deferredSearchValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useDeferredValue</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">searchValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">searchValue</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">setSearchValue</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">      /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(deferredSearchValue)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">idx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">idx</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      ))</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* {new Array(searchValue).fill(0).map((_, idx) =&gt; (</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;li key={idx}&gt;{idx}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      ))} */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> Defer</span></span>
<span class="line"></span></code></pre></div><p>在<code>input</code>内容改变时，会根据输入内容去渲染一个比较耗时的列表。</p><ul><li>在传统模式下，由于渲染列表占据了线程，导致用户输入时，无法立即响应。</li><li>而在<code>React18</code>中使用<code>useDeferredValue</code>，会将<code>列表渲染的更新</code>置为低优先级更新。并且当<code>input</code>值快速变化的时候，<code>React</code>会合并触发的更新，渲染最后的一个更新。</li></ul><p>那么<code>useDeferredValue</code>与防抖节流有什么区别呢？</p><p>首先看一下防抖，比如触发<code>onChange</code>事件时，通过<code>setTimeout</code>设置<code>100ms</code>的延迟：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">(value) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">clearTimeout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">timer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  timer = </span><span style="color:#F07178;">setTimeout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">setSearchValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>虽然这已经很好的解决了频繁触发渲染的问题，但是还是会存在一些小问题。比如列表渲染非常快时，远远小于<code>100ms</code>，但是却需要等待到<code>100ms</code>后才会开始执行更新。当然，我们也可以尝试节流来解决频繁渲染问题，但是防抖节流却都无法解决更新耗时过长的问题。比如列表渲染需要耗时<code>1s</code>，那么在这<code>1s</code>内用户依旧无法去交互。</p><p>而<code>useTransition/useDeferredValue</code>很好的解决了这一问题，可以看一下这两个<code>hook</code>源码中比较关键的一部分如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> prevTransition </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每次更新之前，改变优先级，为 transition 优先级</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setValue</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevTransition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在每次更新之前，会将优先级更新为<code>transition</code>，属于低优先级更新，通过时间切片的形式去更新，从而不阻塞其他紧急的渲染。这在一些耗时渲染和<code>CPU</code>性能相对不高的场景下还是比较有用的，能够稳定保证用户界面是可交互的。</p><h3 id="usesyncexternalstore" tabindex="-1">useSyncExternalStore <a class="header-anchor" href="#usesyncexternalstore" aria-hidden="true">#</a></h3><p>前面提到的几个新<code>API</code>都是通过并发更新的形式解决渲染阻塞的问题，但是并发同样会带来新的问题。</p><p>比如我们将一个低优先级更新拆分成了<code>40</code>个小更新，并且这<code>40</code>个小更新里需要获取全局变量，比如<code>globalVariable = 1</code>。当前<code>20</code>个小更新完成时，这个时候用户点击事件触发，将<code>globalVariable</code>设置为<code>2</code>，那么后续<code>20</code>个小更新在获取这个变量时与前<code>20</code>个更新不一致。这就造成了一个界面对于同一个变量却渲染出了<code>2</code>个值，出现不一致的情况。这种情况我们称之为<code>tearing</code>。</p><p><img src="`+d+`" alt="image-20221017222801276"></p><p>为了解决这一问题，<code>React</code>提供了<code>useSyncExternalStore</code>。它相当于对并发更新使用到的<code>额外</code>数据进行监听，当并发更新时数据发生变化，进行强制渲染：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateStoreInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">fiber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">inst</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StoreInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">nextSnapshot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">checkIfSnapshotChanged</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">inst</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Force a re-render.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">forceStoreRerender</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当然，这个<code>api</code>是给库作者提供的，用于将库深度整合到<code>React</code>当中，通常不会用于实际业务开发当中。</p><p>至此，<code>React18</code>的并发原理及相关特性分享完了。总的来说，<code>React18</code>这次的更新大都是底层内容的更新，实际的 <code>api</code> 变动并不是很大。对于开发者来讲，虽然可以很快上手这些新的 <code>api</code>，但是却越来越难以理解背后的一些原理了。</p><p>最后，以上部分内容包含我个人的理解，难免存在一些理解上的偏差，如果有错误的地方欢迎大家指正。如果你有什么问题也欢迎讨论。</p><h2 id="_11-源码调试" tabindex="-1">11. 源码调试 <a class="header-anchor" href="#_11-源码调试" aria-hidden="true">#</a></h2><p>最后附上<a href="https://github.com/promise96319/React18-debug" target="_blank" rel="noreferrer">react v18.0.0</a>的源码调试仓库，该仓库对<code>react 源码</code>做了一点处理，可以直接对源码进行<code>debug</code>调试，相对比较方便。</p>`,161),f=[g];function h(m,b,E,B,k,_){return a(),n("div",null,f)}const x=s(u,[["render",h]]);export{v as __pageData,x as default};
