import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c610f10c.js";const F=JSON.parse('{"title":"commitWork 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"react/commitWork.md","filePath":"react/commitWork.md","lastUpdated":1695632838000}'),p={name:"react/commitWork.md"},o=l(`<h1 id="commitwork-阶段" tabindex="-1">commitWork 阶段 <a class="header-anchor" href="#commitwork-阶段" aria-label="Permalink to &quot;commitWork 阶段&quot;">​</a></h1><p><code>beginWork</code>和<code>completeWork</code>阶段都正常结束后，此时所有的<code>fiber</code>和真实节点创建完成，进入到<code>commit</code>阶段：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (root.current.alternate: any);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.finishedWork </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork;</span></span>
<span class="line"><span style="color:#E1E4E8;">root.finishedLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lanes;</span></span>
<span class="line"><span style="color:#B392F0;">finishConcurrentRender</span><span style="color:#E1E4E8;">(root, exitStatus, lanes);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (root.current.alternate: any);</span></span>
<span class="line"><span style="color:#24292E;">root.finishedWork </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork;</span></span>
<span class="line"><span style="color:#24292E;">root.finishedLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lanes;</span></span>
<span class="line"><span style="color:#6F42C1;">finishConcurrentRender</span><span style="color:#24292E;">(root, exitStatus, lanes);</span></span></code></pre></div><p>当结果为<code>RootCompleted</code>时，<code>finishConcurrentRender</code>函数会调用<code>commitRoot(root)</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">previousUpdateLanePriority</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentUpdatePriority</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevTransition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactCurrentBatchConfig.transition;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactCurrentBatchConfig.transition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 优先级为同步，不可被打断</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setCurrentUpdatePriority</span><span style="color:#E1E4E8;">(DiscreteEventPriority);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commitRootImpl</span><span style="color:#E1E4E8;">(root, previousUpdateLanePriority);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactCurrentBatchConfig.transition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prevTransition;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setCurrentUpdatePriority</span><span style="color:#E1E4E8;">(previousUpdateLanePriority);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitRoot</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">previousUpdateLanePriority</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentUpdatePriority</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevTransition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactCurrentBatchConfig.transition;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ReactCurrentBatchConfig.transition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 优先级为同步，不可被打断</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setCurrentUpdatePriority</span><span style="color:#24292E;">(DiscreteEventPriority);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commitRootImpl</span><span style="color:#24292E;">(root, previousUpdateLanePriority);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ReactCurrentBatchConfig.transition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prevTransition;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setCurrentUpdatePriority</span><span style="color:#24292E;">(previousUpdateLanePriority);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>commit</code>执行时，会将当前优先级置为<code>DiscreteEventPriority</code>，也就是同步优先级，为同步执行，不可被打断。</p><h2 id="flushpassiveeffects" tabindex="-1">flushPassiveEffects <a class="header-anchor" href="#flushpassiveeffects" aria-label="Permalink to &quot;flushPassiveEffects&quot;">​</a></h2><p><code>commit</code>第一步会执行<code>flushPassiveEffects</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">flushPassiveEffects</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (rootWithPendingPassiveEffects </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">flushPassiveEffects</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (rootWithPendingPassiveEffects </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span></code></pre></div><p>那么什么时候<code>rootWithPendingPassiveEffects !== null</code>成立呢？在<code>commitRootImpl</code>方法后半段会进行赋值：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootDoesHavePassiveEffects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootWithPendingPassiveEffects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">  pendingPassiveEffectsLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lanes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#24292E;">  rootDoesHavePassiveEffects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  rootWithPendingPassiveEffects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">  pendingPassiveEffectsLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lanes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果<code>rootDoesHavePassiveEffects</code>成立，那么会将<code>root</code>赋值给<code>rootWithPendingPassiveEffects</code>。那么下一轮<code>commit</code>时，<code>rootWithPendingPassiveEffects !== null</code> 就会成立了。还是在这个函数中，再看看<code>rootDoesHavePassiveEffects</code>变量：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.subtreeFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> PassiveMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> PassiveMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootDoesHavePassiveEffects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scheduleCallback</span><span style="color:#E1E4E8;">(NormalSchedulerPriority, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">flushPassiveEffects</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.subtreeFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> PassiveMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> PassiveMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#24292E;">    rootDoesHavePassiveEffects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scheduleCallback</span><span style="color:#24292E;">(NormalSchedulerPriority, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">flushPassiveEffects</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果<code>flags/subtreeFlags</code>中存在<code>PassiveMask</code>，即<code>Passive|ChildDeletion</code>，那么<code>rootDoesHavePassiveEffects</code>为<code>true</code>。也就是说如果使用了<code>useEffect</code>或者是节点有删除的情况，那么就会执行<code>flushPassiveEffects</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flushPassiveEffects</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 rootWithPendingPassiveEffects 存在，说明使用了 useEffect 或者有子节点被删除</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rootWithPendingPassiveEffects </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderPriority</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lanesToEventPriority</span><span style="color:#E1E4E8;">(pendingPassiveEffectsLanes);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">priority</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lowerEventPriority</span><span style="color:#E1E4E8;">(DefaultEventPriority, renderPriority);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevTransition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactCurrentBatchConfig.transition;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">previousPriority</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentUpdatePriority</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// transition 置为 0</span></span>
<span class="line"><span style="color:#E1E4E8;">      ReactCurrentBatchConfig.transition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 设置 update 优先级，获取 lane 的时候会用得到</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setCurrentUpdatePriority</span><span style="color:#E1E4E8;">(priority);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flushPassiveEffectsImpl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setCurrentUpdatePriority</span><span style="color:#E1E4E8;">(previousPriority);</span></span>
<span class="line"><span style="color:#E1E4E8;">      ReactCurrentBatchConfig.transition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prevTransition;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flushPassiveEffects</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果 rootWithPendingPassiveEffects 存在，说明使用了 useEffect 或者有子节点被删除</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rootWithPendingPassiveEffects </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderPriority</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lanesToEventPriority</span><span style="color:#24292E;">(pendingPassiveEffectsLanes);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">priority</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lowerEventPriority</span><span style="color:#24292E;">(DefaultEventPriority, renderPriority);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevTransition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactCurrentBatchConfig.transition;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">previousPriority</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentUpdatePriority</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// transition 置为 0</span></span>
<span class="line"><span style="color:#24292E;">      ReactCurrentBatchConfig.transition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 设置 update 优先级，获取 lane 的时候会用得到</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setCurrentUpdatePriority</span><span style="color:#24292E;">(priority);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flushPassiveEffectsImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setCurrentUpdatePriority</span><span style="color:#24292E;">(previousPriority);</span></span>
<span class="line"><span style="color:#24292E;">      ReactCurrentBatchConfig.transition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prevTransition;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>设置更新的优先级后，会执行两个方法：一个是卸载方法，一个是挂载方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 从下到 sibling 到 return 这种深度遍历的方式，一次执行 effect 的 destroy 方法</span></span>
<span class="line"><span style="color:#B392F0;">commitPassiveUnmountEffects</span><span style="color:#E1E4E8;">(root.current);</span></span>
<span class="line"><span style="color:#6A737D;">// 遍历 root.current 的 updateQueue，执行上面的 effect 的 create 方法</span></span>
<span class="line"><span style="color:#B392F0;">commitPassiveMountEffects</span><span style="color:#E1E4E8;">(root, root.current);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 从下到 sibling 到 return 这种深度遍历的方式，一次执行 effect 的 destroy 方法</span></span>
<span class="line"><span style="color:#6F42C1;">commitPassiveUnmountEffects</span><span style="color:#24292E;">(root.current);</span></span>
<span class="line"><span style="color:#6A737D;">// 遍历 root.current 的 updateQueue，执行上面的 effect 的 create 方法</span></span>
<span class="line"><span style="color:#6F42C1;">commitPassiveMountEffects</span><span style="color:#24292E;">(root, root.current);</span></span></code></pre></div><h2 id="commitpassiveunmounteffects" tabindex="-1">commitPassiveUnmountEffects <a class="header-anchor" href="#commitpassiveunmounteffects" aria-label="Permalink to &quot;commitPassiveUnmountEffects&quot;">​</a></h2><h3 id="commitpassiveunmounteffects-begin" tabindex="-1">commitPassiveUnmountEffects_begin <a class="header-anchor" href="#commitpassiveunmounteffects-begin" aria-label="Permalink to &quot;commitPassiveUnmountEffects_begin&quot;">​</a></h3><p><code>commitPassiveUnmountEffects</code>实际调用的是<code>commitPassiveUnmountEffects_begin</code>方法，该方法首先会向下遍历，对于有<code>ChildDeletion</code>标记的都会遍历<code>fiber.deletions</code>（记录了需要删除的老<code>fiber</code>）执行真实节点的删除：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((nextEffect.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> ChildDeletion) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deletions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.deletions;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (deletions </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> deletions.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fiberToDelete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deletions[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiberToDelete;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 进行具体 delete</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitPassiveUnmountEffectsInsideOfDeletedTree_begin</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        fiberToDelete,</span></span>
<span class="line"><span style="color:#E1E4E8;">        fiber,</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((nextEffect.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> ChildDeletion) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deletions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.deletions;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (deletions </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> deletions.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fiberToDelete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deletions[i];</span></span>
<span class="line"><span style="color:#24292E;">      nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiberToDelete;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 进行具体 delete</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitPassiveUnmountEffectsInsideOfDeletedTree_begin</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        fiberToDelete,</span></span>
<span class="line"><span style="color:#24292E;">        fiber,</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commitpassiveunmounteffectsinsideofdeletedtree-begin" tabindex="-1">commitPassiveUnmountEffectsInsideOfDeletedTree_begin <a class="header-anchor" href="#commitpassiveunmounteffectsinsideofdeletedtree-begin" aria-label="Permalink to &quot;commitPassiveUnmountEffectsInsideOfDeletedTree_begin&quot;">​</a></h3><p><code>commitPassiveUnmountEffectsInsideOfDeletedTree_begin</code>方法同样会向下遍历，对于遍历到的<code>function</code>组件，执行卸载方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitPassiveUnmountInsideDeletedTreeOnFiber</span><span style="color:#E1E4E8;">(fiber, nearestMountedAncestor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitPassiveUnmountInsideDeletedTreeOnFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">current</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">nearestMountedAncestor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (current.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ForwardRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 执行卸载方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitHookEffectListUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        HookPassive,</span></span>
<span class="line"><span style="color:#E1E4E8;">        current,</span></span>
<span class="line"><span style="color:#E1E4E8;">        nearestMountedAncestor,</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitPassiveUnmountInsideDeletedTreeOnFiber</span><span style="color:#24292E;">(fiber, nearestMountedAncestor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitPassiveUnmountInsideDeletedTreeOnFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">current</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">nearestMountedAncestor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (current.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ForwardRef:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 执行卸载方法</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitHookEffectListUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        HookPassive,</span></span>
<span class="line"><span style="color:#24292E;">        current,</span></span>
<span class="line"><span style="color:#24292E;">        nearestMountedAncestor,</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commithookeffectlistunmount" tabindex="-1">commitHookEffectListUnmount <a class="header-anchor" href="#commithookeffectlistunmount" aria-label="Permalink to &quot;commitHookEffectListUnmount&quot;">​</a></h3><p><code>commitHookEffectListUnmount</code>方法会循环执行<code>fiber</code>上的<code>effects</code>(如果使用了<code>useEffect/useLayoutEffect</code>等，会创建<code>effect</code>，并形成链表挂载到<code>fiber.updateQueue.effects.lastEffect</code>上)：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到第一个 effect</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstEffect;</span></span>
<span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 tag 包含 flags</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((effect.tag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> flags) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> flags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">destroy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.destroy;</span></span>
<span class="line"><span style="color:#E1E4E8;">    effect.destroy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (destroy </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">safelyCallDestroy</span><span style="color:#E1E4E8;">(finishedWork, nearestMountedAncestor, destroy);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (effect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> firstEffect);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到第一个 effect</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstEffect;</span></span>
<span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果 tag 包含 flags</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((effect.tag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> flags) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> flags) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">destroy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.destroy;</span></span>
<span class="line"><span style="color:#24292E;">    effect.destroy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (destroy </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">safelyCallDestroy</span><span style="color:#24292E;">(finishedWork, nearestMountedAncestor, destroy);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.next;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (effect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> firstEffect);</span></span></code></pre></div><p>由于这里的<code>tag</code>为<code>HookPassive</code>，因此只有<code>useEffect</code>里的<code>destroy</code>方法才会被执行，而<code>useLayoutEffect</code>里的<code>destroy</code>不会被执行。</p><h3 id="commitpassiveunmounteffectsinsideofdeletedtree-complete" tabindex="-1">commitPassiveUnmountEffectsInsideOfDeletedTree_complete <a class="header-anchor" href="#commitpassiveunmounteffectsinsideofdeletedtree-complete" aria-label="Permalink to &quot;commitPassiveUnmountEffectsInsideOfDeletedTree_complete&quot;">​</a></h3><p>在执行了<code>destroy</code>方法后，会删除<code>fiber</code>引用并且删除对应真实节点的引用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">detachFiberAfterEffects</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fiber.child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fiber.deletions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fiber.sibling </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fiber.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hostInstance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hostInstance </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">detachDeletedInstance</span><span style="color:#E1E4E8;">(hostInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  fiber.stateNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detachFiberAfterEffects</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  fiber.child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  fiber.deletions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  fiber.sibling </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fiber.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostComponent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hostInstance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hostInstance </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">detachDeletedInstance</span><span style="color:#24292E;">(hostInstance);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  fiber.stateNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果是普通便签，且<code>fiber.stateNode</code>存在，那么需要调用<code>detachDeletedInstance</code>方法删除<code>node</code>节点上的一些引用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">detachDeletedInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)[internalInstanceKey];</span></span>
<span class="line"><span style="color:#E1E4E8;">  delete (</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)[internalPropsKey];</span></span>
<span class="line"><span style="color:#E1E4E8;">  delete (</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)[internalEventHandlersKey];</span></span>
<span class="line"><span style="color:#E1E4E8;">  delete (</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)[internalEventHandlerListenersKey];</span></span>
<span class="line"><span style="color:#E1E4E8;">  delete (</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)[internalEventHandlesSetKey];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detachDeletedInstance</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)[internalInstanceKey];</span></span>
<span class="line"><span style="color:#24292E;">  delete (</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)[internalPropsKey];</span></span>
<span class="line"><span style="color:#24292E;">  delete (</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)[internalEventHandlersKey];</span></span>
<span class="line"><span style="color:#24292E;">  delete (</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)[internalEventHandlerListenersKey];</span></span>
<span class="line"><span style="color:#24292E;">  delete (</span><span style="color:#E36209;">node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)[internalEventHandlesSetKey];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>回到<code>commitPassiveUnmountEffects_begin</code>方法，在执行了老<code>fiber</code>子节点的删除后，还需要将老<code>fiber</code>与子节点，未删除子节点与已删除子节点之间的引用删除：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">previousFiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.alternate;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (previousFiber </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> detachedChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> previousFiber.child;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (detachedChild </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    previousFiber.child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">detachedSibling</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> detachedChild.sibling;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 挨个将 sibling 指向置空</span></span>
<span class="line"><span style="color:#E1E4E8;">      detachedChild.sibling </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      detachedChild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> detachedSibling;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (detachedChild </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">previousFiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.alternate;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (previousFiber </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> detachedChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> previousFiber.child;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (detachedChild </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    previousFiber.child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">detachedSibling</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> detachedChild.sibling;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 挨个将 sibling 指向置空</span></span>
<span class="line"><span style="color:#24292E;">      detachedChild.sibling </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      detachedChild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> detachedSibling;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (detachedChild </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commitpassiveunmounteffects-complete" tabindex="-1">commitPassiveUnmountEffects_complete <a class="header-anchor" href="#commitpassiveunmounteffects-complete" aria-label="Permalink to &quot;commitPassiveUnmountEffects_complete&quot;">​</a></h3><p>向下查找直到找到不是<code>PassiveMask</code>的节点，此时执行<code>commitPassiveUnmountEffects_complete</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((fiber.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Passive) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 循环执行 unmount 下的 destroy 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitPassiveUnmountOnFiber</span><span style="color:#E1E4E8;">(fiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fiber.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Passive) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 循环执行 unmount 下的 destroy 方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitPassiveUnmountOnFiber</span><span style="color:#24292E;">(fiber);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法会向上查找，是否有<code>flags</code>包含<code>Passive</code>的<code>fiber</code>。如果有，同样会调用<code>commitPassiveUnmountOnFiber</code>执行<code>effect</code>的<code>destroy</code>方法。这样整棵树中有<code>ChildDeletion</code>和<code>Passive</code>标记的<code>fiber</code>中的卸载方法就全都执行了。</p><h2 id="commitpassivemounteffects" tabindex="-1">commitPassiveMountEffects <a class="header-anchor" href="#commitpassivemounteffects" aria-label="Permalink to &quot;commitPassiveMountEffects&quot;">​</a></h2><h3 id="commitpassivemounteffects-begin" tabindex="-1">commitPassiveMountEffects_begin <a class="header-anchor" href="#commitpassivemounteffects-begin" aria-label="Permalink to &quot;commitPassiveMountEffects_begin&quot;">​</a></h3><p><code>commitPassiveMountEffects_begin</code>方法作用是向下查找，找到一个非<code>PassiveMask</code>标记的节点：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((fiber.subtreeFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> PassiveMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> firstChild </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ensureCorrectReturnPointer</span><span style="color:#E1E4E8;">(firstChild, fiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">  nextEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstChild;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fiber.subtreeFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> PassiveMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> firstChild </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ensureCorrectReturnPointer</span><span style="color:#24292E;">(firstChild, fiber);</span></span>
<span class="line"><span style="color:#24292E;">  nextEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstChild;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commitpassivemounteffects-complete" tabindex="-1">commitPassiveMountEffects_complete <a class="header-anchor" href="#commitpassivemounteffects-complete" aria-label="Permalink to &quot;commitPassiveMountEffects_complete&quot;">​</a></h3><p><code>commitPassiveMountEffects_complete</code>方法会从下往上查找有<code>Passive</code>标记的节点，并执行其<code>commitPassiveMountOnFiber</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((fiber.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Passive) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitPassiveMountOnFiber</span><span style="color:#E1E4E8;">(root, fiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fiber.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Passive) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitPassiveMountOnFiber</span><span style="color:#24292E;">(root, fiber);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commitpassivemountonfiber" tabindex="-1">commitPassiveMountOnFiber <a class="header-anchor" href="#commitpassivemountonfiber" aria-label="Permalink to &quot;commitPassiveMountOnFiber&quot;">​</a></h3><p>对于函数式组件都会执行<code>commitHookEffectListMount</code>方法，此时<code>hook</code>的<code>tag</code>为<code>HookPassive | HookHasEffect</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitPassiveMountOnFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedRoot</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ForwardRef:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">commitHookEffectListMount</span><span style="color:#E1E4E8;">(HookPassive </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitPassiveMountOnFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedRoot</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FunctionComponent:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ForwardRef:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SimpleMemoComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">commitHookEffectListMount</span><span style="color:#24292E;">(HookPassive </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect, finishedWork);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="commithookeffectlistmount" tabindex="-1">commitHookEffectListMount <a class="header-anchor" href="#commithookeffectlistmount" aria-label="Permalink to &quot;commitHookEffectListMount&quot;">​</a></h3><p><code>commitHookEffectListMount</code>则是循环调用<code>effects</code>里的<code>create</code>方法并生成<code>destroy</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到第一个 effect</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstEffect;</span></span>
<span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((effect.tag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> tag) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 create 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.create;</span></span>
<span class="line"><span style="color:#E1E4E8;">    effect.destroy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (effect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> firstEffect);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到第一个 effect</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstEffect;</span></span>
<span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((effect.tag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> tag) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 create 方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.create;</span></span>
<span class="line"><span style="color:#24292E;">    effect.destroy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.next;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (effect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> firstEffect);</span></span></code></pre></div><h2 id="变量重置" tabindex="-1">变量重置 <a class="header-anchor" href="#变量重置" aria-label="Permalink to &quot;变量重置&quot;">​</a></h2><p>一些列全局的变量重置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">finishedWork</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root.finishedWork;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lanes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root.finishedLanes;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">root.finishedWork </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">root.finishedLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 任务重置</span></span>
<span class="line"><span style="color:#E1E4E8;">root.callbackNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">root.callbackPriority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLane;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 移除 lane</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> remainingLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeLanes</span><span style="color:#E1E4E8;">(finishedWork.lanes, finishedWork.childLanes);</span></span>
<span class="line"><span style="color:#B392F0;">markRootFinished</span><span style="color:#E1E4E8;">(root, remainingLanes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> workInProgressRoot) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 重置</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgressRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgressRootRenderLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">finishedWork</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.finishedWork;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lanes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.finishedLanes;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">root.finishedWork </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">root.finishedLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 任务重置</span></span>
<span class="line"><span style="color:#24292E;">root.callbackNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">root.callbackPriority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLane;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 移除 lane</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> remainingLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeLanes</span><span style="color:#24292E;">(finishedWork.lanes, finishedWork.childLanes);</span></span>
<span class="line"><span style="color:#6F42C1;">markRootFinished</span><span style="color:#24292E;">(root, remainingLanes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> workInProgressRoot) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 重置</span></span>
<span class="line"><span style="color:#24292E;">  workInProgressRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  workInProgress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  workInProgressRootRenderLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重置完成后判断是否具有<code>PassiveMask</code>（最开始的<code>flushPassiveEffects</code>与这里的判断有关）。如果之前<code>rootDoesHavePassiveEffects</code>为<code>false</code>，表示<code>effect</code>还未被记录，此时需要调用一次<code>flushPassiveEffects</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.subtreeFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> PassiveMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> PassiveMask) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootDoesHavePassiveEffects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scheduleCallback</span><span style="color:#E1E4E8;">(NormalSchedulerPriority, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">flushPassiveEffects</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.subtreeFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> PassiveMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> PassiveMask) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">rootDoesHavePassiveEffects) {</span></span>
<span class="line"><span style="color:#24292E;">    rootDoesHavePassiveEffects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scheduleCallback</span><span style="color:#24292E;">(NormalSchedulerPriority, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">flushPassiveEffects</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行<code>flushPassiveEffects</code>时，会先遍历执行<code>destroy</code>，由于第一次创建没有<code>destroy</code>，所以不会执行。然后会遍历执行<code>create</code>，并且生成<code>destroy</code>。</p><h2 id="beforemutation-阶段" tabindex="-1">beforeMutation 阶段 <a class="header-anchor" href="#beforemutation-阶段" aria-label="Permalink to &quot;beforeMutation 阶段&quot;">​</a></h2><h3 id="commitbeforemutationeffects" tabindex="-1">commitBeforeMutationEffects <a class="header-anchor" href="#commitbeforemutationeffects" aria-label="Permalink to &quot;commitBeforeMutationEffects&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">subtreeHasEffects</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.subtreeFlags </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    (BeforeMutationMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MutationMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LayoutMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveMask)) </span><span style="color:#F97583;">!==</span></span>
<span class="line"><span style="color:#E1E4E8;">  NoFlags;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootHasEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  (finishedWork.flags </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    (BeforeMutationMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MutationMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LayoutMask </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveMask)) </span><span style="color:#F97583;">!==</span></span>
<span class="line"><span style="color:#E1E4E8;">  NoFlags;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">subtreeHasEffects</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.subtreeFlags </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">    (BeforeMutationMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MutationMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LayoutMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveMask)) </span><span style="color:#D73A49;">!==</span></span>
<span class="line"><span style="color:#24292E;">  NoFlags;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootHasEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  (finishedWork.flags </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">    (BeforeMutationMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MutationMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LayoutMask </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveMask)) </span><span style="color:#D73A49;">!==</span></span>
<span class="line"><span style="color:#24292E;">  NoFlags;</span></span></code></pre></div><p>如果<code>subtreeHasEffects</code>或<code>rootHasEffect</code>存在，说明有更新。首先会进入<code>beforeMutation</code>阶段，调用<code>commitBeforeMutationEffects</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitBeforeMutationEffects</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRoot</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">firstChild</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitBeforeMutationEffects_begin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitBeforeMutationEffects</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRoot</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">firstChild</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitBeforeMutationEffects_begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其核心是调用<code>commitBeforeMutationEffects_begin</code>方法。</p><h3 id="commitbeforemutationeffects-begin" tabindex="-1">commitBeforeMutationEffects_begin <a class="header-anchor" href="#commitbeforemutationeffects-begin" aria-label="Permalink to &quot;commitBeforeMutationEffects_begin&quot;">​</a></h3><p>与<code>flushPassiveEffects</code>中类似，这里以<code>_begin</code>结尾的函数都是向下遍历，直到找到一个不符合<code>BeforeMutationMask</code>的节点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BeforeMutationMask</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Update </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Snapshot</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BeforeMutationMask</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Update </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Snapshot</span></span></code></pre></div><p>一种是标记了<code>Update</code>的节点，一种是标记<code>SnapShot</code>的节点，如在<code>class</code>组件中定义了<code>getSnapshotBeforeUpdate</code>函数，那么在<code>beginWork</code>阶段就会将<code>fiber</code>标记为<code>SnapShot</code>。</p><h3 id="commitbeforemutationeffects-complete" tabindex="-1">commitBeforeMutationEffects_complete <a class="header-anchor" href="#commitbeforemutationeffects-complete" aria-label="Permalink to &quot;commitBeforeMutationEffects_complete&quot;">​</a></h3><p>以<code>_complete</code>结尾的函数都是从下往上遍历，然后执行某个函数。这里执行的函数为<code>commitBeforeMutationEffectsOnFiber</code>。</p><h3 id="commitbeforemutationeffectsonfiber" tabindex="-1">commitBeforeMutationEffectsOnFiber <a class="header-anchor" href="#commitbeforemutationeffectsonfiber" aria-label="Permalink to &quot;commitBeforeMutationEffectsOnFiber&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Snapshot) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoFlags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> current.memoizedProps;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> current.memoizedState;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">snapshot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.</span><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          finishedWork.elementType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> finishedWork.type</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> prevProps</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveDefaultProps</span><span style="color:#E1E4E8;">(finishedWork.type, prevProps),</span></span>
<span class="line"><span style="color:#E1E4E8;">          prevState,</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        instance.__reactInternalSnapshotBeforeUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> snapshot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">clearContainer</span><span style="color:#E1E4E8;">(root.containerInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Snapshot) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoFlags) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (finishedWork.tag) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ClassComponent: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current.memoizedProps;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current.memoizedState;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">snapshot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance.</span><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          finishedWork.elementType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> finishedWork.type</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> prevProps</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveDefaultProps</span><span style="color:#24292E;">(finishedWork.type, prevProps),</span></span>
<span class="line"><span style="color:#24292E;">          prevState,</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        instance.__reactInternalSnapshotBeforeUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> snapshot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsMutation) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">clearContainer</span><span style="color:#24292E;">(root.containerInfo);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果<code>SnapShot</code>标记主要有两种情况：一种是<code>HostRoot</code>，在<code>completeWork</code>阶段会将其标记：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> current.child </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgress.flags </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> Snapshot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> current.child </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  workInProgress.flags </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> Snapshot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果<code>current或current.child</code>不存在，在<code>commit</code>阶段会将<code>root.containerInfo</code>真实节点的内容置空。</p><p>另一种情况是<code>class</code>组件定义了<code>getSnapshotBeforeUpdate</code>，此时会直接调用该函数，传入的值为先前的<code>props</code>和<code>state</code>。</p><h2 id="mutation-阶段" tabindex="-1">mutation 阶段 <a class="header-anchor" href="#mutation-阶段" aria-label="Permalink to &quot;mutation 阶段&quot;">​</a></h2><h3 id="commitmutationeffects" tabindex="-1">commitMutationEffects <a class="header-anchor" href="#commitmutationeffects" aria-label="Permalink to &quot;commitMutationEffects&quot;">​</a></h3><p><code>commitMutationEffects</code>执行的是<code>commitMutationEffects_begin</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">deletions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.deletions;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (deletions </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> deletions.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">childToDelete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deletions[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commitDeletion</span><span style="color:#E1E4E8;">(root, childToDelete, fiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">deletions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.deletions;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (deletions </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> deletions.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">childToDelete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> deletions[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">commitDeletion</span><span style="color:#24292E;">(root, childToDelete, fiber);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先是循环遍历，向下执<code>commitDeletion</code>方法，等同于执行了<code>unmountHostComponents</code>方法。</p><h3 id="unmounthostcomponents" tabindex="-1">unmountHostComponents <a class="header-anchor" href="#unmounthostcomponents" aria-label="Permalink to &quot;unmountHostComponents&quot;">​</a></h3><p><code>unmountHostComponents</code>方法作用是删除<code>fiber</code>对应的真实节点。首先是找到这个<code>fiber</code>的父真实节点：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">currentParentIsValid) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">findParent</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentStateNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (parent.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot:</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal:</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentParentIsContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findParent</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentParentIsValid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">currentParentIsValid) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.return;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">findParent</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentStateNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (parent.tag) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent:</span></span>
<span class="line"><span style="color:#24292E;">        currentParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode;</span></span>
<span class="line"><span style="color:#24292E;">        currentParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot:</span></span>
<span class="line"><span style="color:#24292E;">        currentParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#24292E;">        currentParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal:</span></span>
<span class="line"><span style="color:#24292E;">        currentParent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#24292E;">        currentParentIsContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findParent</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.return;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  currentParentIsValid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>只有<code>HostComponent、HostRoot、HostPortal</code>才会渲染成真实节点，其他的标签都是<code>React</code>内部定义，不会渲染出来。</p><p>然后判断当前节点的类型，如果是<code>HostComponent</code>或<code>HostText</code>类型：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostComponent </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> node.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostText) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 递归触发卸载事件。(useLayoutEffect/componentWillUnmount)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitNestedUnmounts</span><span style="color:#E1E4E8;">(finishedRoot, node, nearestMountedAncestor);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 触发完事件，就需要移除真实节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentParentIsContainer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeChildFromContainer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((</span><span style="color:#FFAB70;">currentParent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stateNode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextInstance</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#B392F0;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 移除真实节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((</span><span style="color:#FFAB70;">currentParent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      (node.stateNode: Instance </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TextInstance),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostComponent </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> node.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostText) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 递归触发卸载事件。(useLayoutEffect/componentWillUnmount)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitNestedUnmounts</span><span style="color:#24292E;">(finishedRoot, node, nearestMountedAncestor);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 触发完事件，就需要移除真实节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentParentIsContainer) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeChildFromContainer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      ((</span><span style="color:#E36209;">currentParent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stateNode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextInstance</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#6F42C1;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除真实节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      ((</span><span style="color:#E36209;">currentParent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      (node.stateNode: Instance </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TextInstance),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先是调用<code>commitNestedUnmounts</code>方法，这个方法会遍历该节点下的所有<code>fiber</code>，然后调用<code>commitUnmount</code>方法。（<strong>注意：向下遍历遇到HostPortal时不会调用commitUnmount</strong>）。</p><h3 id="commitunmount" tabindex="-1">commitUnmount <a class="header-anchor" href="#commitunmount" aria-label="Permalink to &quot;commitUnmount&quot;">​</a></h3><p>对于函数式组件，会循环执行带有<code>Layout</code>的<code>tag</code>的<code>effect</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">destroy</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">tag</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (destroy </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行 layout 的 destroy，也就是 useLayoutEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((tag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> HookLayout) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> NoHookEffect) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">safelyCallDestroy</span><span style="color:#E1E4E8;">(current, nearestMountedAncestor, destroy);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  effect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (effect </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> firstEffect);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">destroy</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">tag</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (destroy </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行 layout 的 destroy，也就是 useLayoutEffect</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> HookLayout) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> NoHookEffect) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">safelyCallDestroy</span><span style="color:#24292E;">(current, nearestMountedAncestor, destroy);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  effect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.next;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (effect </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> firstEffect);</span></span></code></pre></div><p>对于<code>class</code>组件，一是移除<code>ref</code>，二是调用<code>componentWillUnmount</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">safelyDetachRef</span><span style="color:#E1E4E8;">(current, nearestMountedAncestor);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> current.stateNode;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> instance.componentWillUnmount </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">safelyCallComponentWillUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    current,</span></span>
<span class="line"><span style="color:#E1E4E8;">    nearestMountedAncestor,</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">safelyDetachRef</span><span style="color:#24292E;">(current, nearestMountedAncestor);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current.stateNode;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> instance.componentWillUnmount </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">safelyCallComponentWillUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    current,</span></span>
<span class="line"><span style="color:#24292E;">    nearestMountedAncestor,</span></span>
<span class="line"><span style="color:#24292E;">    instance,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于<code>HostPortal</code>，则是调用<code>unmountHostComponents</code>处理它的子节点。</p><h3 id="commitmutationeffects-complete" tabindex="-1">commitMutationEffects_complete <a class="header-anchor" href="#commitmutationeffects-complete" aria-label="Permalink to &quot;commitMutationEffects_complete&quot;">​</a></h3><p>等删除节点操作完成后，回到<code>commitMutationEffects_begin</code>方法，会开始执行<code>commitMutationEffects_complete</code>方法。该方法会向上查找，并且调用<code>commitMutationEffectsOnFiber</code>方法。</p><h3 id="commitmutationeffectsonfiber" tabindex="-1">commitMutationEffectsOnFiber <a class="header-anchor" href="#commitmutationeffectsonfiber" aria-label="Permalink to &quot;commitMutationEffectsOnFiber&quot;">​</a></h3><p>对于不同的<code>flags</code>，<code>mutation</code>阶段会做不同的处理：</p><h4 id="contentreset" tabindex="-1">ContentReset <a class="header-anchor" href="#contentreset" aria-label="Permalink to &quot;ContentReset&quot;">​</a></h4><p>表示需要按文本内容处理，并将内容置空：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitResetTextContent</span><span style="color:#E1E4E8;">(finishedWork);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitResetTextContent</span><span style="color:#24292E;">(finishedWork);</span></span></code></pre></div><h4 id="visibility" tabindex="-1">Visibility <a class="header-anchor" href="#visibility" aria-label="Permalink to &quot;Visibility&quot;">​</a></h4><p><code>suspense</code>相关处理，<code>suspense</code>章节再做讲解。</p><h4 id="placement" tabindex="-1">Placement <a class="header-anchor" href="#placement" aria-label="Permalink to &quot;Placement&quot;">​</a></h4><p>表示插入节点。第一步需要找到该节点的父<code>fiber</code>节，注意，这里的父<code>fiber</code>必须是能够渲染成真实<code>DOM</code>的<code>fiber</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentFiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostParentFiber</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostParentFiber</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fiber.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isHostParent</span><span style="color:#E1E4E8;">(parent)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parent;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHostParent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    fiber.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostComponent </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    fiber.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostRoot </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    fiber.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">HostPortal</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentFiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostParentFiber</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostParentFiber</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fiber.return;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isHostParent</span><span style="color:#24292E;">(parent)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parent;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.return;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHostParent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    fiber.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostComponent </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    fiber.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostRoot </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    fiber.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#E36209;">HostPortal</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步通过父<code>fiber</code>获取真实节点：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentStateNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentFiber.stateNode;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到真实父节点</span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (parentFiber.tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostComponent:</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">    isContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostRoot:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意这里是添加到根节点上去了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">    isContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> HostPortal:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意这里是添加到根节点上去了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">    isContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentStateNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentFiber.stateNode;</span></span>
<span class="line"><span style="color:#6A737D;">// 找到真实父节点</span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (parentFiber.tag) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostComponent:</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode;</span></span>
<span class="line"><span style="color:#24292E;">    isContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostRoot:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意这里是添加到根节点上去了。</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#24292E;">    isContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> HostPortal:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意这里是添加到根节点上去了。</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentStateNode.containerInfo;</span></span>
<span class="line"><span style="color:#24292E;">    isContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步获取兄弟结点：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">before</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostSibling</span><span style="color:#E1E4E8;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHostSibling</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">siblings</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 sibling 不存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (node.sibling </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果 return 不存在 获取 父亲是可以渲染成真实节点的 fiber</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 那么说明 sibling 确实是不存在的</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.return </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHostParent</span><span style="color:#E1E4E8;">(node.return)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// sibling 存在时</span></span>
<span class="line"><span style="color:#E1E4E8;">    node.sibling.return </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.return;</span></span>
<span class="line"><span style="color:#E1E4E8;">    node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.sibling;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 向下查找，查找合适的主节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      node.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> HostComponent </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      node.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> HostText </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      node.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> DehydratedFragment</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果是标记为Placement的，那么是不可用的。</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Placement) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">siblings</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.child </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> node.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> HostPortal) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">siblings</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查找孩子节点（因为react中fiber与实际的真实并不是完全对应的，如有的会形成一层包装）</span></span>
<span class="line"><span style="color:#E1E4E8;">        node.child.return </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node;</span></span>
<span class="line"><span style="color:#E1E4E8;">        node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.child;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果找到的节点是不需要插入的节点，则返回该节点。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(node.flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> Placement)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Found it!</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> node.stateNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">before</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostSibling</span><span style="color:#24292E;">(finishedWork);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHostSibling</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">siblings</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果 sibling 不存在</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (node.sibling </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果 return 不存在 获取 父亲是可以渲染成真实节点的 fiber</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 那么说明 sibling 确实是不存在的</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.return </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHostParent</span><span style="color:#24292E;">(node.return)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.return;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// sibling 存在时</span></span>
<span class="line"><span style="color:#24292E;">    node.sibling.return </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.return;</span></span>
<span class="line"><span style="color:#24292E;">    node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.sibling;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 向下查找，查找合适的主节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      node.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> HostComponent </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      node.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> HostText </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      node.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> DehydratedFragment</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果是标记为Placement的，那么是不可用的。</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Placement) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">siblings</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.child </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> node.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> HostPortal) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">siblings</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查找孩子节点（因为react中fiber与实际的真实并不是完全对应的，如有的会形成一层包装）</span></span>
<span class="line"><span style="color:#24292E;">        node.child.return </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.child;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果找到的节点是不需要插入的节点，则返回该节点。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(node.flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> Placement)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Found it!</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node.stateNode;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>需要注意的是，能渲染的真实节点的结构跟fiber结构并不会完全对应，可能会存在一些层次的包装，所以需要进行比较复杂的查找。</strong></p><p>第四步则是正式的插入节点了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isContainer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">insertOrAppendPlacementNodeIntoContainer</span><span style="color:#E1E4E8;">(finishedWork, before, parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">insertOrAppendPlacementNode</span><span style="color:#E1E4E8;">(finishedWork, before, parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isContainer) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">insertOrAppendPlacementNodeIntoContainer</span><span style="color:#24292E;">(finishedWork, before, parent);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">insertOrAppendPlacementNode</span><span style="color:#24292E;">(finishedWork, before, parent);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="update" tabindex="-1">Update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;Update&quot;">​</a></h4><p>当标记为<code>Update</code>时，执行<code>commitWork</code>。</p><p><strong>当为函数组件时</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitHookEffectListUnmount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">  finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">  finishedWork.return,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitHookEffectListUnmount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect,</span></span>
<span class="line"><span style="color:#24292E;">  finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">  finishedWork.return,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>触发<code>useLayoutEffect</code>的<code>destroy</code>方法。</p><p><strong>当为普通真实节点时</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updatePayload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdatePayload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果有属性被更新了</span></span>
<span class="line"><span style="color:#E1E4E8;">finishedWork.updateQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 更新真实节点的属性</span></span>
<span class="line"><span style="color:#B392F0;">commitUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  updatePayload,</span></span>
<span class="line"><span style="color:#E1E4E8;">  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">  oldProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  finishedWork,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updatePayload</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdatePayload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (finishedWork.updateQueue: any);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果有属性被更新了</span></span>
<span class="line"><span style="color:#24292E;">finishedWork.updateQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 更新真实节点的属性</span></span>
<span class="line"><span style="color:#6F42C1;">commitUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  instance,</span></span>
<span class="line"><span style="color:#24292E;">  updatePayload,</span></span>
<span class="line"><span style="color:#24292E;">  type,</span></span>
<span class="line"><span style="color:#24292E;">  oldProps,</span></span>
<span class="line"><span style="color:#24292E;">  newProps,</span></span>
<span class="line"><span style="color:#24292E;">  finishedWork,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>如果属性有更新，那么会调用<code>commitUpdate</code>（<code>DOM</code>属性处理的方法）更新真实<code>DOM</code>上的属性，如<code>style，href</code>等等。</p><h2 id="layout-阶段" tabindex="-1">layout 阶段 <a class="header-anchor" href="#layout-阶段" aria-label="Permalink to &quot;layout 阶段&quot;">​</a></h2><h3 id="commitlayouteffects" tabindex="-1">commitLayoutEffects <a class="header-anchor" href="#commitlayouteffects" aria-label="Permalink to &quot;commitLayoutEffects&quot;">​</a></h3><p><code>commitLayoutEffects</code>调用<code>commitLayoutEffects_begin</code>方法，还是一样，找到第一个不是<code>LayoutMask</code>的子节点，然后向上执行<code>commitLayoutEffectOnFiber</code>方法。</p><h3 id="commitlayouteffectonfiber" tabindex="-1">commitLayoutEffectOnFiber <a class="header-anchor" href="#commitlayouteffectonfiber" aria-label="Permalink to &quot;commitLayoutEffectOnFiber&quot;">​</a></h3><h4 id="函数组件" tabindex="-1">函数组件 <a class="header-anchor" href="#函数组件" aria-label="Permalink to &quot;函数组件&quot;">​</a></h4><p>为函数组件时，执行<code>commitHookEffectListMount</code>方法，也就是<code>useLayoutEffect</code>的<code>create</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitHookEffectListMount</span><span style="color:#E1E4E8;">(HookLayout </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> HookHasEffect, finishedWork);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitHookEffectListMount</span><span style="color:#24292E;">(HookLayout </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> HookHasEffect, finishedWork);</span></span></code></pre></div><h4 id="class-组件" tabindex="-1">class 组件 <a class="header-anchor" href="#class-组件" aria-label="Permalink to &quot;class 组件&quot;">​</a></h4><p>如果<code>flags</code>存在<code>Update</code>，说明定义了生命周期函数。当<code>current</code>为<code>null</code>的时候，说明是挂载阶段，调用<code>componentDidMount</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">instance.</span><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">instance.</span><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">();</span></span></code></pre></div><p>否则说明是更新阶段，调用<code>componentDidUpdate</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">instance.</span><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  prevProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  prevState,</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">instance.</span><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  prevProps,</span></span>
<span class="line"><span style="color:#24292E;">  prevState,</span></span>
<span class="line"><span style="color:#24292E;">  instance.__reactInternalSnapshotBeforeUpdate,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>最后，<code>state</code>更新完成之后，执行<code>update</code>上的回调函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updateQueue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commitUpdateQueue</span><span style="color:#E1E4E8;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitUpdateQueue</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">finishedQueue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateQueue</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">instance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">effects</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedQueue.effects;</span></span>
<span class="line"><span style="color:#E1E4E8;">  finishedQueue.effects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (effects </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 依次执行已经update了的回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> effects.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">effect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effects[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.callback;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (callback </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        effect.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callCallback</span><span style="color:#E1E4E8;">(callback, instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updateQueue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commitUpdateQueue</span><span style="color:#24292E;">(finishedWork, updateQueue, instance);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitUpdateQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">finishedQueue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">instance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">effects</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedQueue.effects;</span></span>
<span class="line"><span style="color:#24292E;">  finishedQueue.effects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effects </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 依次执行已经update了的回调函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> effects.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">effect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effects[i];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.callback;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (callback </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        effect.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callCallback</span><span style="color:#24292E;">(callback, instance);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>在更新完成之后，更改<code>root.current</code>指向，相当于交换了<code>current</code>和<code>workInProgress</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">root.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> finishedWork;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">root.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> finishedWork;</span></span></code></pre></div><p>然后再次进行调度：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ensureRootIsScheduled</span><span style="color:#E1E4E8;">(root, </span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ensureRootIsScheduled</span><span style="color:#24292E;">(root, </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">());</span></span></code></pre></div><p>如果还有未完成的更新，即优先级不够的更新，那么这里会被继续调度进行更新。</p><p>如果当前更新中包含<code>useEffect</code>，并且<code>lanes</code>中含有同步<code>lane</code>，那么需要立即执行<code>flushPassiveEffect</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">includesSomeLane</span><span style="color:#E1E4E8;">(pendingPassiveEffectsLanes, SyncLane) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> LegacyRoot</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">flushPassiveEffects</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">includesSomeLane</span><span style="color:#24292E;">(pendingPassiveEffectsLanes, SyncLane) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  root.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> LegacyRoot</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">flushPassiveEffects</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相比于<code>schedule</code>执行<code>flushPassiveEffects</code>，这里执行更靠前。</p><p>最后还会执行<code>flushSyncCallbacks</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">flushSyncCallbacks</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">flushSyncCallbacks</span><span style="color:#24292E;">();</span></span></code></pre></div><p>该函数用于将立即执行<code>layout</code>里新添加的任务。</p>`,147),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{F as __pageData,u as default};
