import{_ as n,c as s,o as a,a as p}from"./app.d322b2e6.js";const m='{"title":"beginWork - fiber\u7684\u66F4\u65B0","description":"","frontmatter":{},"headers":[{"level":2,"title":"updateClassComponent","slug":"updateclasscomponent"},{"level":3,"title":"constructClassInstance\u65B9\u6CD5","slug":"constructclassinstance\u65B9\u6CD5"},{"level":3,"title":"mountClassInstance\u65B9\u6CD5","slug":"mountclassinstance\u65B9\u6CD5"},{"level":3,"title":"resumeMountClassInstance\u65B9\u6CD5","slug":"resumemountclassinstance\u65B9\u6CD5"},{"level":3,"title":"updateClassInstance\u65B9\u6CD5","slug":"updateclassinstance\u65B9\u6CD5"},{"level":3,"title":"finishClassComponent\u65B9\u6CD5","slug":"finishclasscomponent\u65B9\u6CD5"},{"level":2,"title":"updateContextProvider","slug":"updatecontextprovider"},{"level":2,"title":"updateContextConsumer","slug":"updatecontextconsumer"},{"level":2,"title":"updateFunctionComponent","slug":"updatefunctioncomponent"},{"level":2,"title":"updateForwardRef","slug":"updateforwardref"},{"level":2,"title":"updateHostComponent","slug":"updatehostcomponent"},{"level":2,"title":"updateFragment","slug":"updatefragment"},{"level":2,"title":"updateMemoComponent","slug":"updatememocomponent"},{"level":2,"title":"updatePortalComponent","slug":"updateportalcomponent"},{"level":2,"title":"mountLazyComponent","slug":"mountlazycomponent"}],"relativePath":"react/beginWork-fiber\u66F4\u65B0.md","lastUpdated":1652195166000}',t={},o=p(`<h1 id="beginwork-fiber\u7684\u66F4\u65B0" tabindex="-1">beginWork - fiber\u7684\u66F4\u65B0 <a class="header-anchor" href="#beginwork-fiber\u7684\u66F4\u65B0" aria-hidden="true">#</a></h1><p>\u5728\u4E0A\u4E00\u7AE0\u4E2D\uFF0C<code>beginWork</code>\u9636\u6BB5\u5BF9\u6BCF\u4E00\u4E2A\u4E0D\u540C\u7684\u6807\u7B7E\u90FD\u521B\u5EFA\u6216\u590D\u7528\u4E86\u5BF9\u5E94\u7684<code>fiber</code>\uFF0C\u63A5\u4E0B\u6765\u5C31\u662F\u5BF9<code>fiber</code>\u8FDB\u884C\u4E00\u4E9B\u66F4\u52A0\u7CBE\u7EC6\u7684\u5904\u7406\u3002</p><h2 id="updateclasscomponent" tabindex="-1">updateClassComponent <a class="header-anchor" href="#updateclasscomponent" aria-hidden="true">#</a></h2><div class="language-javascript"><pre><code><span class="token function">prepareToReadContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7B2C\u4E00\u6B65\u662F\u5224\u65AD<code>context</code>\u662F\u5426\u6709\u66F4\u65B0\uFF0C\u5982\u679C\u6709\u7684\u8BDD\u90A3\u4E48\u6807\u8BB0<code>didReceiveUpdate</code>\u4E3A<code>true</code>\u3002\u63A5\u7740\u83B7\u53D6<code>instance</code>:</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> instance <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">constructClassInstance</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mountClassInstance</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>instance</code>\u4E3A<code>class</code>\u7EC4\u4EF6\u7684\u5B9E\u4F8B\uFF0C\u5B58\u50A8\u5728<code>fiber.stateNode</code>\u4E0A\u3002\u5982\u679C<code>instance</code>\u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u8FD8\u6CA1\u6709\u88AB\u5B9E\u4F8B\u5316\u3002</p><h3 id="constructclassinstance\u65B9\u6CD5" tabindex="-1">constructClassInstance\u65B9\u6CD5 <a class="header-anchor" href="#constructclassinstance\u65B9\u6CD5" aria-hidden="true">#</a></h3><p>\u9996\u5148\u7B2C\u4E00\u6B65\u662F\u5224\u65AD\u662F\u5426\u6709<code>contextType</code>\u5C5E\u6027\u4E14\u4E3A\u5BF9\u8C61\u5F62\u5F0F\u3002\u5982\u679C\u5B58\u5728\u8BF4\u660E\u4F7F\u7528\u4E86<code>context</code>\uFF0C\u6B64\u65F6\u4F1A\u8FDB\u884C<code>readContext</code>\uFF0C\u5C06\u8BFB\u53D6\u5F97\u5230\u7684<code>context</code>\u5F62\u6210\u94FE\u8868\u5F62\u5F0F\uFF0C\u5B58\u653E\u5230<code>fiber.dependencies.firstContext</code>\u4E0A\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> contextType <span class="token operator">=</span> ctor<span class="token punctuation">.</span>contextType<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> contextType <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> contextType <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context <span class="token operator">=</span> <span class="token function">readContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>contextType<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u968F\u540E\u5BF9<code>class</code>\u8FDB\u884C\u5B9E\u4F8B\u5316\uFF0C\u5E76\u83B7\u53D6<code>class</code>\u7EC4\u4EF6\u7684<code>state</code>\uFF0C\u5B58\u653E\u5230<code>fiber.memoizedState</code>\u5C5E\u6027\u4E0A\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span>
  instance<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token keyword">undefined</span>
    <span class="token operator">?</span> instance<span class="token punctuation">.</span>state
    <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6700\u540E\u6267\u884C<code>adoptClassInstance</code>\u65B9\u6CD5\uFF0C\u5EFA\u7ACB<code>fiber</code>\u548C<code>instance</code>\u7684\u8054\u7CFB\u3002\u5E76\u4E14\u4E3A<code>instance</code>\u6DFB\u52A0<code>updater</code>\uFF0C\u5373<code>setState\u3001forceUpdate</code>\u7B49\u65B9\u6CD5\u3002</p><div class="language-javascript"><pre><code>instance<span class="token punctuation">.</span>updater <span class="token operator">=</span> classComponentUpdater<span class="token punctuation">;</span>
<span class="token comment">// class fiber \u7684 stateNode \u6307\u5411\u7684\u662F class \u5B9E\u4F8B</span>
workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>
<span class="token comment">// \u5C06 fiber \u5B58\u50A8\u5230\u5B9E\u4F8B\u7684_reactInternals \u5C5E\u6027\u4E0A</span>
<span class="token function">setInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="mountclassinstance\u65B9\u6CD5" tabindex="-1">mountClassInstance\u65B9\u6CD5 <a class="header-anchor" href="#mountclassinstance\u65B9\u6CD5" aria-hidden="true">#</a></h3><p>\u9996\u5148\u4F1A\u8BFB\u53D6<code>context</code>\u503C\uFF0C\u5B58\u653E\u5230<code>instance.context</code>\u4E0A\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> contextType <span class="token operator">=</span> ctor<span class="token punctuation">.</span>contextType<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> contextType <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> contextType <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u56E0\u6B64\u5728 class \u7EC4\u4EF6\u91CC\u53EF\u4EE5\u901A\u8FC7 this.context \u8BBF\u95EE context</span>
  instance<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">readContext</span><span class="token punctuation">(</span>contextType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u968F\u540E\u662F\u751F\u547D\u5468\u671F\u7684\u6267\u884C\uFF0C\u9996\u5148\u662F\u9759\u6001\u65B9\u6CD5<code>getDerivedStateFromProps</code>\u7684\u6267\u884C\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> partialState <span class="token operator">=</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> memoizedState <span class="token operator">=</span>
  partialState <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> partialState <span class="token operator">===</span> <span class="token keyword">undefined</span>
    <span class="token operator">?</span> prevState
  <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
workInProgress<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> memoizedState<span class="token punctuation">;</span>
</code></pre></div><p>\u8BE5\u65B9\u6CD5\u8FD4\u56DE\u7684<code>state</code>\u4F1A\u548C<code>class</code>\u7EC4\u4EF6\u539F\u6709\u7684<code>state</code>\u5408\u5E76\uFF0C\u5E76\u4E14\u4F1A\u8986\u76D6\u539F\u6709\u7684<code>state</code>\u3002</p><p>\u63A5\u4E0B\u6765\u7684\u5224\u65AD\u5C31\u662F\u4E3A\u4E86\u517C\u5BB9<code>componentWillMount</code>\uFF0C\u4F46\u662F\u5DF2\u7ECF\u4E0D\u63A8\u8350\u4F7F\u7528\u4E86\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  <span class="token keyword">typeof</span> ctor<span class="token punctuation">.</span>getDerivedStateFromProps <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>getSnapshotBeforeUpdate <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>UNSAFE_componentWillMount <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span>
    <span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>componentWillMount <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>\u6700\u540E\u5982\u679C\u6709<code>componentDidMount</code>\uFF0C\u90A3\u4E48\u4F1A\u5C06<code>fiber</code>\u6807\u8BB0\u4E3A<code>Update</code>\uFF0C\u8FD9\u4E2A\u6807\u8BB0\u53EA\u662F\u4E3A\u4E86\u540E\u7EED\u89E6\u53D1\u8BE5\u751F\u547D\u5468\u671F\uFF0C\u5E76\u4E0D\u662F\u6709\u4EC0\u4E48\u66F4\u65B0\u64CD\u4F5C\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>componentDidMount <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">fiberFlags</span><span class="token operator">:</span> Flags <span class="token operator">=</span> Update<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>flags <span class="token operator">|=</span> fiberFlags<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resumemountclassinstance\u65B9\u6CD5" tabindex="-1">resumeMountClassInstance\u65B9\u6CD5 <a class="header-anchor" href="#resumemountclassinstance\u65B9\u6CD5" aria-hidden="true">#</a></h3><p>\u5F53<code>instance</code>\u5B58\u5728<code>current</code>\u4E0D\u5B58\u5728\u65F6\uFF0C\u53EF\u4EE5\u590D\u7528<code>instance</code>\u3002\u4E0E<code>mountClassInstance</code>\u4E0D\u540C\u7684\u662F\u5B83\u4F1A\u9996\u5148\u5224\u65AD\u662F\u5426\u6709<code>componentWillReceiveProps</code>\u65B9\u6CD5\uFF08\u5DF2\u4E0D\u63A8\u8350\u4F7F\u7528\uFF09\uFF0C\u5982\u679C\u5B58\u5728\u5219\u4F1A\u8C03\u7528\u3002</p><p>\u5176\u6B21\u662F\u6267\u884C<code>update</code>\u961F\u5217\uFF0C\u66F4\u65B0<code>state</code>:</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> oldState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
<span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>state <span class="token operator">=</span> oldState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> newProps<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
newState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
</code></pre></div><p>\u5982\u679C\u524D\u540E\u6CA1\u6709\u66F4\u65B0\u8FC7\uFF0C\u90A3\u4E48\u53EA\u4F1A\u5728<code>componentDidMount</code>\u5B58\u5728\u65F6\u6807\u8BB0\u4E3A<code>Update</code>\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  oldProps <span class="token operator">===</span> newProps <span class="token operator">&amp;&amp;</span>
  oldState <span class="token operator">===</span> newState <span class="token operator">&amp;&amp;</span>
  <span class="token operator">!</span><span class="token function">hasContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  <span class="token operator">!</span><span class="token function">checkHasForceUpdateAfterProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>componentDidMount <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">fiberFlags</span><span class="token operator">:</span> Flags <span class="token operator">=</span> Update<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableSuspenseLayoutEffectSemantics<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fiberFlags <span class="token operator">|=</span> LayoutStatic<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    workInProgress<span class="token punctuation">.</span>flags <span class="token operator">|=</span> fiberFlags<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5426\u5219\uFF0C\u4F1A\u8C03\u7528<code>getDerivedStateFromProps</code>\u65B9\u6CD5\u3002\u8C03\u7528\u5B8C\u6210\u540E\u518D\u6B21\u5224\u65AD\u662F\u5426\u6709\u66F4\u65B0\uFF0C\u5E76\u5728<code>componentDidMount</code>\u5B58\u5728\u65F6\u6807\u8BB0\u4E3A<code>Update</code>\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> shouldUpdate <span class="token operator">=</span>
  <span class="token comment">// hasForUpdate</span>
  <span class="token function">checkHasForceUpdateAfterProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
  <span class="token comment">// \u5BF9 shouldComponentUpdate \u548C isPureReactComponent \u8FDB\u884C\u5224\u65AD</span>
  <span class="token function">checkShouldComponentUpdate</span><span class="token punctuation">(</span>
    workInProgress<span class="token punctuation">,</span>
    ctor<span class="token punctuation">,</span>
    oldProps<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    oldState<span class="token punctuation">,</span>
    newState<span class="token punctuation">,</span>
    nextContext<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="updateclassinstance\u65B9\u6CD5" tabindex="-1">updateClassInstance\u65B9\u6CD5 <a class="header-anchor" href="#updateclassinstance\u65B9\u6CD5" aria-hidden="true">#</a></h3><p><code>updateClassInstance</code>\u4E0E<code>resumeMountClassInstance</code>\u5927\u540C\u5C0F\u5F02\uFF0C\u533A\u522B\u5728\u4E8E\u4F7F\u7528<code>componentDidUpdate</code>\u65F6\u5C06<code>fiber</code>\u6807\u8BB0\u4E3A<code>Update</code>\u3002</p><h3 id="finishclasscomponent\u65B9\u6CD5" tabindex="-1">finishClassComponent\u65B9\u6CD5 <a class="header-anchor" href="#finishclasscomponent\u65B9\u6CD5" aria-hidden="true">#</a></h3><p><code>finishClassComponent</code>\u65B9\u6CD5\u6700\u4E3B\u8981\u7684\u5DE5\u4F5C\u662F\u6267\u884C<code>render</code>\u65B9\u6CD5\uFF0C\u7136\u540E<code>reconcileChildren</code>\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> instance <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
nextChildren <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updatecontextprovider" tabindex="-1">updateContextProvider <a class="header-anchor" href="#updatecontextprovider" aria-hidden="true">#</a></h2><p>\u5728<code>React</code>\u5305\u4E2D\u5B9A\u4E49\u4E86<code>createContext</code>\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A<code>context</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> createContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>defaultValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_CONTEXT_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_currentValue</span><span class="token operator">:</span> defaultValue<span class="token punctuation">,</span>
    <span class="token literal-property property">_currentValue2</span><span class="token operator">:</span> defaultValue<span class="token punctuation">,</span>
    <span class="token literal-property property">_threadCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Provider</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Consumer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  context<span class="token punctuation">.</span>Provider <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PROVIDER_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_context</span><span class="token operator">:</span> context<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u56E0\u6B64<code>jsx</code>\u5728\u89E3\u6790<code>Provider</code>\u7684\u65F6\u5019\uFF0C\u5F97\u5230\u7684<code>type</code>\u4E3A\uFF1A</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>
	 $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PROVIDER_TYPE</span><span class="token punctuation">,</span>
   <span class="token literal-property property">_context</span><span class="token operator">:</span> context<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u66F4\u65B0\u65F6\uFF0C\u4F1A\u83B7\u53D6<code>Provider</code>\u4E0A\u5B9A\u4E49\u7684<code>value</code>\u5C5E\u6027\uFF0C\u5E76\u8FDB\u884C\u5BF9\u6BD4\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	 <span class="token keyword">if</span> <span class="token punctuation">(</span>
		 oldProps<span class="token punctuation">.</span>children <span class="token operator">===</span> newProps<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span>
		 <span class="token operator">!</span><span class="token function">hasLegacyContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
				current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        renderLanes<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">// context \u6539\u53D8\u4E86\uFF0C\u5BFB\u627E consumer \u3001 classComponent \u5E76\u6807\u8BB0 \u66F4\u65B0</span>
  <span class="token function">propagateContextChange</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> context<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C\u524D\u540E\u7684<code>value</code>\u503C\u672A\u53D1\u751F\u53D8\u5316\uFF0C\u90A3\u4E48\u8DF3\u8FC7\u8BE5\u8282\u70B9\u7684\u534F\u8C03\uFF0C\u5426\u5219\u8C03\u7528<code>propagateContextChange</code>\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u4F1A\u4EE5\u5F53\u524D\u8282\u70B9\u4E3A\u6839\u8282\u70B9\u5411\u4E0B\u8FDB\u884C\u6DF1\u5EA6\u904D\u5386\u3002\u5982\u679C\u8282\u70B9<code>fiber</code>\u4E0A\u7684<code>dependencies</code>\u5B58\u5728\uFF0C\u8BF4\u660E\u4F7F\u7528\u4E86<code>context</code>\u3002\u904D\u5386<code>dependencies</code>\u770B\u662F\u5426\u6709\u4F7F\u7528<code>Provider</code>\u53D8\u52A8\u5BF9\u5E94\u7684<code>context</code>\u3002</p><div class="language-javascript"><pre><code> <span class="token keyword">if</span> <span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>context <span class="token operator">===</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C\u5F53\u524D\u7684<code>fiber.tag === ClassComponent</code>\uFF0C\u7531\u4E8E<code>context</code>\u53D8\u5316\uFF0C\u6240\u4EE5\u4F1A\u521B\u5EFA\u4E00\u4E2A<code>update</code>\uFF0C\u6DFB\u52A0\u5230<code>fiber.updateQueue.shared.pending</code>\u5F53\u4E2D\u53BB\u3002\u9664\u6B64\u4E4B\u5916\uFF0C\u8FD8\u4F1A\u8FDB\u884C<code>lane</code>\u7684\u5408\u5E76\uFF0C\u8FD9\u6837\u5B50\u8282\u70B9\u5C31\u80FD\u8FDB\u884C\u76F8\u5E94\u7684\u66F4\u65B0\u4E86\u3002</p><div class="language-javascript"><pre><code>fiber<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5982\u679C\u67E5\u627E\u5230\u8282\u70B9\u4E3A<code>Provider</code>\uFF0C\u4E14\u5B83\u4EEC\u7684<code>type</code>\u76F8\u540C\uFF08\u610F\u5473\u7740\u662F\u540C\u4E00<code>Provider</code>\uFF09\uFF0C\u90A3\u4E48\u5C31\u4F1A\u8DF3\u8FC7\uFF0C\u4E0D\u505A\u4EFB\u4F55\u5904\u7406\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> ContextProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// \u9047\u5230\u4E0B\u4E00\u4E2A Provider \u505C\u6B62\u5411\u4E0B\u9012\u5F52</span>
	nextFiber <span class="token operator">=</span> fiber<span class="token punctuation">.</span>type <span class="token operator">===</span> workInProgress<span class="token punctuation">.</span>type <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> fiber<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre></div><h2 id="updatecontextconsumer" tabindex="-1">updateContextConsumer <a class="header-anchor" href="#updatecontextconsumer" aria-hidden="true">#</a></h2><p>\u5982\u679C\u9047\u5230\u7684\u662F<code>Consumer</code>\u6807\u7B7E\uFF0C\u9996\u5148\u4F1A\u6267\u884C<code>prepareToReadContext</code>\u65B9\u6CD5\uFF0C\u4F46\u662F\u6B64\u65F6\u662F\u4E0D\u5B58\u5728<code>dependencies</code>\uFF0C\u56E0\u6B64\u6CA1\u6709\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> firstContext <span class="token operator">=</span> dependencies<span class="token punctuation">.</span>firstContext<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>firstContext <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  dependencies<span class="token punctuation">.</span>firstContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5224\u65AD<code>dependencies.firstContext</code>\u662F\u5426\u5B58\u5728\u4E14<code>lane</code>\u4E0E<code>renderLanes</code>\u6709\u4EA4\u96C6\uFF0C\u6709\u7684\u8BDD\u8BF4\u660E\u8FD8\u6709\u5F85\u66F4\u65B0\u7684\u5185\u5BB9\uFF0C\u6B64\u65F6\u5C06<code>didReceiveUpdate</code>\u8BBE\u4E3A<code>true</code>\uFF0C<code>firstContext</code>\u7F6E\u4E3A\u7A7A\u3002</p><p>\u7D27\u63A5\u7740<code>readContext</code>\uFF0C\u8FD9\u91CC\u7684<code>type</code>\u5C31\u662F<code>createContext</code>\u521B\u5EFA\u7684<code>context</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
<span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">readContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>readContext</code>\u7684\u8FC7\u7A0B\u5C31\u662F\u5C06<code>context</code>\u6DFB\u52A0\u5230<code>dependencies</code>\u5F53\u4E2D\u5E76\u5F62\u6210\u94FE\u8868\u7ED3\u6784\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> contextItem <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">memoizedValue</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
	<span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
   
lastContextDependency <span class="token operator">=</span> contextItem<span class="token punctuation">;</span>
currentlyRenderingFiber<span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">lanes</span><span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>
	<span class="token literal-property property">firstContext</span><span class="token operator">:</span> contextItem<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u968F\u540E\u5C06\u4ECE<code>context</code>\u4E2D\u8BFB\u53D6\u5230\u7684<code>value</code>\u8FDB\u884C\u6E32\u67D3\uFF0C\u8FBE\u5230<code>value</code>\u4F20\u9012\u7684\u76EE\u7684\uFF1A</p><div class="language-javascript"><pre><code>newChildren <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6700\u7EC8\u5F97\u5230\u53EF\u4EE5\u4F7F\u7528<code>value</code>\u7684<code>children</code>\u3002</p><h2 id="updatefunctioncomponent" tabindex="-1">updateFunctionComponent <a class="header-anchor" href="#updatefunctioncomponent" aria-hidden="true">#</a></h2><p>\u5BF9\u4E8E<code>function</code>\u7EC4\u4EF6\uFF0C\u7B2C\u4E00\u6B65\u4E5F\u662F\u5904\u7406<code>context</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token function">prepareToReadContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7B2C\u4E8C\u6B65\u662F\u8C03\u7528<code>renderWithHooks</code>\u65B9\u6CD5\uFF0C\u5176\u4E3B\u8981\u76EE\u7684\u662F\u6267\u884C\u51FD\u6570\uFF0C\u5728\u6267\u884C\u7684\u8FC7\u7A0B\u4E2D\u5904\u7406<code>hooks</code>\u3002</p><div class="language-javascript"><pre><code><span class="token comment">// \u8D4B\u503C hooks dispatcher\u3002</span>
ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span>
  current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> current<span class="token punctuation">.</span>memoizedState <span class="token operator">===</span> <span class="token keyword">null</span>
    <span class="token operator">?</span> HooksDispatcherOnMount
    <span class="token operator">:</span> HooksDispatcherOnUpdate<span class="token punctuation">;</span>
<span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> secondArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u8FD9\u91CC\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570<code>props</code>\u597D\u7406\u89E3\uFF0C\u7B2C\u4E8C\u4E2A\u53C2\u6570<code>secondArg</code>\u5728<code>forwardRef</code>\u7684\u65F6\u5019\u4E3A<code>ref</code>\u3002\u53E6\u5916\u5173\u4E8E<code>hooks</code>\u76F8\u5173\u7684\u5185\u5BB9\u540E\u7EED\u7AE0\u8282\u4F1A\u5355\u72EC\u8BB2\u89E3\u3002</p><h2 id="updateforwardref" tabindex="-1">updateForwardRef <a class="header-anchor" href="#updateforwardref" aria-hidden="true">#</a></h2><p><code>forwardRef</code>\u65B9\u6CD5\u5728<code>React</code>\u5305\u4E2D\u5B9A\u4E49\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> forwardRef<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> <span class="token literal-property property">ElementType</span><span class="token operator">:</span> React$ElementType<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> Props<span class="token punctuation">,</span> <span class="token literal-property property">ref</span><span class="token operator">:</span> React$Ref<span class="token operator">&lt;</span>ElementType<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React$Node<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u76F8\u5F53\u4E8E\u901A\u8FC7 render \u521B\u5EFA\u4E86\u4E00\u4E2A\u8282\u70B9</span>
  <span class="token keyword">const</span> elementType <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_FORWARD_REF_TYPE</span><span class="token punctuation">,</span>
    render<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> elementType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728<code>beginWork</code>\u7684\u65F6\u5019\u5148\u83B7\u53D6\u5230<code>render</code>\uFF0C\u7136\u540E\u5176\u4ED6\u64CD\u4F5C\u540C\u51FD\u6570\u5F0F\u7EC4\u4EF6\uFF0C\u4F1A\u8FDB\u884C<code>renderWithHooks</code>\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> render <span class="token operator">=</span> Component<span class="token punctuation">.</span>render<span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
nextChildren <span class="token operator">=</span> <span class="token function">renderWithHooks</span><span class="token punctuation">(</span>
  current<span class="token punctuation">,</span>
  workInProgress<span class="token punctuation">,</span>
  render<span class="token punctuation">,</span>
  nextProps<span class="token punctuation">,</span>
  ref<span class="token punctuation">,</span>
  renderLanes<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre></div><p>\u552F\u4E00\u4E0D\u540C\u7684\u662F\u8FD9\u4E2A\u4F4D\u7F6E\u4F20\u5165\u4E86<code>ref</code>\u503C\uFF0C\u5728\u8C03\u7528<code>render</code>\u7684\u65F6\u5019\uFF0C\u7B2C\u4E8C\u4E2A\u53C2\u6570\u5B58\u5728\u5E76\u4E14\u4E3A\u4F20\u5165\u7684<code>ref</code>\u3002</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> secondArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updatehostcomponent" tabindex="-1">updateHostComponent <a class="header-anchor" href="#updatehostcomponent" aria-hidden="true">#</a></h2><p><code>updateHostComponent</code>\u65B9\u6CD5\u6BD4\u8F83\u7B80\u5355\uFF0C\u4E3B\u8981\u4EE3\u7801\u4E3A\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> isDirectTextChild <span class="token operator">=</span> <span class="token function">shouldSetTextContent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u901A\u8FC7<code>shouldSetTextContent</code>\u5224\u65AD\u8282\u70B9\u662F\u5426\u53EF\u4EE5\u6309\u7167\u6587\u672C\u8282\u70B9\u5904\u7406\uFF0C\u76F8\u5F53\u4E8E\u505A\u4E86\u4E00\u4E2A\u5C0F\u4F18\u5316\u3002</p><h2 id="updatefragment" tabindex="-1">updateFragment <a class="header-anchor" href="#updatefragment" aria-hidden="true">#</a></h2><p><code>updateFragment</code>\u4E5F\u6BD4\u8F83\u7B80\u5355\uFF0C\u76F8\u5F53\u4E8E\u53EA\u5305\u88C5\u4E86\u4E00\u5C42\u7A7A\u58F3\uFF0C\u4E0D\u5BF9\u8FD9\u5C42\u58F3\u505A\u5904\u7406\uFF0C\u76F4\u63A5\u5904\u7406\u5176\u5B50\u5143\u7D20\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> nextChildren <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
<span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updatememocomponent" tabindex="-1">updateMemoComponent <a class="header-anchor" href="#updatememocomponent" aria-hidden="true">#</a></h2><p><code>memo</code>\u65B9\u6CD5\u5728<code>React</code>\u5305\u4E2D\u5B9A\u4E49\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> memo<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> React$ElementType<span class="token punctuation">,</span>
  compare<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">oldProps</span><span class="token operator">:</span> Props<span class="token punctuation">,</span> <span class="token literal-property property">newProps</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> elementType <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_MEMO_TYPE</span><span class="token punctuation">,</span>
    type<span class="token punctuation">,</span>
    <span class="token literal-property property">compare</span><span class="token operator">:</span> compare <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> compare<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> elementType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5982\u679C<code>current</code>\u4E0D\u5B58\u5728\uFF0C\u8BF4\u660E\u4E0D\u53EF\u590D\u7528\uFF0C\u6B64\u65F6\u9700\u8981\u4E3A\u88AB<code>memo</code>\u7684\u7EC4\u4EF6\u521B\u5EFA<code>fiber</code>\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">createFiberFromTypeAndProps</span><span class="token punctuation">(</span>
	Component<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
	<span class="token keyword">null</span><span class="token punctuation">,</span>
	nextProps<span class="token punctuation">,</span>
	workInProgress<span class="token punctuation">,</span>
	workInProgress<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>
	renderLanes<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5982\u679C<code>current</code>\u5B58\u5728\uFF0C\u90A3\u4E48<code>current.child</code>\u5C31\u662F\u88AB<code>memo</code>\u5305\u88F9\u7684\u7EC4\u4EF6\u7684<code>fiber</code>\u3002\u63A5\u7740\u5224\u65AD\u7EC4\u4EF6\u6709\u6CA1\u6709\u88AB\u66F4\u65B0\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> hasScheduledUpdateOrContext <span class="token operator">=</span> <span class="token function">checkScheduledUpdateOrContext</span><span class="token punctuation">(</span>
  current<span class="token punctuation">,</span>
  renderLanes<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5982\u679C\u88AB\u66F4\u65B0\u4E86\uFF0C\u90A3\u4E48\u4F1A\u901A\u8FC7<code>createWorkInProgress</code>\u521B\u5EFA\uFF08\u6216\u590D\u7528\uFF09\u4E4B\u524D\u7684<code>fiber</code>\u3002\u5426\u5219\u901A\u8FC7\u4F20\u5165\u7684<code>compare</code>\u51FD\u6570\u6BD4\u8F83\u662F\u5426\u9700\u8981\u66F4\u65B0\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasScheduledUpdateOrContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prevProps <span class="token operator">=</span> currentChild<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
  <span class="token keyword">let</span> compare <span class="token operator">=</span> Component<span class="token punctuation">.</span>compare<span class="token punctuation">;</span>
  compare <span class="token operator">=</span> compare <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> compare <span class="token operator">:</span> shallowEqual<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>ref <span class="token operator">===</span> workInProgress<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="updateportalcomponent" tabindex="-1">updatePortalComponent <a class="header-anchor" href="#updateportalcomponent" aria-hidden="true">#</a></h2><p><code>createPortal</code>\u65B9\u6CD5\u5728<code>React-Dom</code>\u5305\u4E2D\u5B9A\u4E49\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPortal</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">children</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  <span class="token literal-property property">containerInfo</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">implementation</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReactPortal <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PORTAL_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> key<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    containerInfo<span class="token punctuation">,</span>
    implementation<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728\u521B\u5EFA<code>fiber</code>\u65F6\uFF0C\u5B83\u7684<code>stateNode</code>\u5C5E\u6027\u662F\u4E00\u4E2A\u6709<code>containerInfo</code>\u5C5E\u6027\u7684\u5BF9\u8C61\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberFromPortal</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">portal</span><span class="token operator">:</span> ReactPortal<span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> TypeOfMode<span class="token punctuation">,</span>
  <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pendingProps <span class="token operator">=</span> portal<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> portal<span class="token punctuation">.</span>children <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>HostPortal<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> portal<span class="token punctuation">.</span>key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  fiber<span class="token punctuation">.</span>lanes <span class="token operator">=</span> lanes<span class="token punctuation">;</span>
  fiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">containerInfo</span><span class="token operator">:</span> portal<span class="token punctuation">.</span>containerInfo<span class="token punctuation">,</span>
    <span class="token literal-property property">pendingChildren</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// Used by persistent updates</span>
    <span class="token literal-property property">implementation</span><span class="token operator">:</span> portal<span class="token punctuation">.</span>implementation<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> fiber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728<code>beginWork</code>\u66F4\u65B0\u65F6\uFF0C\u4F1A\u5C06<code>containerInfo</code>\u5B58\u653E\u8D77\u6765\uFF1A</p><div class="language-javascript"><pre><code><span class="token function">pushHostContainer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">.</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5728\u5B83\u7684\u5B50\u8282\u70B9\u88AB\u6DFB\u52A0\u65F6\uFF0C\u53EF\u4EE5\u627E\u5230\u8FD9\u4E2A<code>containerInfo</code>\u8282\u70B9\u3002\u8FD9\u6837\u5C31\u53EF\u4EE5\u8FBE\u5230<code>fiber</code>\u5728<code>rootFiber</code>\u5185\uFF0C\u4F46\u662F\u6DFB\u52A0\u7684\u771F\u5B9E\u8282\u70B9\u5728\u5176\u4ED6\u8282\u70B9\u7684\u76EE\u7684\u3002</p><h2 id="mountlazycomponent" tabindex="-1">mountLazyComponent <a class="header-anchor" href="#mountlazycomponent" aria-hidden="true">#</a></h2><p><code>lazy</code>\u7684\u5B9A\u4E49\u5728<code>React</code>\u5305\u4E2D\uFF0C\u4E3B\u8981\u7531\u4E24\u4E2A\u51FD\u6570\u6784\u6210\uFF1A</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> lazyInitializer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Uninitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctor <span class="token operator">=</span> payload<span class="token punctuation">.</span>_result<span class="token punctuation">;</span>
    <span class="token keyword">const</span> thenable <span class="token operator">=</span> <span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thenable<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
      <span class="token parameter">moduleObject</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Pending <span class="token operator">||</span> payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Uninitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> ResolvedPayload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
          resolved<span class="token punctuation">.</span>_status <span class="token operator">=</span> Resolved<span class="token punctuation">;</span>
          resolved<span class="token punctuation">.</span>_result <span class="token operator">=</span> moduleObject<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Pending <span class="token operator">||</span> payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Uninitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token literal-property property">rejected</span><span class="token operator">:</span> RejectedPayload <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
          rejected<span class="token punctuation">.</span>_status <span class="token operator">=</span> Rejected<span class="token punctuation">;</span>
          rejected<span class="token punctuation">.</span>_result <span class="token operator">=</span> error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Uninitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token literal-property property">pending</span><span class="token operator">:</span> PendingPayload <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
      pending<span class="token punctuation">.</span>_status <span class="token operator">=</span> Pending<span class="token punctuation">;</span>
      pending<span class="token punctuation">.</span>_result <span class="token operator">=</span> thenable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_status <span class="token operator">===</span> Resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C promise \u5B8C\u6210\u4E86\uFF0C\u90A3\u4E48\u4F1A\u5C06\u52A0\u8F7D\u7684\u6A21\u5757\u8FD4\u56DE</span>
    <span class="token keyword">const</span> moduleObject <span class="token operator">=</span> payload<span class="token punctuation">.</span>_result<span class="token punctuation">;</span>
    <span class="token keyword">return</span> moduleObject<span class="token punctuation">.</span>default<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7B2C\u4E00\u6B21\u52A0\u8F7D\u65F6\uFF0C\u62A5\u9519</span>
    <span class="token keyword">throw</span> payload<span class="token punctuation">.</span>_result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> lazy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">ctor</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Thenable<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> LazyComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_status</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_result</span><span class="token operator">:</span> ctor<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// \u8FD4\u56DE\u7684 type</span>
  <span class="token keyword">const</span> <span class="token literal-property property">lazyType</span><span class="token operator">:</span> LazyComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Payload<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_LAZY_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_payload</span><span class="token operator">:</span> payload<span class="token punctuation">,</span>
    <span class="token literal-property property">_init</span><span class="token operator">:</span> lazyInitializer<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> lazyType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728<code>beginWork</code>\u7684\u65F6\u5019\uFF0C\u4F1A\u6B63\u5F0F\u6267\u884C\u8BE5<code>promise</code>:</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token literal-property property">lazyComponent</span><span class="token operator">:</span> LazyComponentType<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> elementType<span class="token punctuation">;</span>
<span class="token keyword">const</span> payload <span class="token operator">=</span> lazyComponent<span class="token punctuation">.</span>_payload<span class="token punctuation">;</span>
<span class="token keyword">const</span> init <span class="token operator">=</span> lazyComponent<span class="token punctuation">.</span>_init<span class="token punctuation">;</span>
<span class="token keyword">let</span> Component <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7B2C\u4E00\u6B21\u6267\u884C\u65F6\uFF0C\u7531\u4E8E<code>promise</code>\u6CA1\u6709<code>resolve</code>\uFF0C\u56E0\u6B64\u4F1A\u62A5\u9519\uFF0C\u6B64\u65F6\u4F1A\u88AB\u5916\u56F4\u7684<code>catch</code>\u6355\u6349\uFF0C\u8BE5\u8FC7\u7A0B\u540E\u7EED\u4F1A\u5728<code>Suspense</code>\u7AE0\u8282\u4E2D\u8BE6\u7EC6\u8BB2\u89E3\u3002</p><p>\u5982\u679C\u80FD\u6B63\u5E38\u52A0\u8F7D\u8BE5\u7EC4\u4EF6\uFF0C\u90A3\u4E48\u4F1A\u6839\u636E\u7EC4\u4EF6\u7684\u7C7B\u578B\u53BB\u8C03\u7528\u5BF9\u5E94\u7684\u51FD\u6570\uFF1A</p><div class="language-javascript"><pre><code>workInProgress<span class="token punctuation">.</span>type <span class="token operator">=</span> Component<span class="token punctuation">;</span>
<span class="token comment">// \u83B7\u53D6 tag</span>
<span class="token keyword">const</span> resolvedTag <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token function">resolveLazyComponentTag</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resolvedProps <span class="token operator">=</span> <span class="token function">resolveDefaultProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child<span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>resolvedTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// ... }</span>
  <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// ... }</span>
  <span class="token keyword">case</span> <span class="token literal-property property">ForwardRef</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// ... }</span>
  <span class="token keyword">case</span> <span class="token literal-property property">MemoComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// ... }</span>
<span class="token punctuation">}</span>
</code></pre></div>`,106),e=[o];function c(r,l,u,k,i,d){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{m as __pageData,f as default};
