import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.92ce8a2a.js";const p="/assets/playground.d493f640.png",h=JSON.parse('{"title":"组件 Playground","description":"","frontmatter":{},"headers":[],"relativePath":"project/react-runtime.md","filePath":"project/react-runtime.md","lastUpdated":1695640069000}'),l={name:"project/react-runtime.md"},e=o(`<h1 id="组件-playground" tabindex="-1">组件 Playground <a class="header-anchor" href="#组件-playground" aria-label="Permalink to &quot;组件 Playground&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>目前公司内部组件库文档都是生成的静态组件示例，对于未在文档上说明的一些 <code>Api</code> 属性，开发者需要手动去调试才能知道其用途，但是这种调试过程十分麻烦，效率比较低。</p><p>因此，计划开发一个组件库 <code>Playground</code>。目的一是为了提高开发者调试组件的效率，二是方便开发者复现问题，便于处理组件库 <code>bug</code>。</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><p>以 <code>Button</code> 示例代码为例：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@qt/design&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span><span style="color:#E1E4E8;">&gt;按钮&lt;/</span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@qt/design&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;primary&quot;</span><span style="color:#24292E;">&gt;按钮&lt;/</span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="编译代码" tabindex="-1">编译代码 <a class="header-anchor" href="#编译代码" aria-label="Permalink to &quot;编译代码&quot;">​</a></h3><p>首先对于以上代码是无法在浏览器中直接运行的，浏览器无法识别 <code>jsx</code> 语法，所以我们需要将以上示例代码进行打包。</p><p>这里就需要一个打包工具，我们使用 <a href="https://github.com/alangpierce/sucrase" target="_blank" rel="noreferrer">sucrase</a> 这个库，该库相较于 <code>webpack</code> 等打包工具，省去了需要 <code>不必要</code> 的打包过程，因此该库的体积更小，打包速度更快。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { transform } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sucrase&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">import { Button } from &#39;@qt/design&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">import React from &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">export default () =&gt; {</span></span>
<span class="line"><span style="color:#9ECBFF;">  return &lt;Button type=&quot;primary&quot;&gt;按钮&lt;/Button&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compiledCode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    transforms: [</span><span style="color:#9ECBFF;">&#39;jsx&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;typescript&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;imports&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })?.code</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { transform } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sucrase&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">import { Button } from &#39;@qt/design&#39;</span></span>
<span class="line"><span style="color:#032F62;">import React from &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">export default () =&gt; {</span></span>
<span class="line"><span style="color:#032F62;">  return &lt;Button type=&quot;primary&quot;&gt;按钮&lt;/Button&gt;</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compiledCode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(code, {</span></span>
<span class="line"><span style="color:#24292E;">    transforms: [</span><span style="color:#032F62;">&#39;jsx&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;typescript&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;imports&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  })?.code</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打包后，我们就能拿到浏览器能直接识别的低版本的 <code>js</code> 代码了：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 打包结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 打包结果</span></span></code></pre></div><p>这里需要注意，打包参数 <code>[&#39;jsx&#39;, &#39;typescript&#39;, &#39;imports&#39;]</code> 表示会将 <code>jsx/typescript/imports</code> 语法进行转换，<code>imports</code> 表示会将 <code>import</code> 语法转换为 <code>require</code> 语法。这里我采取的是 <code>commonjs</code> 语法，当然也可以不进行转换，在浏览器运行时通过 <code>importmap</code> 来添加依赖。</p><h3 id="添加依赖" tabindex="-1">添加依赖 <a class="header-anchor" href="#添加依赖" aria-label="Permalink to &quot;添加依赖&quot;">​</a></h3><p>打包后的代码是一个字符串，要运行这段代码可以通过两种方式：</p><ul><li>通过 <code>iframe</code> 运行</li><li>通过 <code>eval/Function</code> 运行</li></ul><p>两种方案都可以，这里我们采取 <code>iframe + eval</code> 的方案，主要是希望用 <code>iframe</code> 来能够隔离运行环境，避免污染全局变量，而 <code>eval</code> 可以在编译代码改变时来执行 <code>编译的代码</code>。</p><p>但是这段代码还不能直接运行，因为代码里引入了外部依赖：<code>@qt/design</code> 和 <code>React</code>，所以我们需要在 <code>iframe</code> 里添加相应的依赖。如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">crossorigin</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://ued.qingteng.cn:37022/library/lodash.umd.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">crossorigin</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://ued.qingteng.cn:37022/library/react18.dev.umd.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">crossorigin</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://ued.qingteng.cn:37022/library/react-dom18.dev.umd.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">crossorigin</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://ued.qingteng.cn:37022/library/lodash.umd.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">crossorigin</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://ued.qingteng.cn:37022/library/react18.dev.umd.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">crossorigin</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://ued.qingteng.cn:37022/library/react-dom18.dev.umd.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这里添加的依赖是 <code>umd</code> 格式，因此我们可以直接通过 <code>window</code> 来获取到相应的依赖，如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__modules__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">: window.React,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;react-dom&#39;</span><span style="color:#E1E4E8;">: window.ReactDOM,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;@qt/design&#39;</span><span style="color:#E1E4E8;">: window.QtDesign</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__modules__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">: window.React,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;react-dom&#39;</span><span style="color:#24292E;">: window.ReactDOM,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;@qt/design&#39;</span><span style="color:#24292E;">: window.QtDesign</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="运行代码" tabindex="-1">运行代码 <a class="header-anchor" href="#运行代码" aria-label="Permalink to &quot;运行代码&quot;">​</a></h3><p>接下来就是运行代码了，这里我们通过 <code>eval</code> 来运行代码，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">req</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> __modules__[name]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    (function (require, exports) {</span></span>
<span class="line"><span style="color:#9ECBFF;">      \${</span><span style="color:#E1E4E8;">compiledCode</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">      return exports.default;</span></span>
<span class="line"><span style="color:#9ECBFF;">    })(\${</span><span style="color:#E1E4E8;">req</span><span style="color:#9ECBFF;">}, {});</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">req</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> __modules__[name]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    (function (require, exports) {</span></span>
<span class="line"><span style="color:#032F62;">      \${</span><span style="color:#24292E;">compiledCode</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">      return exports.default;</span></span>
<span class="line"><span style="color:#032F62;">    })(\${</span><span style="color:#24292E;">req</span><span style="color:#032F62;">}, {});</span></span>
<span class="line"><span style="color:#032F62;">  \`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样我们就能拿到运行的 <code>React</code> 组件 <code>Component</code> 了。</p><h3 id="挂载组件" tabindex="-1">挂载组件 <a class="header-anchor" href="#挂载组件" aria-label="Permalink to &quot;挂载组件&quot;">​</a></h3><p>拿到组件后，我们只需要通过 <code>ReactDOM</code> 将组件挂到 <code>root</code> 节点上即可。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">React</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ReactDOM</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 使用 window 上挂载的 ReactDOM</span></span>
<span class="line"><span style="color:#6A737D;">// 2. Component 通过 createElement 实例化，因为浏览器不识别 jsx</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(Component, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {}))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">React</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ReactDOM</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 使用 window 上挂载的 ReactDOM</span></span>
<span class="line"><span style="color:#6A737D;">// 2. Component 通过 createElement 实例化，因为浏览器不识别 jsx</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(Component, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {}))</span></span></code></pre></div><p>以上我们就实现了最基本的 <code>React</code> 组件运行的能力了，接下来进行完善 <code>Playground</code>。</p><h3 id="添加编辑器" tabindex="-1">添加编辑器 <a class="header-anchor" href="#添加编辑器" aria-label="Permalink to &quot;添加编辑器&quot;">​</a></h3><p>为了方便开发者编辑代码，我们需要添加一个编辑器，这里我们使用 <code>monaco-editor</code>，该编辑器支持 <code>typescript</code> 语法高亮，以及 <code>typescript</code> 代码提示，非常适合我们的场景。</p><p>当编辑器内容 <code>onChange</code> 时，进行代码编译，并将编译后的代码通过 <code>iframeRef.current?.contentWindow?.postMessage({ compiledCode })</code> 发送给 <code>iframe</code>，<code>iframe</code> 收到消息后，通过 <code>eval</code> 运行代码。通过 <code>root.render</code> 更新视图。</p><h3 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><p>当代码编译出错或者运行出错时，我们需要将错误信息展示给用户，此时可以通过 <code>React ErrorBoundary</code> 来捕捉错误：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodeErrorBoundary</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    error: </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDerivedStateFromError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { error }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">children</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> error </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createErrorComponent</span><span style="color:#E1E4E8;">(error) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> children</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将根节点用 error boundary 包裹</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(CodeErrorBoundary, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(Component)))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodeErrorBoundary</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    error: </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDerivedStateFromError</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { error }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">children</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">error</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> error </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createErrorComponent</span><span style="color:#24292E;">(error) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> children</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将根节点用 error boundary 包裹</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(CodeErrorBoundary, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(Component)))</span></span></code></pre></div><p>但 <code>React</code> 运行报错时，<code>CodeErrorBoundary</code> 会捕捉错误并呈现到 <code>UI</code> 上。</p><h3 id="动态依赖" tabindex="-1">动态依赖 <a class="header-anchor" href="#动态依赖" aria-label="Permalink to &quot;动态依赖&quot;">​</a></h3><p>可以通过弹窗的形式来添加依赖，添加完的依赖会在 <code>iframe</code> 中以 <code>script</code> 的形式加载。当然也可以支持动态切换组件库的版本。</p><h3 id="链接分享" tabindex="-1">链接分享 <a class="header-anchor" href="#链接分享" aria-label="Permalink to &quot;链接分享&quot;">​</a></h3><p>当开发者复现 <code>bug</code> 时需要将 <code>bug</code> 场景分享给开发者，此时 <code>url</code> 中应包含 代码信息、组件库版本信息等。</p><p>我们可以通过 <code>fflate</code> 库将 { code, version } 等信息进行压缩，然后通过 replaceState 将压缩后的信息添加到 <code>url</code> 中。打开分享链接的时候从 <code>url</code> 中获取压缩信息，然后解压，获取到 { code, version } 等信息，然后回传仅组件。具体实现可以参考 <a href="https://github.com/vuejs/repl" target="_blank" rel="noreferrer">vuejs/repl</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>fflate</code> 通过哈夫曼算法进行压缩，对于出现频率较高的字符，使用更少的字节进行存储，从而达到压缩的目的。</p></div><h2 id="实现效果预览" tabindex="-1">实现效果预览 <a class="header-anchor" href="#实现效果预览" aria-label="Permalink to &quot;实现效果预览&quot;">​</a></h2><p><img src="`+p+'" alt="playground"></p>',45),t=[e];function c(r,E,y,i,d,F){return n(),a("div",null,t)}const m=s(l,[["render",c]]);export{h as __pageData,m as default};
