import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c610f10c.js";const F=JSON.parse('{"title":"emit阶段","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/emit阶段.md","filePath":"webpack/emit阶段.md","lastUpdated":1695631559000}'),p={name:"webpack/emit阶段.md"},o=l(`<h1 id="emit阶段" tabindex="-1">emit阶段 <a class="header-anchor" href="#emit阶段" aria-label="Permalink to &quot;emit阶段&quot;">​</a></h1><p><code>seal</code>阶段完成后，对于每一个<code>chunk</code>下的每一个<code>module</code>都已经生成了相应的代码片段。接下来就需要将这些片段进行拼接，形成可以执行的完整代码，并将代码生成到相应的文件当中。</p><h2 id="createchunkassets" tabindex="-1">createChunkAssets <a class="header-anchor" href="#createchunkassets" aria-label="Permalink to &quot;createChunkAssets&quot;">​</a></h2><p><code>createChunkAssets</code>会在<code>codeGeneration</code>回调中调用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">asyncLib.</span><span style="color:#B392F0;">forEachLimit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    manifest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getRenderManifest</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">      hash: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">      fullHash: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fullHash,</span></span>
<span class="line"><span style="color:#E1E4E8;">      outputOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      codeGenerationResults: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.codeGenerationResults,</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleTemplates: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.moduleTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">      dependencyTemplates: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunkGraph: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleGraph: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">      runtimeTemplate: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.runtimeTemplate</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">asyncLib.</span><span style="color:#6F42C1;">forEachLimit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunks,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    manifest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getRenderManifest</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      chunk,</span></span>
<span class="line"><span style="color:#24292E;">      hash: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hash,</span></span>
<span class="line"><span style="color:#24292E;">      fullHash: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fullHash,</span></span>
<span class="line"><span style="color:#24292E;">      outputOptions,</span></span>
<span class="line"><span style="color:#24292E;">      codeGenerationResults: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.codeGenerationResults,</span></span>
<span class="line"><span style="color:#24292E;">      moduleTemplates: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.moduleTemplates,</span></span>
<span class="line"><span style="color:#24292E;">      dependencyTemplates: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">      chunkGraph: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">      moduleGraph: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">      runtimeTemplate: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.runtimeTemplate</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>首先会对每一个<code>chunk</code>创建<code>manifest</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getRenderManifest</span><span style="color:#E1E4E8;">(options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.renderManifest.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([], options);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">compilation.hooks.renderManifest.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;JavascriptModulesPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">renderMain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">        dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">        runtimeTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">        moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunkGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">        codeGenerationResults,</span></span>
<span class="line"><span style="color:#E1E4E8;">        strictMode: runtimeTemplate.</span><span style="color:#B392F0;">isModule</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      hooks,</span></span>
<span class="line"><span style="color:#E1E4E8;">      compilation</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      render,</span></span>
<span class="line"><span style="color:#E1E4E8;">      filenameTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">      pathOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">        runtime: chunk.runtime,</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentHashType: </span><span style="color:#9ECBFF;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      identifier: hotUpdateChunk</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`hotupdatechunk\${</span><span style="color:#E1E4E8;">chunk</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`chunk\${</span><span style="color:#E1E4E8;">chunk</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      hash: chunk.contentHash.javascript</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getRenderManifest</span><span style="color:#24292E;">(options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.renderManifest.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([], options);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">compilation.hooks.renderManifest.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;JavascriptModulesPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">result</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">renderMain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        hash,</span></span>
<span class="line"><span style="color:#24292E;">        chunk,</span></span>
<span class="line"><span style="color:#24292E;">        dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">        runtimeTemplate,</span></span>
<span class="line"><span style="color:#24292E;">        moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">        chunkGraph,</span></span>
<span class="line"><span style="color:#24292E;">        codeGenerationResults,</span></span>
<span class="line"><span style="color:#24292E;">        strictMode: runtimeTemplate.</span><span style="color:#6F42C1;">isModule</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      hooks,</span></span>
<span class="line"><span style="color:#24292E;">      compilation</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      render,</span></span>
<span class="line"><span style="color:#24292E;">      filenameTemplate,</span></span>
<span class="line"><span style="color:#24292E;">      pathOptions: {</span></span>
<span class="line"><span style="color:#24292E;">        hash,</span></span>
<span class="line"><span style="color:#24292E;">        runtime: chunk.runtime,</span></span>
<span class="line"><span style="color:#24292E;">        chunk,</span></span>
<span class="line"><span style="color:#24292E;">        contentHashType: </span><span style="color:#032F62;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      identifier: hotUpdateChunk</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`hotupdatechunk\${</span><span style="color:#24292E;">chunk</span><span style="color:#032F62;">.</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`chunk\${</span><span style="color:#24292E;">chunk</span><span style="color:#032F62;">.</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      hash: chunk.contentHash.javascript</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>此时会进入到<code>JavascriptModulesPlugin</code>插件当中，对<code>chunk</code>类型进行检验，并生成带有不同<code>render</code>的任务，添加到<code>result</code>当中。完后遍历<code>manifest</code>，生成文件。精简后的代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">asyncLib.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  manifest,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">fileManifest</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 解析 chunk 的文件等信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;filename&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> fileManifest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileManifest.filename;</span></span>
<span class="line"><span style="color:#E1E4E8;">      assetInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileManifest.info;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      filenameTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileManifest.filenameTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pathAndInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getPathWithInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        filenameTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">        fileManifest.pathOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pathAndInfo.path;</span></span>
<span class="line"><span style="color:#E1E4E8;">      assetInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileManifest.info</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">pathAndInfo.info,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">fileManifest.info</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pathAndInfo.info;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 生成 chunk 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileManifest.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 输出文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">emitAsset</span><span style="color:#E1E4E8;">(file, source, assetInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunk.files.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.chunkAsset.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(chunk, file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">asyncLib.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  manifest,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">fileManifest</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 解析 chunk 的文件等信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;filename&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> fileManifest) {</span></span>
<span class="line"><span style="color:#24292E;">      file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileManifest.filename;</span></span>
<span class="line"><span style="color:#24292E;">      assetInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileManifest.info;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      filenameTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileManifest.filenameTemplate;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pathAndInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getPathWithInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        filenameTemplate,</span></span>
<span class="line"><span style="color:#24292E;">        fileManifest.pathOptions</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">      file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pathAndInfo.path;</span></span>
<span class="line"><span style="color:#24292E;">      assetInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileManifest.info</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">pathAndInfo.info,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">fileManifest.info</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pathAndInfo.info;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 生成 chunk 代码</span></span>
<span class="line"><span style="color:#24292E;">    source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileManifest.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 输出文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">emitAsset</span><span style="color:#24292E;">(file, source, assetInfo);</span></span>
<span class="line"><span style="color:#24292E;">    chunk.files.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(file);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.chunkAsset.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(chunk, file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>主要流程有三部分：首先解析文件的信息，然后调用<code>render</code>生成代码，最后根据文件信息将生成的代码进行输出。<code>render</code>函数（<code>renderMain</code>和<code>renderChunk</code>）均在<code>webpack/lib/javascript/JavascriptModulesPlugin</code>插件中定义，其中<code>renderMain</code>相较于<code>renderChunk</code>更加复杂，因为它是作为入口文件，通常会加入一些<code>runtime</code>相关的执行函数等。</p><h2 id="rendermain" tabindex="-1">renderMain <a class="header-anchor" href="#rendermain" aria-label="Permalink to &quot;renderMain&quot;">​</a></h2><p>最终生成的<code>chunk</code>代码由各个部分组成，包括我们自己写的和引用的模块代码，程序执行的一些<code>runtime</code>代码、程序启动代码，以及一些其他注释、立即执行等辅助结构代码。</p><h3 id="modules代码" tabindex="-1">modules代码 <a class="header-anchor" href="#modules代码" aria-label="Permalink to &quot;modules代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkModules</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Template.</span><span style="color:#B392F0;">renderChunkModules</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkRenderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">  inlinedModules</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> allModules.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">inlinedModules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(m))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> allModules,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">renderModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, chunkRenderContext, hooks, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkModules</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Template.</span><span style="color:#6F42C1;">renderChunkModules</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  chunkRenderContext,</span></span>
<span class="line"><span style="color:#24292E;">  inlinedModules</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> allModules.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">m</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inlinedModules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(m))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> allModules,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">renderModule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, chunkRenderContext, hooks, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  prefix</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>调用<code>Template.renderChunkModules</code>函数遍历<code>chunk</code>中的所有<code>module</code>，然后将这些<code>module</code>形成键值对结构代码（实际上是一行一行代码组成的数组结构，但是执行时是对象结构），存放到<code>__webpack_modules__</code>变量当中。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_modules__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/moduleA.js&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;">/*!************************!*\\</span></span>
<span class="line"><span style="color:#6A737D;">  !*** ./src/moduleA.js ***!</span></span>
<span class="line"><span style="color:#6A737D;">  \\************************/</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> ((</span><span style="color:#FFAB70;">__unused_webpack_module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/* harmony export */ __webpack_require__.d(__webpack_exports__, {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony export */   </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">A</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: () =&gt; (/* binding */ A)</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony export */ });</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">./node_modules/react/index.js</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">);</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">console.log(react__WEBPACK_IMPORTED_MODULE_0__)</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">function A() {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  console.log(&#39;==&gt; module A&#39;);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack://study-webpack/./src/moduleA.js?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_modules__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/moduleA.js&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;">/*!************************!*\\</span></span>
<span class="line"><span style="color:#6A737D;">  !*** ./src/moduleA.js ***!</span></span>
<span class="line"><span style="color:#6A737D;">  \\************************/</span></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> ((</span><span style="color:#E36209;">__unused_webpack_module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/* harmony export */ __webpack_require__.d(__webpack_exports__, {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony export */   </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">A</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: () =&gt; (/* binding */ A)</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony export */ });</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">./node_modules/react/index.js</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">);</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">console.log(react__WEBPACK_IMPORTED_MODULE_0__)</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">function A() {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  console.log(&#39;==&gt; module A&#39;);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack://study-webpack/./src/moduleA.js?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">  });</span></span></code></pre></div><p>键为<code>module</code>的引用路径，值为<code>seal</code>后的代码。</p><h3 id="runtime代码" tabindex="-1">runtime代码 <a class="header-anchor" href="#runtime代码" aria-label="Permalink to &quot;runtime代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (runtimeModules.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  source.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrefixSource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      prefix,</span></span>
<span class="line"><span style="color:#E1E4E8;">      Template.</span><span style="color:#B392F0;">renderRuntimeModules</span><span style="color:#E1E4E8;">(runtimeModules, chunkRenderContext)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  source.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// runtimeRuntimeModules calls codeGeneration</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> runtimeModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.codeGeneratedModules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (runtimeModules.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  source.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrefixSource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      prefix,</span></span>
<span class="line"><span style="color:#24292E;">      Template.</span><span style="color:#6F42C1;">renderRuntimeModules</span><span style="color:#24292E;">(runtimeModules, chunkRenderContext)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  source.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// runtimeRuntimeModules calls codeGeneration</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> runtimeModules) {</span></span>
<span class="line"><span style="color:#24292E;">    compilation.codeGeneratedModules.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<code>seal</code>阶段生成代码构成中，会分析<code>runtimeRequirements</code>，也就是模块在转换代码时，依赖了哪些运行时的代码。比如<code>import</code>最后会替换成<code>__webpack_require__</code>函数，定义<code>__esModule</code>时需要<code>__webpack_require__.r</code>，这个时候就需要在拼接的代码中添加这些函数的定义。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* webpack/runtime/make namespace object */</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">  (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// define __esModule on exports</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">   __webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> Symbol </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Symbol.toStringTag) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">     Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, Symbol.toStringTag, { value: </span><span style="color:#9ECBFF;">&#39;Module&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__esModule&#39;</span><span style="color:#E1E4E8;">, { value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">   };</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;">  })();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* webpack/runtime/make namespace object */</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">  (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// define __esModule on exports</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">   __webpack_require__.</span><span style="color:#6F42C1;">r</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> Symbol </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Symbol.toStringTag) {</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">     Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, Symbol.toStringTag, { value: </span><span style="color:#032F62;">&#39;Module&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;__esModule&#39;</span><span style="color:#24292E;">, { value: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">   };</span></span>
<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#24292E;">  })();</span></span></code></pre></div><p>通过这两部分就可以组成能够正常运行的完整代码了。完后通过<code>emitFile</code>方法记录生成的代码和对应的文件信息。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">emitAsset</span><span style="color:#E1E4E8;">(file, source, assetInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.assets[file] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_setAssetInfo</span><span style="color:#E1E4E8;">(file, assetInfo, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">_setAssetInfo</span><span style="color:#E1E4E8;">(file, newInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newInfo </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.assetsInfo.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(file);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.assetsInfo.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(file, newInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">emitAsset</span><span style="color:#24292E;">(file, source, assetInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.assets[file] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_setAssetInfo</span><span style="color:#24292E;">(file, assetInfo, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">_setAssetInfo</span><span style="color:#24292E;">(file, newInfo) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newInfo </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.assetsInfo.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(file);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.assetsInfo.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(file, newInfo);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="emitassets" tabindex="-1">emitAssets <a class="header-anchor" href="#emitassets" aria-label="Permalink to &quot;emitAssets&quot;">​</a></h2><p>回到<code>Compiler</code>文件中，<code>seal</code>阶段执行接着会执行<code>emitAssets</code>方法，此时会调用<code>hooks.emit</code>，触发<code>emitFiles</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emitFiles</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">assets</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">getAssets</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.assets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">compilation.assets };</span></span>
<span class="line"><span style="color:#E1E4E8;">  asyncLib.</span><span style="color:#B392F0;">forEachLimit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    assets,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ({ </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;"> }, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emitFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">assets</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilation.</span><span style="color:#6F42C1;">getAssets</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  compilation.assets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">compilation.assets };</span></span>
<span class="line"><span style="color:#24292E;">  asyncLib.</span><span style="color:#6F42C1;">forEachLimit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    assets,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ({ </span><span style="color:#E36209;">name</span><span style="color:#24292E;">: </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, </span><span style="color:#E36209;">info</span><span style="color:#24292E;"> }, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>此时会获取<code>compilation</code>中需要生成文件的代码<code>assets</code>。然后遍历调用<code>writeOut</code>方法将代码写入到对应文件当中。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>emit</code>阶段主要包含两个过程：</p><p>一是遍历<code>chunk</code>，将<code>chunk</code>中<code>modules</code>的代码拼接，对于入口文件还会拼接<code>runtime</code>相关代码。最后形成<code>assets</code>和<code>assetsInfo</code>对象表示文件信息和代码信息。</p><p>二是通过<code>assets</code>和<code>assetsInfo</code>对象将代码写入到对应的文件当中。</p>`,31),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{F as __pageData,h as default};
