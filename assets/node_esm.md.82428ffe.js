import{_ as e,o,c as a,Q as t}from"./chunks/framework.c610f10c.js";const p=JSON.parse('{"title":"ESM 模块","description":"","frontmatter":{},"headers":[],"relativePath":"node/esm.md","filePath":"node/esm.md","lastUpdated":1695632838000}'),d={name:"node/esm.md"},r=t('<h1 id="esm-模块" tabindex="-1">ESM 模块 <a class="header-anchor" href="#esm-模块" aria-label="Permalink to &quot;ESM 模块&quot;">​</a></h1><h2 id="导入" tabindex="-1">导入 <a class="header-anchor" href="#导入" aria-label="Permalink to &quot;导入&quot;">​</a></h2><ul><li><code>file:URLs</code>：<code>import &#39;./foo.mjs?query=1&#39;</code>通过路径导入</li><li><code>data:imports</code>：<code>import &#39;data:text/javascript,console.log(&quot;hello!&quot;);&#39;;</code> 导入时指定数据类型（<code>assert</code> 处于试验阶段）</li><li><code>node:imports</code>：<code>import fs from &#39;node:fs/promises&#39;</code> 导入内置模块</li></ul><h2 id="import-meta" tabindex="-1">i<wbr>mport.meta <a class="header-anchor" href="#import-meta" aria-label="Permalink to &quot;i&lt;wbr&gt;mport.meta&quot;">​</a></h2><ul><li><code>url</code>：文件的绝对路径，包含文件名称。</li><li><code>resolve</code>：(试验阶段)，返回路径的<code>Promise</code>。</li></ul><h2 id="与-cjs-不同点" tabindex="-1">与 CJS 不同点 <a class="header-anchor" href="#与-cjs-不同点" aria-label="Permalink to &quot;与 CJS 不同点&quot;">​</a></h2><ul><li>没有 <code>require/exports/module.exports</code> 等内容，可以通过 <code>node:module</code> 里的 <code>createRequire</code> 来生成 <code>require</code>。</li><li>没有 <code>__filename/__dirname</code></li></ul><h2 id="试验阶段" tabindex="-1">试验阶段 <a class="header-anchor" href="#试验阶段" aria-label="Permalink to &quot;试验阶段&quot;">​</a></h2><ul><li>引入 <code>json/wasm</code> 模块</li><li><code>https:/http:</code> 模块</li><li><code>Loaders</code> 类似于 <code>webpack loader</code></li></ul>',9),c=[r];function i(l,s,n,m,h,u){return o(),a("div",null,c)}const f=e(d,[["render",i]]);export{p as __pageData,f as default};
