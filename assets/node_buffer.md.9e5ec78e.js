import{_ as e,o,c as d,a as r}from"./app.f42e61e3.js";const B=JSON.parse('{"title":"Buffer","description":"","frontmatter":{},"headers":[{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"node/buffer.md","lastUpdated":1684811674000}'),c={name:"node/buffer.md"},a=r('<h1 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-hidden="true">#</a></h1><ul><li><code>Buffer</code> 表示一个固定长度的字节序列。</li><li><code>Blob</code> 封装了可以在多个工作线程之间安全共享的不可变原始数据。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://www.cnblogs.com/penghuwan/p/12053775.html" target="_blank" rel="noreferrer">聊聊JS的二进制家族：Blob、ArrayBuffer和Buffer</a><ul><li><code>Blob</code> 用来支持文件操作，<code>File</code> 继承了所有 <code>Blob</code> 属性。</li><li><code>ArrayBuffer</code>：<code>FileReader</code> 读取文件并转化为其他数据结构。 <ul><li><code>FileReader.readAsText(Blob)</code>：将 <code>Blob</code> 转化为文本字符串</li><li><code>FileReader.readAsArrayBuffer(Blob)</code>： 将 <code>Blob</code> 转为 <code>ArrayBuffer</code> 格式数据</li><li><code>FileReader.readAsDataURL()</code>: 将 <code>Blob</code> 转化为<code>Base64</code> 格式的 <code>Data URL</code></li></ul></li><li><code>Buffer</code>：<code>node.js</code> 提供的对象，一般用于 <code>I/O</code> 操作。</li></ul></li></ul>',4),l=[a];function t(i,f,n,s,u,_){return o(),d("div",null,l)}const b=e(c,[["render",t]]);export{B as __pageData,b as default};
