import{_ as a,o as t,c as e,Q as l}from"./chunks/framework.92ce8a2a.js";const o="/assets/heap.80cce2f8.png",p=JSON.parse('{"title":"堆/最大堆/最小堆/优先队列","description":"","frontmatter":{},"headers":[],"relativePath":"data-structures/堆.md","filePath":"data-structures/堆.md","lastUpdated":1695719180000}'),r={name:"data-structures/堆.md"},i=l('<h1 id="堆-最大堆-最小堆-优先队列" tabindex="-1">堆/最大堆/最小堆/优先队列 <a class="header-anchor" href="#堆-最大堆-最小堆-优先队列" aria-label="Permalink to &quot;堆/最大堆/最小堆/优先队列&quot;">​</a></h1><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ol><li>堆是一棵完全二叉树。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。</li><li>任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（<strong>堆序性</strong>）。</li></ol><p><img src="'+o+'" alt="img"></p><ol start="3"><li>在数组中 <ul><li>根节点的位置总是在数组索引为 0 的位置</li><li>节点的父节点索引位置为 <code>Math.floor((i - 1) / 2)</code></li><li>节点的左孩子索引为 <code>2 * i + 1</code>，右孩子索引为为 <code>2 * i + 2</code></li></ul></li></ol><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><ul><li><strong>优先队列</strong>：将堆中节点的比较函数改为节点的优先级比较</li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><ul><li><strong>插入</strong>：插入时，追加到数组尾部，然后与父节点<code>Math.floor((i - 1) / 2)</code>比较，根据比较函数来决定是否交换位置，重复该步骤。</li><li><strong>查询</strong>：查询与数组的查询一致，依次遍历查询即可。</li><li><strong>删除</strong>： <ol><li>从堆末尾去除最后一个元素，替换要删除的元素。</li><li>判断要删除的元素有没有父元素，如果有父元素且当前元素比父元素大（小），会向上进行比较。</li><li>否则向下进行比较，比较是取左右节点中较大（小）者，然后判断是否需要交换位置</li></ol></li><li><strong>取数</strong>：每次都取头部元素，即最大（或最小）元素。取完后执行步骤类似于删除步骤，不过只需要向下进行比较即可。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/tuke_tuke/article/details/50357939" target="_blank" rel="noreferrer">堆的实现</a></li></ul>',11),s=[i];function n(c,d,h,_,u,f){return t(),e("div",null,s)}const m=a(r,[["render",n]]);export{p as __pageData,m as default};
