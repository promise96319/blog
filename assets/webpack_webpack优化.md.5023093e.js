import{_ as e,o as a,c as l,a as r}from"./app.9fd1379c.js";const k=JSON.parse('{"title":"webpack 优化","description":"","frontmatter":{},"headers":[{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[{"level":3,"title":"cache-loader","slug":"cache-loader","link":"#cache-loader","children":[]},{"level":3,"title":"babel-loader","slug":"babel-loader","link":"#babel-loader","children":[]}]},{"level":2,"title":"多进程打包","slug":"多进程打包","link":"#多进程打包","children":[{"level":3,"title":"tread-loader","slug":"tread-loader","link":"#tread-loader","children":[]}]},{"level":2,"title":"文件查找过程(resolve)","slug":"文件查找过程-resolve","link":"#文件查找过程-resolve","children":[]},{"level":2,"title":"打包体积","slug":"打包体积","link":"#打包体积","children":[{"level":3,"title":"webpack-bundle-analyzer","slug":"webpack-bundle-analyzer","link":"#webpack-bundle-analyzer","children":[]},{"level":3,"title":"css","slug":"css","link":"#css","children":[]},{"level":3,"title":"img","slug":"img","link":"#img","children":[]},{"level":3,"title":"js","slug":"js","link":"#js","children":[]},{"level":3,"title":"externals","slug":"externals","link":"#externals","children":[]},{"level":3,"title":"split-chunks-plugin","slug":"split-chunks-plugin","link":"#split-chunks-plugin","children":[]},{"level":3,"title":"tree shaking","slug":"tree-shaking","link":"#tree-shaking","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"relativePath":"webpack/webpack优化.md","lastUpdated":1685031066000}'),i={name:"webpack/webpack优化.md"},d=r('<h1 id="webpack-优化" tabindex="-1">webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-hidden="true">#</a></h1><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-hidden="true">#</a></h2><h3 id="cache-loader" tabindex="-1"><a href="https://webpack.docschina.org/loaders/cache-loader/" target="_blank" rel="noreferrer">cache-loader</a> <a class="header-anchor" href="#cache-loader" aria-hidden="true">#</a></h3><ul><li>cache-loader 允许缓存 loaders 到（默认）磁盘或数据库(与babel-loader相似)。</li><li>在一些性能开销较大的 loader 之前添加 cache-loader，以便将结果缓存到磁盘里。</li></ul><h3 id="babel-loader" tabindex="-1"><a href="https://webpack.docschina.org/loaders/babel-loader/" target="_blank" rel="noreferrer">babel-loader</a> <a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a></h3><ul><li>cacheDirectory：用指定的目录将来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程(recompilation process)</li><li>cacheCompression：默认值为 true。当设置此值时，会使用 Gzip 压缩每个 Babel transform 输出。</li><li>Babel 在每个文件都插入了辅助代码，使代码体积过大，可以引入 Babel runtime 作为一个独立模块，来避免重复引入。</li></ul><h2 id="多进程打包" tabindex="-1">多进程打包 <a class="header-anchor" href="#多进程打包" aria-hidden="true">#</a></h2><h3 id="tread-loader" tabindex="-1"><a href="https://webpack.docschina.org/loaders/thread-loader/#root" target="_blank" rel="noreferrer">tread-loader</a> <a class="header-anchor" href="#tread-loader" aria-hidden="true">#</a></h3><ul><li>使用时，需将此 loader 放置在其他 loader 之前。放置在此 loader 之后的 loader 会在一个独立的 worker 池中运行。</li></ul><h2 id="文件查找过程-resolve" tabindex="-1">文件查找过程(resolve) <a class="header-anchor" href="#文件查找过程-resolve" aria-hidden="true">#</a></h2><p>减少文件查找过程（优化：make阶段 =&gt; factorizeModule阶段 =&gt; resolve 阶段）：</p><ul><li>extensions</li><li>modules</li><li>alias</li><li>...</li></ul><h2 id="打包体积" tabindex="-1">打包体积 <a class="header-anchor" href="#打包体积" aria-hidden="true">#</a></h2><h3 id="webpack-bundle-analyzer" tabindex="-1">webpack-bundle-analyzer <a class="header-anchor" href="#webpack-bundle-analyzer" aria-hidden="true">#</a></h3><ul><li>进行打包体积分析</li></ul><h3 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-hidden="true">#</a></h3><ul><li>optimize-css-assets-webpack-plugin 进行 css 压缩。</li><li>css-minimizer-webpack-plugin 优化、压缩 CSS。</li><li>mini-css-extract-plugin 将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载。</li></ul><h3 id="img" tabindex="-1">img <a class="header-anchor" href="#img" aria-hidden="true">#</a></h3><ul><li>image-webpack-loader 进行图片压缩</li></ul><h3 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-hidden="true">#</a></h3><ul><li>terser-webpack-plugin 压缩 js</li><li>compression-webpack-plugin gzip压缩</li></ul><h3 id="externals" tabindex="-1">externals <a class="header-anchor" href="#externals" aria-hidden="true">#</a></h3><ul><li>将一些包分离出去，用CDN的方式引入</li></ul><h3 id="split-chunks-plugin" tabindex="-1">split-chunks-plugin <a class="header-anchor" href="#split-chunks-plugin" aria-hidden="true">#</a></h3><ul><li>对公共包进行提取</li><li>对包进行拆分合并</li></ul><h3 id="tree-shaking" tabindex="-1">tree shaking <a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a></h3><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h2><ul><li>使用动态导入进行分包，按需加载。</li><li>将比较大的静态资源上传到 CDN。</li></ul>',28),n=[d];function s(h,t,c,o,u,b){return a(),l("div",null,n)}const g=e(i,[["render",s]]);export{k as __pageData,g as default};
