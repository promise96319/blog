import{_ as s,o as a,c as l,Q as o}from"./chunks/framework.b96c6c14.js";const _=JSON.parse('{"title":"正则","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/正则.md","filePath":"javascript/正则.md","lastUpdated":1698927986000}'),e={name:"javascript/正则.md"},n=o('<h1 id="正则" tabindex="-1">正则 <a class="header-anchor" href="#正则" aria-label="Permalink to &quot;正则&quot;">​</a></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noreferrer">MDN 正则表达式</a></p><h2 id="高级匹配语法" tabindex="-1">高级匹配语法 <a class="header-anchor" href="#高级匹配语法" aria-label="Permalink to &quot;高级匹配语法&quot;">​</a></h2><ul><li><code>(?:x)</code>：匹配 x 但是不记住匹配项。</li><li><code>x(?=y)</code>：匹配 x 仅仅当 x 后面跟着 y。</li><li><code>x(?!y)</code>：匹配 x 仅仅当 x 后面不跟着 y。</li><li><code>(?&lt;=y)x</code>：匹配 x 仅仅当 x 前面是 y。</li><li><code>(?&lt;!y)x</code>：匹配 x 仅仅当 x 前面不是 y。</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><ul><li>数字格式化：</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;123456789.12345678&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;!</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(?=</span><span style="color:#F97583;">\\B</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{3}</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">+\\b</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;123456789.12345678&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(?&lt;!</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(?=</span><span style="color:#D73A49;">\\B</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{3}</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">+\\b</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div>',7),p=[n];function t(r,c,i,d,y,F){return a(),l("div",null,p)}const E=s(e,[["render",t]]);export{_ as __pageData,E as default};
