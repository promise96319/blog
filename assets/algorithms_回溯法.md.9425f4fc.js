import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c610f10c.js";const A=JSON.parse('{"title":"回溯法","description":"","frontmatter":{},"headers":[],"relativePath":"algorithms/回溯法.md","filePath":"algorithms/回溯法.md","lastUpdated":1695631559000}'),p={name:"algorithms/回溯法.md"},o=l(`<h1 id="回溯法" tabindex="-1">回溯法 <a class="header-anchor" href="#回溯法" aria-label="Permalink to &quot;回溯法&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">八皇后问题</p><p>现在有一个 n x n 的跳棋棋盘，有n个棋子被放置在棋盘上，使得每行，每列，每条对角线（包括两条主对角线的所有对角线）上都至多有一个棋子。</p></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueenPosition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rowIndex</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.rowIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rowIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.columnIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> columnIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">leftDiagonal</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.rowIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.columnIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rightDiagonal</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.rowIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.columnIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">rowIndex</span><span style="color:#9ECBFF;">},\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">columnIndex</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSafe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">queensPositions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">currentPosition</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历已有的queue</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> queenIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; queenIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> queensPositions.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; queenIndex</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prevPosition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queensPositions[queenIndex]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否是横列/纵列/斜列</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (prevPosition </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (prevPosition.rowIndex </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> currentPosition.rowIndex </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> prevPosition.columnIndex  </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> currentPosition.columnIndex </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> prevPosition.leftDiagonal </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> currentPosition.leftDiagonal </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> prevPosition.rightDiagonal </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> currentPosition.rightDiagonal)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(prevPosition, currentPosition);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nQueensRecursive</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">solutions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">previousQueensPositions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">queensCount</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rowIndex</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// clone position 数组，否则存在引用关系</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queensPositions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">previousQueensPositions].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">queenPosition</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">queenPosition </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> queenPosition </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueenPosition</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      queenPosition.rowIndex,</span></span>
<span class="line"><span style="color:#E1E4E8;">      queenPosition.columnIndex,</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断position是否已经满足题意要求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rowIndex </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> queensCount) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 说明 queensPositions 已经有了 queensCount 个，符合要求</span></span>
<span class="line"><span style="color:#E1E4E8;">    solutions.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(queensPositions)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历每一列</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> columnIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; columnIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> queensCount; columnIndex</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">currentPosition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueenPosition</span><span style="color:#E1E4E8;">(rowIndex, columnIndex)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断当前点是否符合要求</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isSafe</span><span style="color:#E1E4E8;">(queensPositions, currentPosition)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 加入到行中</span></span>
<span class="line"><span style="color:#E1E4E8;">      queensPositions[rowIndex] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentPosition</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 遍历下一列</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">nQueensRecursive</span><span style="color:#E1E4E8;">(solutions, queensPositions, queensCount, rowIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 遍历完后将这个数据移除，回到本行下一条数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      queensPositions[rowIndex] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nQueens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">queensCount</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queensPositions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(queensCount).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">solutions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从第 0 行开始</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">nQueensRecursive</span><span style="color:#E1E4E8;">(solutions, queensPositions, queensCount, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> solutions</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueenPosition</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">rowIndex</span><span style="color:#24292E;">, </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rowIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rowIndex</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.columnIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> columnIndex</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">leftDiagonal</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rowIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.columnIndex</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rightDiagonal</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rowIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.columnIndex</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">description</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">rowIndex</span><span style="color:#032F62;">},\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">columnIndex</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSafe</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">queensPositions</span><span style="color:#24292E;">, </span><span style="color:#E36209;">currentPosition</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历已有的queue</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> queenIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; queenIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> queensPositions.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; queenIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prevPosition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queensPositions[queenIndex]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否是横列/纵列/斜列</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (prevPosition </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (prevPosition.rowIndex </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> currentPosition.rowIndex </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> prevPosition.columnIndex  </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> currentPosition.columnIndex </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> prevPosition.leftDiagonal </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> currentPosition.leftDiagonal </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> prevPosition.rightDiagonal </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> currentPosition.rightDiagonal)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// console.log(prevPosition, currentPosition);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nQueensRecursive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">solutions</span><span style="color:#24292E;">, </span><span style="color:#E36209;">previousQueensPositions</span><span style="color:#24292E;">, </span><span style="color:#E36209;">queensCount</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rowIndex</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// clone position 数组，否则存在引用关系</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">queensPositions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">previousQueensPositions].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">queenPosition</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queenPosition </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> queenPosition </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueenPosition</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      queenPosition.rowIndex,</span></span>
<span class="line"><span style="color:#24292E;">      queenPosition.columnIndex,</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断position是否已经满足题意要求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rowIndex </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> queensCount) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 说明 queensPositions 已经有了 queensCount 个，符合要求</span></span>
<span class="line"><span style="color:#24292E;">    solutions.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(queensPositions)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历每一列</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> columnIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; columnIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> queensCount; columnIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">currentPosition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueenPosition</span><span style="color:#24292E;">(rowIndex, columnIndex)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断当前点是否符合要求</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isSafe</span><span style="color:#24292E;">(queensPositions, currentPosition)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 加入到行中</span></span>
<span class="line"><span style="color:#24292E;">      queensPositions[rowIndex] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentPosition</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 遍历下一列</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">nQueensRecursive</span><span style="color:#24292E;">(solutions, queensPositions, queensCount, rowIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 遍历完后将这个数据移除，回到本行下一条数据</span></span>
<span class="line"><span style="color:#24292E;">      queensPositions[rowIndex] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nQueens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">queensCount</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">queensPositions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(queensCount).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">solutions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从第 0 行开始</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">nQueensRecursive</span><span style="color:#24292E;">(solutions, queensPositions, queensCount, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> solutions</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">solutions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nQueens</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">solutions.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">queuePositions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`==== result \${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} ====\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  queuePositions.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">position</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(position.description)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ==== result 0 ====</span></span>
<span class="line"><span style="color:#6A737D;">// 0,1</span></span>
<span class="line"><span style="color:#6A737D;">// 1,3</span></span>
<span class="line"><span style="color:#6A737D;">// 2,0</span></span>
<span class="line"><span style="color:#6A737D;">// 3,2</span></span>
<span class="line"><span style="color:#6A737D;">// ==== result 1 ====</span></span>
<span class="line"><span style="color:#6A737D;">// 0,2</span></span>
<span class="line"><span style="color:#6A737D;">// 1,0</span></span>
<span class="line"><span style="color:#6A737D;">// 2,3</span></span>
<span class="line"><span style="color:#6A737D;">// 3,1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">solutions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nQueens</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">solutions.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">queuePositions</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`==== result \${</span><span style="color:#24292E;">index</span><span style="color:#032F62;">} ====\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  queuePositions.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">position</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(position.description)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ==== result 0 ====</span></span>
<span class="line"><span style="color:#6A737D;">// 0,1</span></span>
<span class="line"><span style="color:#6A737D;">// 1,3</span></span>
<span class="line"><span style="color:#6A737D;">// 2,0</span></span>
<span class="line"><span style="color:#6A737D;">// 3,2</span></span>
<span class="line"><span style="color:#6A737D;">// ==== result 1 ====</span></span>
<span class="line"><span style="color:#6A737D;">// 0,2</span></span>
<span class="line"><span style="color:#6A737D;">// 1,0</span></span>
<span class="line"><span style="color:#6A737D;">// 2,3</span></span>
<span class="line"><span style="color:#6A737D;">// 3,1</span></span></code></pre></div>`,4),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const D=s(p,[["render",c]]);export{A as __pageData,D as default};
