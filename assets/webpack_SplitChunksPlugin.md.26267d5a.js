import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.c610f10c.js";const h=JSON.parse('{"title":"SplitChunksPlugin 原理","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/SplitChunksPlugin.md","filePath":"webpack/SplitChunksPlugin.md","lastUpdated":1695632838000}'),l={name:"webpack/SplitChunksPlugin.md"},o=p(`<h1 id="splitchunksplugin-原理" tabindex="-1">SplitChunksPlugin 原理 <a class="header-anchor" href="#splitchunksplugin-原理" aria-label="Permalink to &quot;SplitChunksPlugin 原理&quot;">​</a></h1><h2 id="配置文档" tabindex="-1">配置文档 <a class="header-anchor" href="#配置文档" aria-label="Permalink to &quot;配置文档&quot;">​</a></h2><ul><li><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noreferrer">webpack SplitChunksPlugin 配置文档</a></li></ul><h2 id="默认cachegroups" tabindex="-1">默认cacheGroups <a class="header-anchor" href="#默认cachegroups" aria-label="Permalink to &quot;默认cacheGroups&quot;">​</a></h2><p>在<code>webpack/lib/webpack.js</code>文件中，<code>createCompiler</code>时调用<code>applyWebpackOptionsDefaults</code>函数。该函数会为<code>cacheGroups</code>设置两个默认值，这两个默认值对应<code>webpack</code>的两个默认分包原则。其中<code>defaultVendors</code>是应用于<code>node_modules</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">(cacheGroups, </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">  idHint: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span>
<span class="line"><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">(cacheGroups, </span><span style="color:#9ECBFF;">&quot;defaultVendors&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">  idHint: </span><span style="color:#9ECBFF;">&quot;vendors&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  test: </span><span style="color:#79B8FF;">NODE_MODULES_REGEXP</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">F</span><span style="color:#24292E;">(cacheGroups, </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  idHint: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  reuseExistingChunk: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  minChunks: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  priority: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span>
<span class="line"><span style="color:#6F42C1;">F</span><span style="color:#24292E;">(cacheGroups, </span><span style="color:#032F62;">&quot;defaultVendors&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  idHint: </span><span style="color:#032F62;">&quot;vendors&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  reuseExistingChunk: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  test: </span><span style="color:#005CC5;">NODE_MODULES_REGEXP</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  priority: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><h2 id="触发时机" tabindex="-1">触发时机 <a class="header-anchor" href="#触发时机" aria-label="Permalink to &quot;触发时机&quot;">​</a></h2><p>在<code>Compilation.js</code>文件中，调用<code>seal</code>方法时，当调用<code>buildChunkGraph</code>之后，就建立起了<code>modules</code>和<code>chunks</code>的关系，此时会开始触发<code>hooks.optimizeChunks</code>钩子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.optimizeChunks.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunkGroups)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* empty */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.optimizeChunks.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunks, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunkGroups)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* empty */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>hooks.optimizeChunks</code>钩子触发以下几个插件：</p><ul><li><code>RemoveEmptyChunksPlugin</code>：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 移除不包含 runtime 的空 chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph.</span><span style="color:#B392F0;">getNumberOfChunkModules</span><span style="color:#E1E4E8;">(chunk) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.</span><span style="color:#B392F0;">hasRuntime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph.</span><span style="color:#B392F0;">getNumberOfEntryModules</span><span style="color:#E1E4E8;">(chunk) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.chunkGraph.</span><span style="color:#B392F0;">disconnectChunk</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.chunks.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> chunks) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 移除不包含 runtime 的空 chunk</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph.</span><span style="color:#6F42C1;">getNumberOfChunkModules</span><span style="color:#24292E;">(chunk) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">chunk.</span><span style="color:#6F42C1;">hasRuntime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph.</span><span style="color:#6F42C1;">getNumberOfEntryModules</span><span style="color:#24292E;">(chunk) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    compilation.chunkGraph.</span><span style="color:#6F42C1;">disconnectChunk</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">    compilation.chunks.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>MergeDuplicateChunksPlugin</code>：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 合并”重复“的chunk。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkGraph.</span><span style="color:#B392F0;">canChunksBeIntegrated</span><span style="color:#E1E4E8;">(chunk, otherChunk)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGraph.</span><span style="color:#B392F0;">integrateChunks</span><span style="color:#E1E4E8;">(chunk, otherChunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.chunks.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(otherChunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 合并”重复“的chunk。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunkGraph.</span><span style="color:#6F42C1;">canChunksBeIntegrated</span><span style="color:#24292E;">(chunk, otherChunk)) {</span></span>
<span class="line"><span style="color:#24292E;">  chunkGraph.</span><span style="color:#6F42C1;">integrateChunks</span><span style="color:#24292E;">(chunk, otherChunk);</span></span>
<span class="line"><span style="color:#24292E;">  compilation.chunks.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(otherChunk);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>SplitChunksPlugin</code>：进行分包。</li></ul><h2 id="splitchunksplugin" tabindex="-1">SplitChunksPlugin <a class="header-anchor" href="#splitchunksplugin" aria-label="Permalink to &quot;SplitChunksPlugin&quot;">​</a></h2><p><code>SplitChunksPlugin</code>主要有以下几个作用：</p><ul><li>提取公共代码：比如不同<code>entry</code>中引入了相同的模块，此时可以提取出来。</li><li>拆分过大的<code>js</code>文件：比如从主模块中将<code>node_modules</code>中的代码单独拎出来。</li><li>合并零散的<code>js</code>文件。</li></ul><p>这几个功能主要都是由<code>cacheGroups</code>实现，在初始化阶段，已经定义好了两个默认的<code>cacheGroups</code>。</p><p>在<code>webpack/lib/optimize</code>中找到<code>SplitChunksPlugin</code>插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.optimizeChunks.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;SplitChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    stage: </span><span style="color:#79B8FF;">STAGE_ADVANCED</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.optimizeChunks.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;SplitChunksPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    stage: </span><span style="color:#005CC5;">STAGE_ADVANCED</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">chunks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>该插件回调函数会在<code>hooks.optimizeChunks</code>钩子触发时执行：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Compilation.js 文件中触发</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.optimizeChunks.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunkGroups)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* empty */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Compilation.js 文件中触发</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.optimizeChunks.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunks, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.chunkGroups)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* empty */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时已经构建好了<code>modules</code>和<code>chunks</code>之间的关系，但是还没有为<code>chunks</code>生成具体的代码。</p><h2 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h2><p>假设有两个入口文件<code>index1.js</code>和<code>index2.js</code>，他们同时引入了<code>moduleA.js</code>文件，<code>webpack</code>的配置如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">splitChunks</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">chunks</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">common</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">minSize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">minChunks</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">splitChunks</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">chunks</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;all&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cacheGroups</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">common</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">minSize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">minChunks</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="匹配cachegroups" tabindex="-1">匹配cacheGroups <a class="header-anchor" href="#匹配cachegroups" aria-label="Permalink to &quot;匹配cacheGroups&quot;">​</a></h2><p><code>SplitChunksPlugin</code>首先会遍历所有<code>modules</code>，然后根据定义好<code>cacheGroups</code>的规则进行匹配：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cacheGroups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.</span><span style="color:#B392F0;">getCacheGroups</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(cacheGroups) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> cacheGroups.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cacheGroupSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> cacheGroups) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cacheGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_getCacheGroup</span><span style="color:#E1E4E8;">(cacheGroupSource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> compilation.modules) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cacheGroups </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.</span><span style="color:#6F42C1;">getCacheGroups</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(cacheGroups) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> cacheGroups.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cacheGroupSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> cacheGroups) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cacheGroup</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_getCacheGroup</span><span style="color:#24292E;">(cacheGroupSource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>并且遍历所有的<code>cacheGroups</code>，进行下一步处理：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 获取 module 关联的 chunks</span></span>
<span class="line"><span style="color:#6A737D;">// 对于只有一个 chunk 使用该 module 时，通常只返回 [chunk]</span></span>
<span class="line"><span style="color:#6A737D;">// 对于多个chunk 使用该 module 时，通常返回 [new Set(chunk1, chunk2), chunk1, chunk2]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">combs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cacheGroup.usedExports</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCombsByUsedExports</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCombs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkCombination</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> combs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果是 Chunk，说明只有一个 chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunkCombination </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chunkCombination.size;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 如果chunk的使用数小于minChunks，那么不符合要求，直接退出</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (count </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cacheGroup.minChunks) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">selectedChunks</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">selectedChunksKey</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getSelectedChunks</span><span style="color:#E1E4E8;">(chunkCombination, cacheGroup.chunksFilter);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 3. 将结果记录到chunksInfoMap中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addModuleToChunksInfoMap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheGroup,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheGroupIndex,</span></span>
<span class="line"><span style="color:#E1E4E8;">    selectedChunks,</span></span>
<span class="line"><span style="color:#E1E4E8;">    selectedChunksKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 获取 module 关联的 chunks</span></span>
<span class="line"><span style="color:#6A737D;">// 对于只有一个 chunk 使用该 module 时，通常只返回 [chunk]</span></span>
<span class="line"><span style="color:#6A737D;">// 对于多个chunk 使用该 module 时，通常返回 [new Set(chunk1, chunk2), chunk1, chunk2]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">combs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cacheGroup.usedExports</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCombsByUsedExports</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCombs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkCombination</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> combs) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果是 Chunk，说明只有一个 chunk</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        chunkCombination </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> chunkCombination.size;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 如果chunk的使用数小于minChunks，那么不符合要求，直接退出</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cacheGroup.minChunks) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">chunks</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">selectedChunks</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">selectedChunksKey</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getSelectedChunks</span><span style="color:#24292E;">(chunkCombination, cacheGroup.chunksFilter);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 3. 将结果记录到chunksInfoMap中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">addModuleToChunksInfoMap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    cacheGroup,</span></span>
<span class="line"><span style="color:#24292E;">    cacheGroupIndex,</span></span>
<span class="line"><span style="color:#24292E;">    selectedChunks,</span></span>
<span class="line"><span style="color:#24292E;">    selectedChunksKey,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>chunksInfoMap</code>结构如下</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">chunksInfoMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用到的 chunks 形成的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">  key,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 同一 cacheGroup 匹配到的 module 且在同样的 chunks 中使用时</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将这些 module 存于此处</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      compareModulesByIdentifier</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheGroup,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheGroupIndex,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对象形式，记录各种不同的资源的大小，比如：{ javascript: 200 }</span></span>
<span class="line"><span style="color:#E1E4E8;">    sizes: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 包含的 chunks</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    reuseableChunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunksKeys: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">chunksInfoMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用到的 chunks 形成的 key</span></span>
<span class="line"><span style="color:#24292E;">  key,</span></span>
<span class="line"><span style="color:#24292E;">  (info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 同一 cacheGroup 匹配到的 module 且在同样的 chunks 中使用时</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将这些 module 存于此处</span></span>
<span class="line"><span style="color:#24292E;">    modules: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SortableSet</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      compareModulesByIdentifier</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">    cacheGroup,</span></span>
<span class="line"><span style="color:#24292E;">    cacheGroupIndex,</span></span>
<span class="line"><span style="color:#24292E;">    name,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对象形式，记录各种不同的资源的大小，比如：{ javascript: 200 }</span></span>
<span class="line"><span style="color:#24292E;">    sizes: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 包含的 chunks</span></span>
<span class="line"><span style="color:#24292E;">    chunks: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    reuseableChunks: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    chunksKeys: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>这样所有<code>modules</code>经过与<code>cacheGroup</code>匹配后，形成的<code>chunksInfoMap</code>就能表示每个<code>cacheGroup</code>涉及到了哪些<code>module</code>，而这些<code>module</code>又在哪些<code>chunks</code>里被用到。</p><h2 id="过滤chunksinfomap" tabindex="-1">过滤chunksInfoMap <a class="header-anchor" href="#过滤chunksinfomap" aria-label="Permalink to &quot;过滤chunksInfoMap&quot;">​</a></h2><p>得到<code>chunksInfoMap</code>后，会先对其进行过滤：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">removeMinSizeViolatingModules</span><span style="color:#E1E4E8;">(info)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">checkMinSizeReduction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      info.sizes,</span></span>
<span class="line"><span style="color:#E1E4E8;">      info.cacheGroup.minSizeReduction,</span></span>
<span class="line"><span style="color:#E1E4E8;">      info.chunks.size</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">key</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">info</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">removeMinSizeViolatingModules</span><span style="color:#24292E;">(info)) {</span></span>
<span class="line"><span style="color:#24292E;">    chunksInfoMap.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">checkMinSizeReduction</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      info.sizes,</span></span>
<span class="line"><span style="color:#24292E;">      info.cacheGroup.minSizeReduction,</span></span>
<span class="line"><span style="color:#24292E;">      info.chunks.size</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    chunksInfoMap.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>chunksInfoMap</code>实际上对应于待分包的<code>chunk</code>。通过<code>removeMinSizeViolatingModules</code>方法将<code>chunks.size</code>和<code>minSize</code>对比，如果小于<code>minSize</code>，那么将不符合分包的规定，因此将其剔除掉。</p><h2 id="生成新chunk" tabindex="-1">生成新chunk <a class="header-anchor" href="#生成新chunk" aria-label="Permalink to &quot;生成新chunk&quot;">​</a></h2><p>遍历<code>chunksInfoMap</code>，生成新的<code>chunk</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (chunksInfoMap.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestEntryKey;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestEntry;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      bestEntry </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">compareEntries</span><span style="color:#E1E4E8;">(bestEntry, info) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      bestEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info;</span></span>
<span class="line"><span style="color:#E1E4E8;">      bestEntryKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bestEntry;</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(bestEntryKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (chunksInfoMap.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bestEntryKey;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bestEntry;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pair[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">info</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pair[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      bestEntry </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">compareEntries</span><span style="color:#24292E;">(bestEntry, info) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      bestEntry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info;</span></span>
<span class="line"><span style="color:#24292E;">      bestEntryKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bestEntry;</span></span>
<span class="line"><span style="color:#24292E;">  chunksInfoMap.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(bestEntryKey);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先会通过<code>compareEntries</code>方法对比优先级，看哪个<code>cacheGroup</code>对应的<code>chunk</code>优先生成。经过一系列的处理后，最后会生成一个空<code>chunk</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newChunk </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  newChunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">addChunk</span><span style="color:#E1E4E8;">(chunkName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newChunk </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  newChunk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilation.</span><span style="color:#6F42C1;">addChunk</span><span style="color:#24292E;">(chunkName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后对于<code>cacheGroups</code>的<code>module</code>涉及到的其他<code>chunks</code>(也就是<code>usedChunks</code>)，调用<code>split</code>方法进行分包：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunk.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(newChunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Chunk 的 split 方法</span></span>
<span class="line"><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(newChunk) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对于每个使用到 chunk 的地方，newChunk 也应该被使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGroup.</span><span style="color:#B392F0;">insertChunk</span><span style="color:#E1E4E8;">(newChunk, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    newChunk.</span><span style="color:#B392F0;">addGroup</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idHint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.idNameHints) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    newChunk.idNameHints.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(idHint);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  newChunk.runtime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeRuntime</span><span style="color:#E1E4E8;">(newChunk.runtime, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.runtime);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> usedChunks) {</span></span>
<span class="line"><span style="color:#24292E;">  chunk.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(newChunk);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Chunk 的 split 方法</span></span>
<span class="line"><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(newChunk) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对于每个使用到 chunk 的地方，newChunk 也应该被使用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkGroup</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._groups) {</span></span>
<span class="line"><span style="color:#24292E;">    chunkGroup.</span><span style="color:#6F42C1;">insertChunk</span><span style="color:#24292E;">(newChunk, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    newChunk.</span><span style="color:#6F42C1;">addGroup</span><span style="color:#24292E;">(chunkGroup);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idHint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.idNameHints) {</span></span>
<span class="line"><span style="color:#24292E;">    newChunk.idNameHints.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(idHint);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  newChunk.runtime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeRuntime</span><span style="color:#24292E;">(newChunk.runtime, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.runtime);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对<code>newChunk</code>进行处理，其中比较重要的是<code>modules</code>和<code>usedChunks</code>的处理：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// usedChunks 里面需要移除所有已经分包出去的 modules</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkGraph.</span><span style="color:#B392F0;">disconnectChunkAndModule</span><span style="color:#E1E4E8;">(chunk, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果与后续处理的 chunks 存在相同 chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isOverlap</span><span style="color:#E1E4E8;">(info.chunks, usedChunks)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> updated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果后续处理的 modules 包含此 module，那么需要删除掉，后续不再对该module分包</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        info.modules.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getSourceTypes</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          info.sizes[key] </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        updated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (updated) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">removeMinSizeViolatingModules</span><span style="color:#E1E4E8;">(info) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">checkMinSizeReduction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          info.sizes,</span></span>
<span class="line"><span style="color:#E1E4E8;">          info.cacheGroup.minSizeReduction,</span></span>
<span class="line"><span style="color:#E1E4E8;">          info.chunks.size</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// usedChunks 里面需要移除所有已经分包出去的 modules</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> item.modules) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> usedChunks) {</span></span>
<span class="line"><span style="color:#24292E;">    chunkGraph.</span><span style="color:#6F42C1;">disconnectChunkAndModule</span><span style="color:#24292E;">(chunk, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">key</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">info</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> chunksInfoMap) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果与后续处理的 chunks 存在相同 chunk</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isOverlap</span><span style="color:#24292E;">(info.chunks, usedChunks)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> updated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> item.modules) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果后续处理的 modules 包含此 module，那么需要删除掉，后续不再对该module分包</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.modules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        info.modules.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getSourceTypes</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">          info.sizes[key] </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        updated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (updated) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.modules.size </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        chunksInfoMap.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeMinSizeViolatingModules</span><span style="color:#24292E;">(info) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">checkMinSizeReduction</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          info.sizes,</span></span>
<span class="line"><span style="color:#24292E;">          info.cacheGroup.minSizeReduction,</span></span>
<span class="line"><span style="color:#24292E;">          info.chunks.size</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        chunksInfoMap.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，对于每个<code>cacheGroup</code>就已经生成了相应的<code>chunk</code>。</p><h2 id="处理size" tabindex="-1">处理size <a class="header-anchor" href="#处理size" aria-label="Permalink to &quot;处理size&quot;">​</a></h2><p>得到<code>chunks</code>后还会进一步对<code>chunk</code>处理，如<code>chunk</code>过大时，会再次进行分包。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 将 chunk 再次细分</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">results</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deterministicGroupingForModules</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将 chunk 再次细分</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">results</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deterministicGroupingForModules</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>SplitChunksPlugin</code>在<code>hooks.optimizeChunks</code>钩子触发时执行，此时<code>modules</code>和<code>chunks</code>的关系已建立，但还未进行<code>code generate</code>。</p><p><code>SplitChunksPlugin</code>主要用于提取公共代码，拆分或合并代码等，其核心原理如下：</p><ol><li>通过<code>cacheGroups</code>匹配<code>modules</code>，生成<code>chunksInfoMap</code>。确定每个<code>cacheGroups</code>对应哪些<code>modules</code>，以及这些<code>modules</code>所在的<code>chunks</code>。</li><li>遍历<code>chunksInfoMap</code>，根据<code>cacheGroups</code>里的<code>modules</code>生成新<code>chunk</code>。断开这些<code>modules</code>和原有的<code>chunks</code>的关系，将新<code>chunk</code>加入到原有<code>chunks</code>的<code>chunkGroups</code>当中。</li><li>对分包后的<code>chunks</code>再次进行处理，如果体积过大就会进行再次分包。</li></ol>`,56),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const k=s(l,[["render",c]]);export{h as __pageData,k as default};
