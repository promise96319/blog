import{_ as l,c as e,o as i,a}from"./app.354072b3.js";const f=JSON.parse('{"title":"进程与线程","description":"","frontmatter":{},"headers":[{"level":2,"title":"进程","slug":"进程","link":"#进程","children":[{"level":3,"title":"进程","slug":"进程-1","link":"#进程-1","children":[]},{"level":3,"title":"进程的创建","slug":"进程的创建","link":"#进程的创建","children":[]},{"level":3,"title":"进程的终止","slug":"进程的终止","link":"#进程的终止","children":[]},{"level":3,"title":"进程的层次结构","slug":"进程的层次结构","link":"#进程的层次结构","children":[]},{"level":3,"title":"进程的状态","slug":"进程的状态","link":"#进程的状态","children":[]},{"level":3,"title":"进程的实现","slug":"进程的实现","link":"#进程的实现","children":[]}]},{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[]},{"level":2,"title":"进程间通信（IPC）","slug":"进程间通信-ipc","link":"#进程间通信-ipc","children":[{"level":3,"title":"竞争条件","slug":"竞争条件","link":"#竞争条件","children":[]},{"level":3,"title":"临界区","slug":"临界区","link":"#临界区","children":[]},{"level":3,"title":"忙等待的互斥","slug":"忙等待的互斥","link":"#忙等待的互斥","children":[]},{"level":3,"title":"睡眠与唤醒","slug":"睡眠与唤醒","link":"#睡眠与唤醒","children":[]},{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":3,"title":"互斥量","slug":"互斥量","link":"#互斥量","children":[]},{"level":3,"title":"管程","slug":"管程","link":"#管程","children":[]},{"level":3,"title":"消息传递","slug":"消息传递","link":"#消息传递","children":[]}]},{"level":2,"title":"调度","slug":"调度","link":"#调度","children":[{"level":3,"title":"何时调度","slug":"何时调度","link":"#何时调度","children":[]},{"level":3,"title":"批处理","slug":"批处理","link":"#批处理","children":[]},{"level":3,"title":"交互式","slug":"交互式","link":"#交互式","children":[]},{"level":3,"title":"实时","slug":"实时","link":"#实时","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"node/进程与线程.md","lastUpdated":1678930974000}'),r={name:"node/进程与线程.md"},n=a('<h1 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-hidden="true">#</a></h1><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-hidden="true">#</a></h2><h3 id="进程-1" tabindex="-1">进程 <a class="header-anchor" href="#进程-1" aria-hidden="true">#</a></h3><p>进程是对正在运行程序的一个抽象。一个进程就是一个正在执行程序的实例，包括程序计数器，寄存器和变量的当前值。</p><p>关键思想：一个进程是某种类型的一个活动，它有<strong>程序、输入、输出以及状态</strong>。</p><p>实际上真正的<code>CPU</code>在各个进程之间来回切换，这种快速的切换称作<strong>多道程序设计</strong>。</p><h3 id="进程的创建" tabindex="-1">进程的创建 <a class="header-anchor" href="#进程的创建" aria-hidden="true">#</a></h3><ol><li>系统初始化：系统启动时，会创建若干进程。其中前台进程同用户交互；后台进程停留在后台进行邮件处理，打印之类的活动，这类进程称为<strong>守护进程</strong>。</li><li>正在运行的程序执行了创建进程的系统调用。</li><li>用户请求创建一个新进程。如点开某个app。</li><li>一个批处理作业的初始化。</li></ol><h3 id="进程的终止" tabindex="-1">进程的终止 <a class="header-anchor" href="#进程的终止" aria-hidden="true">#</a></h3><ol><li>正常退出（自愿的）：工作已经正常完成时退出</li><li>出错退出（自愿的）</li><li>严重错误（非自愿的）</li><li>被其他进程杀死（非自愿的）：调用kill杀死进程</li></ol><h3 id="进程的层次结构" tabindex="-1">进程的层次结构 <a class="header-anchor" href="#进程的层次结构" aria-hidden="true">#</a></h3><p>UNIX系中，进程与它的所有子进程以及后羿共同组成一个进程组。父子结构。</p><p>Windows中没有进程层次的概念，所有进程地位相同。</p><h3 id="进程的状态" tabindex="-1">进程的状态 <a class="header-anchor" href="#进程的状态" aria-hidden="true">#</a></h3><ul><li>运行态（该时刻进程实际占用CPU）</li><li>就绪态（可运行，但因为其他进程正在运行而暂时停止）</li><li>阻塞态（除非某种外部事件发生，否则进程不能运行）</li></ul><p>当操作系统发现进程不能继续运行时，由运行态转变为阻塞态。</p><p>当进程等待的一个外部事件发生时，由阻塞态转变为就绪态。</p><p>运行态和就绪态的转变是由进程调用程序引起的。</p><h3 id="进程的实现" tabindex="-1">进程的实现 <a class="header-anchor" href="#进程的实现" aria-hidden="true">#</a></h3><p>操作系统维护着一张表格（一个结构数组），即<strong>进程表</strong>。<strong>每个进程占用一个进程表项，该表项包含了进程状态的重要信息</strong>。</p><ul><li><strong>进程管理</strong>：进程状态、进程ID、父进程、优先级、调度参数等等</li><li><strong>存储管理</strong>：代码段指针、数据段指针、堆栈段指针。</li><li><strong>文件管理</strong>：根目录、工作目录。文件描述符、用户ID、组ID</li></ul><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-hidden="true">#</a></h2><p>为什么需要线程？</p><ul><li>并行实体拥有共享同一个地址空间和所有可用数据的能力。</li><li>线程比进程更轻量级，所以它们比进程更容易创建，也更容易撤销。</li><li>如果存在着大量的I/O处理，拥有多个线程允许这些活动彼此重叠运行。</li></ul><h2 id="进程间通信-ipc" tabindex="-1">进程间通信（IPC） <a class="header-anchor" href="#进程间通信-ipc" aria-hidden="true">#</a></h2><h3 id="竞争条件" tabindex="-1">竞争条件 <a class="header-anchor" href="#竞争条件" aria-hidden="true">#</a></h3><p>多个进程读写某些共享数据时，最后取决于进程运行的准确时序，称为<strong>竞争条件</strong>。多核增长带来的并行使得竞争条件越来越普遍。</p><h3 id="临界区" tabindex="-1">临界区 <a class="header-anchor" href="#临界区" aria-hidden="true">#</a></h3><p>对共享内存进行访问的程序片段称为<strong>临界区</strong>。为了避免竞争条件，需要满足几点：</p><ul><li>任何两个进程不能同时处于临界区。</li><li>不应对CPU的速度和数量做任何假设。</li><li>临界区外运行的进程不得阻塞其他进程。</li><li>不得使进程无限期等待进入临界区。</li></ul><h3 id="忙等待的互斥" tabindex="-1">忙等待的互斥 <a class="header-anchor" href="#忙等待的互斥" aria-hidden="true">#</a></h3><ul><li>屏蔽中断：当进程进入临界区立即屏蔽所有中断，并在离开之前打开中断。</li><li>锁变量：进入时设置锁变量，防止下一个进程进入。但是可能存在恰好在设置锁变量的时候，另一个进程也趁机进入了的情况。</li><li>严格轮换法：连续测试一个变量直到某个值出现为止，称为<strong>忙等待</strong>。</li><li>Peterson解法：使用共享变量。</li><li>TSL指令：测试并加锁。将内存字lock读到寄存器中，并在该地址存一个非零值，指令结束之前不允许访问该内存字。</li></ul><h3 id="睡眠与唤醒" tabindex="-1">睡眠与唤醒 <a class="header-anchor" href="#睡眠与唤醒" aria-hidden="true">#</a></h3><p><strong>生产者-消费者</strong>。两个进程共享一个公共的固定大小的缓冲区。其中一个是生产者，将信息放入缓存区。另外一个是消费者，从缓存区中取出信息。</p><p>如果缓存区满了，那么生产者睡眠，待消费者从缓存取中取走数据时唤醒它。同样缓存区为空时类似。</p><p>由于生产者和消费者的操作可能需要任意长的时间，在消费者读取缓存区为0的时候，准备要睡眠了，但是此时生产者加了1，本意是要通知消费者醒来，但此时消费者在逻辑上并没有睡眠。这样会导致缓存区迟早会满，最后两个进程全都睡眠了。</p><h3 id="信号量" tabindex="-1">信号量 <a class="header-anchor" href="#信号量" aria-hidden="true">#</a></h3><p>保证一旦一个信号量操作开始，则在该操作完成或阻塞之前，其他进程均不可访问该信号量。信号量的操作仅需几毫秒。</p><h3 id="互斥量" tabindex="-1">互斥量 <a class="header-anchor" href="#互斥量" aria-hidden="true">#</a></h3><p>信号量的简化版本，仅仅适用于管理共享资源或一小段代码。它是一个可以处于两态之一的变量：解锁和加锁。</p><h3 id="管程" tabindex="-1">管程 <a class="header-anchor" href="#管程" aria-hidden="true">#</a></h3><p>一个管程是一个由过程、变量及数据结构等组成的一个集合，他们组成一个特殊的模块或软件包，进程可在任何需要的时候调用过程中的过程。但它们不能再管程之外声明的该过程中直接访问管程内的数据结构。</p><p>管程一个重要的特性：任一时刻管程中只有一个活跃进程。</p><h3 id="消息传递" tabindex="-1">消息传递 <a class="header-anchor" href="#消息传递" aria-hidden="true">#</a></h3><h2 id="调度" tabindex="-1">调度 <a class="header-anchor" href="#调度" aria-hidden="true">#</a></h2><p><strong>计算密集型</strong>：花费了绝大多数时间在计算上。</p><p><strong>I/O密集型</strong>：花费了绝大多数时间在等待I/O上。</p><h3 id="何时调度" tabindex="-1">何时调度 <a class="header-anchor" href="#何时调度" aria-hidden="true">#</a></h3><ul><li>创建一个新进程后，决定是运行父进程还是子进程。</li><li>一个进程退出后，需要决定接下来运行哪一个进程。</li><li>当一个进程阻塞时，选择哪一个进程进行运行。</li><li>在I/0中断发生时，需要作出调度决策。</li></ul><h3 id="批处理" tabindex="-1">批处理 <a class="header-anchor" href="#批处理" aria-hidden="true">#</a></h3><ol><li>先来先服务。</li><li>最短作业优先。总的时间最少。</li><li>最短剩余时间优先。最短的作业时间永远最先运行。如果新的进程比当前进程需要的时间更少，那么当前进程会被挂起，而运行新的进程。</li></ol><h3 id="交互式" tabindex="-1">交互式 <a class="header-anchor" href="#交互式" aria-hidden="true">#</a></h3><ol><li>轮转调度：给每个进程分配一个时间段，进行进程切换运行。</li><li>优先级调度：优先级高的可运行进程优先运行。</li><li>多级队列</li><li>最短进程优先：根据进程过去的行为进行推测，并执行估计运行时间最短的一个。</li><li>保证调度</li><li>彩票调度：随机</li><li>公平分享调度</li></ol><h3 id="实时" tabindex="-1">实时 <a class="header-anchor" href="#实时" aria-hidden="true">#</a></h3><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li>《现代操作系统》</li><li><a href="https://www.cnblogs.com/xiaolincoding/p/13402297.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/xiaolincoding/p/13402297.html</a></li><li><a href="https://www.cnblogs.com/xiaolincoding/p/13402297.html" target="_blank" rel="noreferrer">进程间通信</a></li></ul>',56),h=[n];function t(d,s,c,o,p,u){return i(),e("div",null,h)}const _=l(r,[["render",t]]);export{f as __pageData,_ as default};
