import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.92ce8a2a.js";const l="/assets/vue-design.feca3a67.png",C=JSON.parse('{"title":"Vue设计思路","description":"","frontmatter":{},"headers":[],"relativePath":"vue/组成与设计.md","filePath":"vue/组成与设计.md","lastUpdated":1695640069000}'),o={name:"vue/组成与设计.md"},e=p(`<h1 id="vue设计思路" tabindex="-1">Vue设计思路 <a class="header-anchor" href="#vue设计思路" aria-label="Permalink to &quot;Vue设计思路&quot;">​</a></h1><h2 id="项目文件结构" tabindex="-1"><code>项目文件结构</code> <a class="header-anchor" href="#项目文件结构" aria-label="Permalink to &quot;\`项目文件结构\`&quot;">​</a></h2><p>在<code>Vue</code>项目中，所有核心的代码都是在<code>src</code>目录下完成，为了更好的了解<code>Vue</code>的底层实现，我们首先来了解一下<code>src</code>目录下代码的组织情况，从全局入手，在脑海里留下简单的印象，方便后续的学习。（注意：当前使用<code>Vue</code>的版本为<code>2.6.12</code>，不同版本的内容可能会有所差异）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── compiler  </span><span style="color:#6A737D;">// 编译模块：将 template 编译成为可以生成 vnode 的 render 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── codeframe.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── codegen             </span><span style="color:#6A737D;">// 代码生成文件：根据 ast 树可生成 vnode 的 render代码</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── create</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">compiler.js  </span><span style="color:#6A737D;">// 创建编译器的工厂函数</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── directives          </span><span style="color:#6A737D;">// 指令解析：v-on, v-bind, v-model</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── error</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">detector.js    </span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── helpers.js          </span><span style="color:#6A737D;">// 编译相关方法，如属性获取等方法</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── index.js            </span><span style="color:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── optimizer.js        </span><span style="color:#6A737D;">// 编译优化：将 ast 树进行优化</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── parser                      </span><span style="color:#6A737D;">// html 解析文件：将 template 解析成 ast 树🌲</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── to</span><span style="color:#F97583;">-function</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建编译器的工厂函数</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#B392F0;">core</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 构造函数核心模块：构建Vue构造函数，添加原型方法，实现完成渲染流程的_init方法</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">components</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 自带的全局组件，如 keep-alive</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 配置相关</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">global</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">api</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 全局api，如 Vue.use, extend, mixin, component等方法</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 入口文件，在 Vue 上挂载全局方法并导出 Vue</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构造函数起始位置</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">observer</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应式原理</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">util</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 一些工具方法，包含 mergeOptions, nextTick 等方法的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── </span><span style="color:#B392F0;">vdom</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 虚拟 dom</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#B392F0;">platforms</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 平台相关，包含不同平台的不同构建入口，这里主要研究web端</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── </span><span style="color:#B392F0;">weex</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── </span><span style="color:#B392F0;">web</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">compiler</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 与平台相关的编译</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">compiler</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// vue-template-compiler 包的入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">runtime</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">compiler</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 构建入口，包含编译器</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">runtime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 构建入口，不包含编译器，不支持 template 转换 render</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">server</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">basic</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">renderer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">server</span><span style="color:#E1E4E8;">-</span><span style="color:#B392F0;">renderer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">runtime</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 与平台相关的构建</span></span>
<span class="line"><span style="color:#E1E4E8;">│       ├── </span><span style="color:#B392F0;">server</span></span>
<span class="line"><span style="color:#E1E4E8;">│       └── </span><span style="color:#B392F0;">util</span></span>
<span class="line"><span style="color:#E1E4E8;">│</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#B392F0;">server</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 服务端渲染相关</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#B392F0;">sfc</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包</span></span>
<span class="line"><span style="color:#E1E4E8;">└── </span><span style="color:#B392F0;">shared</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 代码库通用代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── </span><span style="color:#B392F0;">constants</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span></span>
<span class="line"><span style="color:#E1E4E8;">    └── </span><span style="color:#B392F0;">util</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── compiler  </span><span style="color:#6A737D;">// 编译模块：将 template 编译成为可以生成 vnode 的 render 函数</span></span>
<span class="line"><span style="color:#24292E;">│   ├── codeframe.js</span></span>
<span class="line"><span style="color:#24292E;">│   ├── codegen             </span><span style="color:#6A737D;">// 代码生成文件：根据 ast 树可生成 vnode 的 render代码</span></span>
<span class="line"><span style="color:#24292E;">│   ├── create</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">compiler.js  </span><span style="color:#6A737D;">// 创建编译器的工厂函数</span></span>
<span class="line"><span style="color:#24292E;">│   ├── directives          </span><span style="color:#6A737D;">// 指令解析：v-on, v-bind, v-model</span></span>
<span class="line"><span style="color:#24292E;">│   ├── error</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">detector.js    </span></span>
<span class="line"><span style="color:#24292E;">│   ├── helpers.js          </span><span style="color:#6A737D;">// 编译相关方法，如属性获取等方法</span></span>
<span class="line"><span style="color:#24292E;">│   ├── index.js            </span><span style="color:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="color:#24292E;">│   ├── optimizer.js        </span><span style="color:#6A737D;">// 编译优化：将 ast 树进行优化</span></span>
<span class="line"><span style="color:#24292E;">│   ├── parser                      </span><span style="color:#6A737D;">// html 解析文件：将 template 解析成 ast 树🌲</span></span>
<span class="line"><span style="color:#24292E;">│   └── to</span><span style="color:#D73A49;">-function</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建编译器的工厂函数</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#6F42C1;">core</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 构造函数核心模块：构建Vue构造函数，添加原型方法，实现完成渲染流程的_init方法</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">components</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 自带的全局组件，如 keep-alive</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 配置相关</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">global</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">api</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 全局api，如 Vue.use, extend, mixin, component等方法</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 入口文件，在 Vue 上挂载全局方法并导出 Vue</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造函数起始位置</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">observer</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应式原理</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">util</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 一些工具方法，包含 mergeOptions, nextTick 等方法的实现</span></span>
<span class="line"><span style="color:#24292E;">│   └── </span><span style="color:#6F42C1;">vdom</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 虚拟 dom</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#6F42C1;">platforms</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 平台相关，包含不同平台的不同构建入口，这里主要研究web端</span></span>
<span class="line"><span style="color:#24292E;">│   ├── </span><span style="color:#6F42C1;">weex</span></span>
<span class="line"><span style="color:#24292E;">│   └── </span><span style="color:#6F42C1;">web</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">compiler</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 与平台相关的编译</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">compiler</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// vue-template-compiler 包的入口文件</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">runtime</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">compiler</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 构建入口，包含编译器</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">runtime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 构建入口，不包含编译器，不支持 template 转换 render</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">server</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">basic</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">renderer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">server</span><span style="color:#24292E;">-</span><span style="color:#6F42C1;">renderer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">runtime</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 与平台相关的构建</span></span>
<span class="line"><span style="color:#24292E;">│       ├── </span><span style="color:#6F42C1;">server</span></span>
<span class="line"><span style="color:#24292E;">│       └── </span><span style="color:#6F42C1;">util</span></span>
<span class="line"><span style="color:#24292E;">│</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#6F42C1;">server</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 服务端渲染相关</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#6F42C1;">sfc</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包</span></span>
<span class="line"><span style="color:#24292E;">└── </span><span style="color:#6F42C1;">shared</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 代码库通用代码</span></span>
<span class="line"><span style="color:#24292E;">    ├── </span><span style="color:#6F42C1;">constants</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span></span>
<span class="line"><span style="color:#24292E;">    └── </span><span style="color:#6F42C1;">util</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">js</span></span></code></pre></div><p>以上是<code>Vue</code>项目中主要文件目录，里面附带一些注释，讲解了比较主要模块的功能及作用。刚开始学习时只做简单了解即可，后面我们会逐步详细学习其中的一些模块，从而从原理级别理解整个<code>Vue</code>项目的设计与实现。</p><h2 id="vue的真面目" tabindex="-1"><code>Vue</code>的真面目 <a class="header-anchor" href="#vue的真面目" aria-label="Permalink to &quot;\`Vue\`的真面目&quot;">​</a></h2><p>要想真正的了解<code>Vue</code>是如何工作的，首先我们需要找到<code>Vue</code>是在哪里被定义的。我们先找到<code>package.json</code>文件下的<code>scripts</code>配置。<code>scripts</code>里存放的都是运行命令的别名形式，通过命令可以轻松找到对应命令执行文件的路径。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>这里当运行<code>dev</code>命令实际上是运行<code>scripts/config.js</code>文件，让我们找到<code>scripts/config.js</code>文件。</p><p>通过运行命令参数我们可以知道<code>p<wbr>rocess.env.TARGET</code>的值为<code>web-full-dev</code>，因此可以在<code>builds</code>里找到对应的配置文件，如下</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">builds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;web-full-dev&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      entry: </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;web/entry-runtime-with-compiler.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      dest: </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dist/vue.js&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      format: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      env: </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      alias: { he: </span><span style="color:#9ECBFF;">&#39;./entity-decoder&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      banner</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genConfig</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">TARGET</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">builds</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;web-full-dev&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      entry: </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;web/entry-runtime-with-compiler.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      dest: </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dist/vue.js&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      format: </span><span style="color:#032F62;">&#39;umd&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      env: </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      alias: { he: </span><span style="color:#032F62;">&#39;./entity-decoder&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      banner</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genConfig</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">TARGET</span><span style="color:#24292E;">)</span></span></code></pre></div><p>通过<code>entry</code>，我们找到<code>web/entry-runtime-with-compiler.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./runtime/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$mount</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Element</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrating</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.compile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compileToFunctions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./runtime/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$mount</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrating</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Vue.compile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compileToFunctions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>在这里，我们终于找到了<code>Vue</code>相关的文件，这也是<code>Vue</code>的起始入口。接着根据<code>Vue</code>的引入路径，找到<code>./runtime/index</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;core/index&#39;</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.__patch__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inBrowser </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> patch </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Element</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrating</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;core/index&#39;</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.__patch__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inBrowser </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> patch </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrating</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>这里还不是<code>Vue</code>真正的起始点，继续查找<code>core/index</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./instance/index&#39;</span></span>
<span class="line"><span style="color:#B392F0;">initGlobalAPI</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__VERSION__&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./instance/index&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">initGlobalAPI</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">Vue.version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__VERSION__&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>发现仍然不是<code>Vue</code>的起始点，继续查找<code>&#39;./instance/index&#39;</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initMixin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./init&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stateMixin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderMixin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { eventsMixin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { lifecycleMixin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { warn } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Vue 构造函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_init</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向原型上添加方法属性</span></span>
<span class="line"><span style="color:#B392F0;">initMixin</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">stateMixin</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">eventsMixin</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">lifecycleMixin</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#B392F0;">renderMixin</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initMixin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./init&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stateMixin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./state&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { renderMixin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./render&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { eventsMixin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./events&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { lifecycleMixin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./lifecycle&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { warn } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Vue 构造函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向原型上添加方法属性</span></span>
<span class="line"><span style="color:#6F42C1;">initMixin</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#6F42C1;">stateMixin</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#6F42C1;">eventsMixin</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#6F42C1;">lifecycleMixin</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#6F42C1;">renderMixin</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>好了，大功告成！费劲千辛万苦终于找到了<code>Vue</code>的真正定义的位置！可以看出<code>Vue</code>其实就是一个构造函数，而构造函数内部仅仅只是调用了<code>_init</code>方法，看上去非常简单。但是<code>Vue</code>是如何通过这么简单的定义实现那么复杂的功能呢？这里就要涉及到<code>构造函数</code>、<code>原型</code>、<code>实例</code>的概念了，不了解这些概念的建议参考《javascript高级设计程序》中原型章节来进行学习。下面我们通过下方三个方面来介绍<code>Vue</code>的实现。</p><ol><li>原型方法属性：通过 5 个 <code>init</code> 方法，向<code>Vue</code>的原型上添加方法，</li><li>静态方法属性：在导入<code>Vue</code>构造函数的过程中，向<code>Vue</code>构造函数上添加静态方法，也有向原型上添加方法</li><li>实例化：在实例化的过程中，执行<code>_init</code>方法，完成整个<code>Vue</code>初始化到渲染的逻辑。</li></ol><h2 id="vue的原型方法属性" tabindex="-1">Vue的原型方法属性 <a class="header-anchor" href="#vue的原型方法属性" aria-label="Permalink to &quot;Vue的原型方法属性&quot;">​</a></h2><h3 id="initmixin" tabindex="-1"><code>initMixin</code> <a class="header-anchor" href="#initmixin" aria-label="Permalink to &quot;\`initMixin\`&quot;">​</a></h3><p><code>initMixin</code>方法主要实现了<code>_init</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_init</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// init 实现内容，由于这里仅做概览，所以具体实现均已省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// init 实现内容，由于这里仅做概览，所以具体实现均已省略</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面<code>Vue</code>构造函数我们可以知道，这个方法在实例化时有被调用，它主要的作用是实现：选项的合并，数据初始化（如响应式处理），以及触发编译和渲染的流程，所以十分重要。这里也只是先做一个了解，后续的实例化章节将都会从这个方法开始分析。</p><h3 id="statemixin" tabindex="-1"><code>stateMixin</code> <a class="header-anchor" href="#statemixin" aria-label="Permalink to &quot;\`stateMixin\`&quot;">​</a></h3><p><code>stateMixin</code>主要实现了<code>data,props</code>的代理功能，即当我们访问<code>$data</code>时，实际访问的是<code>_data</code>。另外在非生产环境下，会对<code>$data,$props</code>进行 <code>set</code>处理，每次设置新的值时都会打印提示，所以实际上<code>$data,$props</code>都是只读属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stateMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dataDef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataDef.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._data }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">propsDef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  propsDef.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._props }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 只读属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataDef.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;Avoid replacing instance root $data. &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;Use nested data properties instead.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    propsDef.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`$props is readonly.\`</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$data&#39;</span><span style="color:#E1E4E8;">, dataDef)</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$props&#39;</span><span style="color:#E1E4E8;">, propsDef)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$delete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> del</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stateMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataDef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  dataDef.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._data }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">propsDef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  propsDef.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._props }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 只读属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    dataDef.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;Avoid replacing instance root $data. &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;Use nested data properties instead.&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    propsDef.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`$props is readonly.\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$data&#39;</span><span style="color:#24292E;">, dataDef)</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$props&#39;</span><span style="color:#24292E;">, propsDef)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> set</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$delete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> del</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除此之外，这里还在<code>Vue</code>原型上挂载了比较常见的三个方法：<code>$set</code>，<code>$delete</code>，<code>$watch</code>。</p><h3 id="eventsmixin" tabindex="-1"><code>eventsMixin</code> <a class="header-anchor" href="#eventsmixin" aria-label="Permalink to &quot;\`eventsMixin\`&quot;">​</a></h3><p>和<code>node</code>里<code>EventEmitter</code>类似，<code>eventsMixin</code>实现了四个方法：<code>$on,$off,$once,$emit</code>，用于监听，触发，销毁事件。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eventsMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hookRE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">hook:</span><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$on</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$once</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$off</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eventsMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hookRE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">hook:/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$once</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$off</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="lifecyclemixin" tabindex="-1"><code>lifecycleMixin</code> <a class="header-anchor" href="#lifecyclemixin" aria-label="Permalink to &quot;\`lifecycleMixin\`&quot;">​</a></h3><p><code>lifecycleMixin</code>实现了三个方法：<code>_update</code>方法非常重要，它主要负责将<code>vnode</code>生成真实节点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lifecycleMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新，将 vnode 生成 真实节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_update</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 强制刷新</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$forceUpdate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 销毁</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$destroy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lifecycleMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新，将 vnode 生成 真实节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_update</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 强制刷新</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$forceUpdate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 销毁</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$destroy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="rendermixin" tabindex="-1"><code>renderMixin</code> <a class="header-anchor" href="#rendermixin" aria-label="Permalink to &quot;\`renderMixin\`&quot;">​</a></h3><p><code>renderMixin</code>主要做了三项工作</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderMixin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">installRenderHelpers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(fn, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderMixin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">installRenderHelpers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">fn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(fn, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol><li><code>installRenderHelpers</code>函数用于添加<code>render</code>相关方法，在编译环节最后生成的代码，都是由这些方法拼接而成的代码，所以也是非常的重要，在这里先混个眼熟。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  target._o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> markOnce</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toNumber</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toString</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> renderList</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> renderSlot</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> looseEqual</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> looseIndexOf</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> renderStatic</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolveFilter</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> checkKeyCodes</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bindObjectProps</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createTextVNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createEmptyVNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolveScopedSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bindObjectListeners</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bindDynamicKeys</span></span>
<span class="line"><span style="color:#E1E4E8;">  target._p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prependModifier</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  target._o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> markOnce</span></span>
<span class="line"><span style="color:#24292E;">  target._n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toNumber</span></span>
<span class="line"><span style="color:#24292E;">  target._s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toString</span></span>
<span class="line"><span style="color:#24292E;">  target._l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> renderList</span></span>
<span class="line"><span style="color:#24292E;">  target._t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> renderSlot</span></span>
<span class="line"><span style="color:#24292E;">  target._q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> looseEqual</span></span>
<span class="line"><span style="color:#24292E;">  target._i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> looseIndexOf</span></span>
<span class="line"><span style="color:#24292E;">  target._m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> renderStatic</span></span>
<span class="line"><span style="color:#24292E;">  target._f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolveFilter</span></span>
<span class="line"><span style="color:#24292E;">  target._k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> checkKeyCodes</span></span>
<span class="line"><span style="color:#24292E;">  target._b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bindObjectProps</span></span>
<span class="line"><span style="color:#24292E;">  target._v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createTextVNode</span></span>
<span class="line"><span style="color:#24292E;">  target._e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createEmptyVNode</span></span>
<span class="line"><span style="color:#24292E;">  target._u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolveScopedSlots</span></span>
<span class="line"><span style="color:#24292E;">  target._g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bindObjectListeners</span></span>
<span class="line"><span style="color:#24292E;">  target._d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bindDynamicKeys</span></span>
<span class="line"><span style="color:#24292E;">  target._p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prependModifier</span></span></code></pre></div><ol><li><code>$nextTick</code>方法，在下一次事件循环触发，涉及到事件循环机制。</li><li><code>_render</code>方法，用于生成<code>vnode</code>。</li></ol><h2 id="vue的静态方法属性" tabindex="-1">Vue的静态方法属性 <a class="header-anchor" href="#vue的静态方法属性" aria-label="Permalink to &quot;Vue的静态方法属性&quot;">​</a></h2><p>通过上面5个<code>init</code>方法我们已经了解了许多原型方法的添加过程，但是在<code>Vue</code>中还有很多全局方法，比如<code>Vue.component,Vue.use</code>等方法，它们都是构造函数的静态属性，下面我们看看这些静态属性是如何添加的。与寻找<code>Vue</code>的起始位置过程恰恰相反，这次我们从<code>Vue</code>的起始文件出发，看看最后导出的<code>Vue</code>是怎样的。</p><h3 id="src-core-index-js文件" tabindex="-1"><code>/src/core/index.js</code>文件 <a class="header-anchor" href="#src-core-index-js文件" aria-label="Permalink to &quot;\`/src/core/index.js\`文件&quot;">​</a></h3><p>这是第一层引入<code>Vue</code>构造函数的文件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initGlobalAPI } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./global-api/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">initGlobalAPI</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ... 中间省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Vue.version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__VERSION__&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initGlobalAPI } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./global-api/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">initGlobalAPI</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ... 中间省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Vue.version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__VERSION__&#39;</span></span></code></pre></div><p>这里我们看一下<code>initGlobalAPI</code>方法，打开<code>core/global-api/index.js</code>文件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initGlobalAPI</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GlobalAPI</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.util </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    warn,</span></span>
<span class="line"><span style="color:#E1E4E8;">    extend,</span></span>
<span class="line"><span style="color:#E1E4E8;">    mergeOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">    defineReactive</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.delete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> del</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.nextTick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextTick</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2.6 explicit observable API</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.</span><span style="color:#B392F0;">observable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt;(obj: T): T =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="color:#E1E4E8;">    return obj</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.options = Object.create(null)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ASSET_TYPES.forEach(type =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.options[type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.options._base = Vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  extend(Vue.options.components, builtInComponents)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  initUse(Vue)</span></span>
<span class="line"><span style="color:#E1E4E8;">  initMixin(Vue)</span></span>
<span class="line"><span style="color:#E1E4E8;">  initExtend(Vue)</span></span>
<span class="line"><span style="color:#E1E4E8;">  initAssetRegisters(Vue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initGlobalAPI</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalAPI</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Vue.util </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    warn,</span></span>
<span class="line"><span style="color:#24292E;">    extend,</span></span>
<span class="line"><span style="color:#24292E;">    mergeOptions,</span></span>
<span class="line"><span style="color:#24292E;">    defineReactive</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Vue.set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> set</span></span>
<span class="line"><span style="color:#24292E;">  Vue.delete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> del</span></span>
<span class="line"><span style="color:#24292E;">  Vue.nextTick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextTick</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2.6 explicit observable API</span></span>
<span class="line"><span style="color:#24292E;">  Vue.</span><span style="color:#6F42C1;">observable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt;(obj: T): T =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(obj)</span></span>
<span class="line"><span style="color:#24292E;">    return obj</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Vue.options = Object.create(null)</span></span>
<span class="line"><span style="color:#24292E;">  ASSET_TYPES.forEach(type =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Vue.options[type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Vue.options._base = Vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  extend(Vue.options.components, builtInComponents)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  initUse(Vue)</span></span>
<span class="line"><span style="color:#24292E;">  initMixin(Vue)</span></span>
<span class="line"><span style="color:#24292E;">  initExtend(Vue)</span></span>
<span class="line"><span style="color:#24292E;">  initAssetRegisters(Vue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里挂载了很多静态方法，<code>Vue</code>中大多数的全局方法都在这个位置添加的，这里我们着重分析一下<code>options</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> builtInComponents </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../components/index&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">ASSET_TYPES</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.options[type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.options._base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Vue.options.components, builtInComponents)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> builtInComponents </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../components/index&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Vue.options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">ASSET_TYPES</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Vue.options[type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Vue.options._base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Vue.options.components, builtInComponents)</span></span></code></pre></div><p>可以看出，在<code>Vue</code>构造函数上添加了一个<code>options</code>属性（注意！这里是静态属性，为构造函数所有，区别于在实例化传入的<code>options</code>）。随后又通过遍历<code>ASSET_TYPES</code>，在<code>options</code>上添加了<code>components,directives,filters</code>属性。另外还添加了<code>_base</code>，指向当前构造函数<code>Vue</code>。最后通过<code>extend</code>方法将<code>builtInComponents</code>合并到<code>options.components</code>当中。这里的<code>builtInComponents</code>实际上就是<code>Vue</code>自带的组件，即<code>keep-alive</code>组件。所以最终<code>Vue.options</code>的内容如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Vue.options 内容</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">components</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    KeepAlive</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">filters</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">directives</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">_base</span><span style="color:#E1E4E8;">: Vue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Vue.options 内容</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">components</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    KeepAlive</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">filters</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">directives</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_base</span><span style="color:#24292E;">: Vue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里之所以额外提起，是因为在后续选项合并时，会使用此处的<code>options</code>进行合并。</p><h3 id="src-platforms-web-runtime-index-js文件" tabindex="-1"><code>/src/platforms/web/runtime/index.js</code>文件 <a class="header-anchor" href="#src-platforms-web-runtime-index-js文件" aria-label="Permalink to &quot;\`/src/platforms/web/runtime/index.js\`文件&quot;">​</a></h3><p>这里是第二层引入<code>Vue</code>的文件，主要给<code>Vue</code>处理平台相关的一些方法</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;core/index&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;core/config&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { extend, noop } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;shared/util&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mountComponent } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;core/instance/lifecycle&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { devtools, inBrowser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;core/util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  query,</span></span>
<span class="line"><span style="color:#E1E4E8;">  mustUseProp,</span></span>
<span class="line"><span style="color:#E1E4E8;">  isReservedTag,</span></span>
<span class="line"><span style="color:#E1E4E8;">  isReservedAttr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getTagNamespace,</span></span>
<span class="line"><span style="color:#E1E4E8;">  isUnknownElement</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;web/util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { patch } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./patch&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> platformDirectives </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./directives/index&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> platformComponents </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./components/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// install platform specific utils</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.mustUseProp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mustUseProp</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.isReservedTag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isReservedTag</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.isReservedAttr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isReservedAttr</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.getTagNamespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getTagNamespace</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.isUnknownElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isUnknownElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// install platform runtime directives &amp; components</span></span>
<span class="line"><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Vue.options.directives, platformDirectives)</span></span>
<span class="line"><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Vue.options.components, platformComponents)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.__patch__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inBrowser </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> patch </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;core/index&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;core/config&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { extend, noop } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;shared/util&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { mountComponent } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;core/instance/lifecycle&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { devtools, inBrowser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;core/util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  query,</span></span>
<span class="line"><span style="color:#24292E;">  mustUseProp,</span></span>
<span class="line"><span style="color:#24292E;">  isReservedTag,</span></span>
<span class="line"><span style="color:#24292E;">  isReservedAttr,</span></span>
<span class="line"><span style="color:#24292E;">  getTagNamespace,</span></span>
<span class="line"><span style="color:#24292E;">  isUnknownElement</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;web/util/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { patch } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./patch&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> platformDirectives </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./directives/index&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> platformComponents </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./components/index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// install platform specific utils</span></span>
<span class="line"><span style="color:#24292E;">Vue.config.mustUseProp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mustUseProp</span></span>
<span class="line"><span style="color:#24292E;">Vue.config.isReservedTag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isReservedTag</span></span>
<span class="line"><span style="color:#24292E;">Vue.config.isReservedAttr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isReservedAttr</span></span>
<span class="line"><span style="color:#24292E;">Vue.config.getTagNamespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> getTagNamespace</span></span>
<span class="line"><span style="color:#24292E;">Vue.config.isUnknownElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isUnknownElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// install platform runtime directives &amp; components</span></span>
<span class="line"><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Vue.options.directives, platformDirectives)</span></span>
<span class="line"><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Vue.options.components, platformComponents)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.__patch__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inBrowser </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> patch </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>这里首先给<code>Vue.config</code>添加了一系列方法，注意，这些方法之所以在这里添加而不是在<code>core/index.js</code>文件里添加，是因为这里的方法都与平台相关，不同的平台的方法实现也会不一样。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Vue.options.directives, platformDirectives)</span></span>
<span class="line"><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Vue.options.components, platformComponents)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Vue.options.directives, platformDirectives)</span></span>
<span class="line"><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Vue.options.components, platformComponents)</span></span></code></pre></div><p>这两个<code>extend</code>实际上进一步扩充了<code>Vue.options</code>方法，扩充后的内容如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Vue.options 内容</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">components</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    KeepAlive,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 新增 platformComponents</span></span>
<span class="line"><span style="color:#E1E4E8;">    Transition,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 新增 platformComponents</span></span>
<span class="line"><span style="color:#E1E4E8;">    TransitionGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">filters</span><span style="color:#E1E4E8;">: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">directives</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 新增 platformDirectives</span></span>
<span class="line"><span style="color:#E1E4E8;">    model,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 新增 platformDirectives</span></span>
<span class="line"><span style="color:#E1E4E8;">    show</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">_base</span><span style="color:#E1E4E8;">: Vue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Vue.options 内容</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">components</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    KeepAlive,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 新增 platformComponents</span></span>
<span class="line"><span style="color:#24292E;">    Transition,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 新增 platformComponents</span></span>
<span class="line"><span style="color:#24292E;">    TransitionGroup</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">filters</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">directives</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 新增 platformDirectives</span></span>
<span class="line"><span style="color:#24292E;">    model,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 新增 platformDirectives</span></span>
<span class="line"><span style="color:#24292E;">    show</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_base</span><span style="color:#24292E;">: Vue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这也是为什么我们可以不用注册也能全局使用<code>v-model,v-show</code>的原因了，因为<code>Vue</code>已经帮我们全局注册了。</p><h3 id="src-platforms-web-entry-runtime-with-compiler-js文件" tabindex="-1"><code>/src/platforms/web/entry-runtime-with-compiler.js</code>文件 <a class="header-anchor" href="#src-platforms-web-entry-runtime-with-compiler-js文件" aria-label="Permalink to &quot;\`/src/platforms/web/entry-runtime-with-compiler.js\`文件&quot;">​</a></h3><p>这是最后一层引入<code>Vue</code>了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./runtime/index&#39;</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$mount</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Element</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrating</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mount.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, el, hydrating)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Vue.compile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compileToFunctions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./runtime/index&#39;</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$mount</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrating</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mount.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, el, hydrating)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Vue.compile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compileToFunctions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Vue</span></span></code></pre></div><p>这里主要是重新实现了<code>$mount</code>方法，但是为什么原先在<code>runtime/index.js</code>文件里实现了<code>$mount</code>方法，这里又要重新实现一遍呢？因为<code>runtime/index.js</code>里的<code>$mount</code>与编译是无关的，无法处理<code>template</code>模板代码，而这里重写的<code>$mount</code>实际上还是调用了<code>runtime/index.js</code>里的<code>$mount</code>，但是在此之前，增加了从<code>template</code>到<code>render</code>的编译过程。</p><h2 id="实例化过程" tabindex="-1">实例化过程 <a class="header-anchor" href="#实例化过程" aria-label="Permalink to &quot;实例化过程&quot;">​</a></h2><p>前面已经将<code>Vue</code>的各种方法属性挂载完毕，现在则是需要进行实例化了，也就是调用之前提到的<code>_init</code>方法。打开<code>/src/core/instance/init.js</code>文件，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_init</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 合并options</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options._isComponent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">initInternalComponent</span><span style="color:#E1E4E8;">(vm, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm.$options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeOptions</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resolveConstructorOptions</span><span style="color:#E1E4E8;">(vm.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 初始化数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initLifecycle</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initEvents</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initRender</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initInjections</span><span style="color:#E1E4E8;">(vm) </span><span style="color:#6A737D;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initProvide</span><span style="color:#E1E4E8;">(vm) </span><span style="color:#6A737D;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(vm, </span><span style="color:#9ECBFF;">&#39;created&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 编译并挂载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 合并options</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options._isComponent) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">initInternalComponent</span><span style="color:#24292E;">(vm, options)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      vm.$options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeOptions</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolveConstructorOptions</span><span style="color:#24292E;">(vm.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">        vm</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 初始化数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initLifecycle</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initEvents</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initRender</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;beforeCreate&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initInjections</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initProvide</span><span style="color:#24292E;">(vm) </span><span style="color:#6A737D;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(vm, </span><span style="color:#032F62;">&#39;created&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 编译并挂载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vm.$options.el) {</span></span>
<span class="line"><span style="color:#24292E;">      vm.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(vm.$options.el)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>在初始化的过程中，主要分为三个阶段：</p><p>阶段一：合并选项，将 <code>Vue.options</code>和传入的<code>options</code>进行合并。</p><p>阶段二：初始化数据，并对数据进行响应式处理。</p><p>阶段三：编译代码，得到<code>render</code>函数，将<code>vnode</code>生成真实节点，并挂载到界面。</p><p>由于这部分比较核心，且难以理解，这里仅做了解，后续会逐一进行分析。</p><h2 id="vue的整体设计" tabindex="-1">Vue的整体设计 <a class="header-anchor" href="#vue的整体设计" aria-label="Permalink to &quot;Vue的整体设计&quot;">​</a></h2><p>通过上面的分析，我们已经对<code>Vue原型方法</code>，<code>Vue静态方法属性</code>，<code>Vue实例化过程</code>有了大致的了解，下面我们用张图总结下整体的内容，也就是Vue整体的设计思路。</p><p><img src="`+l+'" alt="Vue组成与设计.png"></p><p>总结下来就是：</p><ol><li>构建一个具有完备功能的构造函数，并且在上面添加各个模块需要的方法属性。包括原型方法属性和静态方法属性。</li><li>进行实例化，在实例化过程中进行各种处理，其中包括：选项合并，数据响应式处理，编译，虚拟<code>DOM</code>更新等等。</li></ol><p>这里的描述比较笼统，旨在从整体上来对Vue进行一个了解。在接下来的章节我们会详细分析实例化的整个过程，从而由点及面的了解Vue。下一章节我们将开始<code>Vue</code>核心代码的正式学习。</p>',80),c=[e];function t(r,E,y,i,d,F){return n(),a("div",null,c)}const m=s(o,[["render",t]]);export{C as __pageData,m as default};
