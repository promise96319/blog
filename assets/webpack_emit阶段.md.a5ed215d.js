import{_ as s,o as n,c as a,a as l}from"./app.5a1d1f50.js";const A=JSON.parse('{"title":"emit阶段","description":"","frontmatter":{},"headers":[{"level":2,"title":"createChunkAssets","slug":"createchunkassets","link":"#createchunkassets","children":[]},{"level":2,"title":"renderMain","slug":"rendermain","link":"#rendermain","children":[{"level":3,"title":"modules代码","slug":"modules代码","link":"#modules代码","children":[]},{"level":3,"title":"runtime代码","slug":"runtime代码","link":"#runtime代码","children":[]}]},{"level":2,"title":"emitAssets","slug":"emitassets","link":"#emitassets","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"webpack/emit阶段.md","lastUpdated":1693935732000}'),p={name:"webpack/emit阶段.md"},o=l(`<h1 id="emit阶段" tabindex="-1">emit阶段 <a class="header-anchor" href="#emit阶段" aria-hidden="true">#</a></h1><p><code>seal</code>阶段完成后，对于每一个<code>chunk</code>下的每一个<code>module</code>都已经生成了相应的代码片段。接下来就需要将这些片段进行拼接，形成可以执行的完整代码，并将代码生成到相应的文件当中。</p><h2 id="createchunkassets" tabindex="-1">createChunkAssets <a class="header-anchor" href="#createchunkassets" aria-hidden="true">#</a></h2><p><code>createChunkAssets</code>会在<code>codeGeneration</code>回调中调用：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">asyncLib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEachLimit</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">chunks</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">manifest</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getRenderManifest</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      hash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">hash</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      fullHash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">fullHash</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">outputOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      codeGenerationResults</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">codeGenerationResults</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      moduleTemplates</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleTemplates</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      dependencyTemplates</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">dependencyTemplates</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      chunkGraph</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">chunkGraph</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      moduleGraph</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleGraph</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      runtimeTemplate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">runtimeTemplate</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div><p>首先会对每一个<code>chunk</code>创建<code>manifest</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">getRenderManifest</span><span style="color:#BABED8;">(options) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">renderManifest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">renderManifest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JavascriptModulesPlugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">result</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">render</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">renderMain</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">hash</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">dependencyTemplates</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">runtimeTemplate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">moduleGraph</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">chunkGraph</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">codeGenerationResults</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        strictMode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">runtimeTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isModule</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">hooks</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">compilation</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">render</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">filenameTemplate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      pathOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">hash</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        runtime</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">runtime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        contentHashType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javascript</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      identifier</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">hotUpdateChunk</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">hotupdatechunk</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">chunk</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      hash</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">contentHash</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">javascript</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>此时会进入到<code>JavascriptModulesPlugin</code>插件当中，对<code>chunk</code>类型进行检验，并生成带有不同<code>render</code>的任务，添加到<code>result</code>当中。完后遍历<code>manifest</code>，生成文件。精简后的代码如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">asyncLib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  manifest</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fileManifest</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 1. 解析 chunk 的文件等信息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">filename</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">file</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">filename</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">assetInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">filenameTemplate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">filenameTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pathAndInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getPathWithInfo</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">filenameTemplate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pathOptions</span></span>
<span class="line"><span style="color:#F07178;">      )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">file</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pathAndInfo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">assetInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">pathAndInfo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pathAndInfo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 2. 生成 chunk 代码</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">source</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fileManifest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3. 输出文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">emitAsset</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">assetInfo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">files</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">chunkAsset</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div><p>主要流程有三部分：首先解析文件的信息，然后调用<code>render</code>生成代码，最后根据文件信息将生成的代码进行输出。<code>render</code>函数（<code>renderMain</code>和<code>renderChunk</code>）均在<code>webpack/lib/javascript/JavascriptModulesPlugin</code>插件中定义，其中<code>renderMain</code>相较于<code>renderChunk</code>更加复杂，因为它是作为入口文件，通常会加入一些<code>runtime</code>相关的执行函数等。</p><h2 id="rendermain" tabindex="-1">renderMain <a class="header-anchor" href="#rendermain" aria-hidden="true">#</a></h2><p>最终生成的<code>chunk</code>代码由各个部分组成，包括我们自己写的和引用的模块代码，程序执行的一些<code>runtime</code>代码、程序启动代码，以及一些其他注释、立即执行等辅助结构代码。</p><h3 id="modules代码" tabindex="-1">modules代码 <a class="header-anchor" href="#modules代码" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chunkModules </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderChunkModules</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  chunkRenderContext</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  inlinedModules</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> allModules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">m</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">inlinedModules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#BABED8;">(m))</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> allModules</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#BABED8;font-style:italic;">module</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">renderModule</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">module,</span><span style="color:#BABED8;"> chunkRenderContext</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> hooks</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  prefix</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>调用<code>Template.renderChunkModules</code>函数遍历<code>chunk</code>中的所有<code>module</code>，然后将这些<code>module</code>形成键值对结构代码（实际上是一行一行代码组成的数组结构，但是执行时是对象结构），存放到<code>__webpack_modules__</code>变量当中。例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#BABED8;"> 	</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> __webpack_modules__ </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/***/</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">./src/moduleA.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*!************************!*\\</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  !*** ./src/moduleA.js ***!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  \\************************/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/***/</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">__unused_webpack_module</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">__webpack_exports__</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">eval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/* harmony export */ __webpack_require__.d(__webpack_exports__, {</span><span style="color:#BABED8;">\\n</span><span style="color:#C3E88D;">/* harmony export */   </span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">A</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">: () =&gt; (/* binding */ A)</span><span style="color:#BABED8;">\\n</span><span style="color:#C3E88D;">/* harmony export */ });</span><span style="color:#BABED8;">\\n</span><span style="color:#C3E88D;">/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ </span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">./node_modules/react/index.js</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">);</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#C3E88D;">console.log(react__WEBPACK_IMPORTED_MODULE_0__)</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#C3E88D;">function A() {</span><span style="color:#BABED8;">\\n</span><span style="color:#C3E88D;">  console.log(&#39;==&gt; module A&#39;);</span><span style="color:#BABED8;">\\n</span><span style="color:#C3E88D;">}</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#C3E88D;">//# sourceURL=webpack://study-webpack/./src/moduleA.js?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/***/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#BABED8;"> 	</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>键为<code>module</code>的引用路径，值为<code>seal</code>后的代码。</p><h3 id="runtime代码" tabindex="-1">runtime代码 <a class="header-anchor" href="#runtime代码" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (runtimeModules</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length </span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PrefixSource</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">prefix</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">Template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renderRuntimeModules</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">runtimeModules</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">chunkRenderContext</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// runtimeRuntimeModules calls codeGeneration</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">runtimeModules</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">codeGeneratedModules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">module</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在<code>seal</code>阶段生成代码构成中，会分析<code>runtimeRequirements</code>，也就是模块在转换代码时，依赖了哪些运行时的代码。比如<code>import</code>最后会替换成<code>__webpack_require__</code>函数，定义<code>__esModule</code>时需要<code>__webpack_require__.r</code>，这个时候就需要在拼接的代码中添加这些函数的定义。例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#BABED8;"> 	</span><span style="color:#676E95;font-style:italic;">/* webpack/runtime/make namespace object */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#BABED8;"> 	(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 		</span><span style="color:#676E95;font-style:italic;">// define __esModule on exports</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 		</span><span style="color:#BABED8;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">r</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 			</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Symbol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toStringTag</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 				</span><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toStringTag</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 			</span><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__esModule</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 		</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/******/</span><span style="color:#F07178;"> 	</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>通过这两部分就可以组成能够正常运行的完整代码了。完后通过<code>emitFile</code>方法记录生成的代码和对应的文件信息。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">emitAsset</span><span style="color:#BABED8;">(file</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> assetInfo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">assets</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">_setAssetInfo</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">assetInfo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">_setAssetInfo</span><span style="color:#BABED8;">(file</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newInfo) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newInfo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">assetsInfo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">assetsInfo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newInfo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="emitassets" tabindex="-1">emitAssets <a class="header-anchor" href="#emitassets" aria-hidden="true">#</a></h2><p>回到<code>Compiler</code>文件中，<code>seal</code>阶段执行接着会执行<code>emitAssets</code>方法，此时会调用<code>hooks.emit</code>，触发<code>emitFiles</code>方法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> emitFiles </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">assets</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAssets</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">assets</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">assets</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">asyncLib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEachLimit</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">assets</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">file</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">info</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>此时会获取<code>compilation</code>中需要生成文件的代码<code>assets</code>。然后遍历调用<code>writeOut</code>方法将代码写入到对应文件当中。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p><code>emit</code>阶段主要包含两个过程：</p><p>一是遍历<code>chunk</code>，将<code>chunk</code>中<code>modules</code>的代码拼接，对于入口文件还会拼接<code>runtime</code>相关代码。最后形成<code>assets</code>和<code>assetsInfo</code>对象表示文件信息和代码信息。</p><p>二是通过<code>assets</code>和<code>assetsInfo</code>对象将代码写入到对应的文件当中。</p>`,31),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
