import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.b96c6c14.js";const l="/assets/class-component-update-link.e23f81a2.jpeg",g=JSON.parse('{"title":"UpdateQueue","description":"","frontmatter":{},"headers":[],"relativePath":"react/UpdateQueue.md","filePath":"react/UpdateQueue.md","lastUpdated":1698927986000}'),e={name:"react/UpdateQueue.md"},o=p(`<h1 id="updatequeue" tabindex="-1">UpdateQueue <a class="header-anchor" href="#updatequeue" aria-label="Permalink to &quot;UpdateQueue&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><code>React</code>节点状态存储在<code>fiber</code>的<code>memoizedState</code>属性当中，而老<code>fiber</code>节点到新<code>fiber</code>节点的更新操作则存储在<code>fiber</code>的<code>updateQueue</code>属性中。不同类型节点的<code>updateQueue</code>存储内容格式不相同，所对应的功能也有所差异。具体如下：</p><ul><li><code>class</code>组件主要处理<code>state</code>的更新。</li><li>函数组件主要处理<code>effect</code>的<code>create、destroy</code>回调函数。</li><li>普通标签主要处理属性的变动。</li></ul><h2 id="classcomponent-hostroot" tabindex="-1">ClassComponent/HostRoot <a class="header-anchor" href="#classcomponent-hostroot" aria-label="Permalink to &quot;ClassComponent/HostRoot&quot;">​</a></h2><p><code>ClassComponent</code>和<code>HostRoot</code>两者更新的相关代码都存放在<code>react-reconciler</code>包的<code>ReactUpdateQueue.new.js</code>文件当中。下面分别介绍比较重要的几个函数。</p><h3 id="initializeupdatequeue" tabindex="-1">initializeUpdateQueue <a class="header-anchor" href="#initializeupdatequeue" aria-label="Permalink to &quot;initializeUpdateQueue&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeUpdateQueue</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">fiber</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateQueue</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    baseState: fiber.memoizedState,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录第一个更新，与优先级相关</span></span>
<span class="line"><span style="color:#E1E4E8;">    firstBaseUpdate: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录最后一个更新，与优先级相关</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastBaseUpdate: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 存放更新的具体内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    shared: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 一个或多个更新形成的循环链表</span></span>
<span class="line"><span style="color:#E1E4E8;">      pending: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果当前处于 render 阶段，此时产生的更新会放在 interleaved 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 在render结束时，interleaved 变为 pending queue</span></span>
<span class="line"><span style="color:#E1E4E8;">      interleaved: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 更新赛道</span></span>
<span class="line"><span style="color:#E1E4E8;">      lanes: NoLanes,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录更新内容回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    effects: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新队列</span></span>
<span class="line"><span style="color:#E1E4E8;">  fiber.updateQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeUpdateQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">fiber</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">queue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化状态</span></span>
<span class="line"><span style="color:#24292E;">    baseState: fiber.memoizedState,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录第一个更新，与优先级相关</span></span>
<span class="line"><span style="color:#24292E;">    firstBaseUpdate: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录最后一个更新，与优先级相关</span></span>
<span class="line"><span style="color:#24292E;">    lastBaseUpdate: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 存放更新的具体内容</span></span>
<span class="line"><span style="color:#24292E;">    shared: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 一个或多个更新形成的循环链表</span></span>
<span class="line"><span style="color:#24292E;">      pending: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果当前处于 render 阶段，此时产生的更新会放在 interleaved 中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 在render结束时，interleaved 变为 pending queue</span></span>
<span class="line"><span style="color:#24292E;">      interleaved: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 更新赛道</span></span>
<span class="line"><span style="color:#24292E;">      lanes: NoLanes,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录更新内容回调</span></span>
<span class="line"><span style="color:#24292E;">    effects: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新队列</span></span>
<span class="line"><span style="color:#24292E;">  fiber.updateQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数主要用于初始化一个更新队列<code>updateQueue</code>。</p><h3 id="createupdate" tabindex="-1">createUpdate <a class="header-anchor" href="#createupdate" aria-label="Permalink to &quot;createUpdate&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">eventTime</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lane</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lane</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Update</span><span style="color:#E1E4E8;">&lt;*&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">update</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Update</span><span style="color:#E1E4E8;">&lt;*&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新创建开始时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    eventTime,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该更新的 lane</span></span>
<span class="line"><span style="color:#E1E4E8;">    lane,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新的标识符</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag: UpdateState,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    payload: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    callback: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 指向下一个更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    next: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> update;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">eventTime</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lane</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lane</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Update</span><span style="color:#24292E;">&lt;*&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">update</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Update</span><span style="color:#24292E;">&lt;*&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新创建开始时间</span></span>
<span class="line"><span style="color:#24292E;">    eventTime,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该更新的 lane</span></span>
<span class="line"><span style="color:#24292E;">    lane,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新的标识符</span></span>
<span class="line"><span style="color:#24292E;">    tag: UpdateState,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新的内容</span></span>
<span class="line"><span style="color:#24292E;">    payload: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新的回调</span></span>
<span class="line"><span style="color:#24292E;">    callback: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 指向下一个更新</span></span>
<span class="line"><span style="color:#24292E;">    next: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> update;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>createUpdate</code>主要作用是创建一个更新。</p><h3 id="enqueueupdate" tabindex="-1">enqueueUpdate <a class="header-anchor" href="#enqueueupdate" aria-label="Permalink to &quot;enqueueUpdate&quot;">​</a></h3><p><code>enqueueUpdate</code>主要作用是将新增的更新（<code>Update</code>）添加到循环链表中，并存放到<code>updateQueue.shared.pending</code>上，其核心代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pending</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sharedQueue.pending;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pending </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  update.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> update;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  update.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pending.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  pending.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> update;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">sharedQueue.pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> update;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pending</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sharedQueue.pending;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pending </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  update.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> update;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  update.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pending.next;</span></span>
<span class="line"><span style="color:#24292E;">  pending.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> update;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">sharedQueue.pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> update;</span></span></code></pre></div><p><strong>每次添加完update后，pending都会指向这个最新添加的update。由于是循环链表，所以当前的pending的next指向的是第一个更新。</strong></p><h3 id="processupdatequeue" tabindex="-1">processUpdateQueue <a class="header-anchor" href="#processupdatequeue" aria-label="Permalink to &quot;processUpdateQueue&quot;">​</a></h3><p><code>processUpdateQueue</code>主要作用是执行<code>updateQueue</code>来更新<code>state</code>。第一段代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pendingQueue </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  queue.shared.pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到最先的 update，然后将最后的一个 update 的 next 断开</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lastPendingUpdate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pendingQueue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstPendingUpdate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastPendingUpdate.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastPendingUpdate.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastBaseUpdate </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    firstBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastBaseUpdate.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastPendingUpdate;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pendingQueue </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  queue.shared.pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到最先的 update，然后将最后的一个 update 的 next 断开</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lastPendingUpdate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pendingQueue;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstPendingUpdate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastPendingUpdate.next;</span></span>
<span class="line"><span style="color:#24292E;">  lastPendingUpdate.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastBaseUpdate </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    firstBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    lastBaseUpdate.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  lastBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastPendingUpdate;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码可以用下图来表示：</p><p><img src="`+l+`" alt="img"></p><p>注意：其中<code>置为null</code>表示那一条指向是被切断了，也就是不存在该指向了。<strong>另外shared.pending是指向最后一次添加的update的</strong>。</p><p>紧接着就是一个<code>while</code>循环遍历所有的<code>update</code>来处理<code>state</code>。在循环中有一个判断：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isSubsetOfLanes</span><span style="color:#E1E4E8;">(renderLanes, updateLane)) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isSubsetOfLanes</span><span style="color:#24292E;">(renderLanes, updateLane)) {}</span></span></code></pre></div><p>该判断主要是判断当前更新对应的<code>lane</code>是否在<code>renderLanes</code>中，如果不在，那么这次就不应该执行该更新。举一个例子，现在有<code>A,C,B,D</code>四个更新形成的链表，而当前的<code>renderLanes</code>只有<code>A,B</code>两个符合时，此时执行到更新<code>C</code>的时候，会先克隆一个<code>update</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">clone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Update</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  eventTime: updateEventTime,</span></span>
<span class="line"><span style="color:#E1E4E8;">  lane: updateLane,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  tag: update.tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">  payload: update.payload,</span></span>
<span class="line"><span style="color:#E1E4E8;">  callback: update.callback,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  next: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">clone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Update</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  eventTime: updateEventTime,</span></span>
<span class="line"><span style="color:#24292E;">  lane: updateLane,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  tag: update.tag,</span></span>
<span class="line"><span style="color:#24292E;">  payload: update.payload,</span></span>
<span class="line"><span style="color:#24292E;">  callback: update.callback,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  next: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>然后将这个<code>update</code>形成链表，并且用<code>newFirstBaseUpdate</code>和<code>newLaseBaseUpdate</code>表示链表的头尾。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lane不符合，那么记录下当前的 update</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newLastBaseUpdate </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  newFirstBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newLastBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clone;</span></span>
<span class="line"><span style="color:#E1E4E8;">  newBaseState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newState;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  newLastBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newLastBaseUpdate.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clone;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lane不符合，那么记录下当前的 update</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newLastBaseUpdate </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  newFirstBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newLastBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clone;</span></span>
<span class="line"><span style="color:#24292E;">  newBaseState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newState;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  newLastBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newLastBaseUpdate.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clone;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是，一旦<code>C</code>记录下来了，遍历<code>B</code>的时候<code>newLastBaseUpdate !== null</code>，同样会被记录。换句话说，也就是当某一个更新的<code>lane</code>不符合时，后续所有的更新都会被单独记录下来。</p><p>另外一种情况是<code>lane</code>符合时，此时会进行执行<code>update</code>，并获取最新的<code>state</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">newState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStateFromUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">newState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStateFromUpdate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><p><code>getStateFromUpdate</code>方法会根据<code>update</code>的<code>tag</code>和<code>payload</code>获取新的<code>state</code>。</p><p>随后，将执行了的<code>update</code>存放到<code>effects</code>中，以便更新完成时触发其回调。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (effects </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  queue.effects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [update];</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> effects.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(update);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effects </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  queue.effects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [update];</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> effects.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(update);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，更新状态后，将对应的属性更新：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">queue.baseState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((</span><span style="color:#FFAB70;">newBaseState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">queue</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">firstBaseUpdate</span><span style="color:#E1E4E8;"> = </span><span style="color:#B392F0;">newFirstBaseUpdate</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">queue</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">lastBaseUpdate</span><span style="color:#E1E4E8;"> = </span><span style="color:#B392F0;">newLastBaseUpdate</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">workInProgress</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">memoizedState</span><span style="color:#E1E4E8;"> = </span><span style="color:#B392F0;">newState</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">queue.baseState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((</span><span style="color:#E36209;">newBaseState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">queue</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">firstBaseUpdate</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">newFirstBaseUpdate</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">queue</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">lastBaseUpdate</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">newLastBaseUpdate</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">workInProgress</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">memoizedState</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">newState</span><span style="color:#24292E;">;</span></span></code></pre></div><p>注意此时的<code>newState</code>代表的是执行了所有可执行<code>update</code>的<code>state</code>，如执行了<code>A，B</code>这两个更新。而<code>baseState</code>表示第一次<code>lane</code>不符合时，前面的<code>state</code>，如遇到<code>C</code>时，<code>lane</code>不符合，<code>baseState</code>记录的是<code>A</code>更新后的<code>state</code>。</p><p>这样的话，在下一轮更新时，由于<code>lastBaseUpdate</code>存在：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastBaseUpdate </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstBaseUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastBaseUpdate.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastBaseUpdate </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  firstBaseUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  lastBaseUpdate.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstPendingUpdate;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时会将下一轮的更新于当前轮次跳过的更新合并在一次执行，也就是下一轮在执行更新前，会执行本轮跳过的更新，如<code>B，C，D</code>这个三个更新。这也是为什么<code>baseState</code>只记录<code>A</code>更新的原因了，因为它可以作为下一轮更新的起始<code>state</code>。</p><h3 id="commitupdatequeue" tabindex="-1">commitUpdateQueue <a class="header-anchor" href="#commitupdatequeue" aria-label="Permalink to &quot;commitUpdateQueue&quot;">​</a></h3><p><code>commitUpdateQueue</code>比较简单，就是执行已经被执行了的<code>update</code>的<code>callback</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> effects.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">effect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effects[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect.callback;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (callback </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    effect.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callCallback</span><span style="color:#E1E4E8;">(callback, instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> effects.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">effect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effects[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect.callback;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (callback </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    effect.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callCallback</span><span style="color:#24292E;">(callback, instance);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="functioncomponent" tabindex="-1">FunctionComponent <a class="header-anchor" href="#functioncomponent" aria-label="Permalink to &quot;FunctionComponent&quot;">​</a></h2><p>函数式组件的<code>updateQueue</code>与<code>class</code>组件的差异比较大。它的<code>updateQueue</code>主要用于存放生命周期的回调函数。找到<code>ReactFiberHooks.new.js</code>文件的<code>pushEffect</code>方法，首先会创建一个<code>effect</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">effect</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Effect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 表示 hook 的 tag</span></span>
<span class="line"><span style="color:#E1E4E8;">  tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建时的回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  create,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 销毁时的回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  destroy,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// hook 的依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">  deps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指向下一个 effect</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">null</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">effect</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Effect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 表示 hook 的 tag</span></span>
<span class="line"><span style="color:#24292E;">  tag,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建时的回调函数</span></span>
<span class="line"><span style="color:#24292E;">  create,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 销毁时的回调函数</span></span>
<span class="line"><span style="color:#24292E;">  destroy,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// hook 的依赖</span></span>
<span class="line"><span style="color:#24292E;">  deps,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指向下一个 effect</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">null</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>随后将该<code>effect</code>形成循环链表（该链表形式与<code>class</code>组件类似），放入到<code>updateQueue</code>的<code>lastEffect</code>属性当中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">firstEffect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">lastEffect.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect;</span></span>
<span class="line"><span style="color:#E1E4E8;">effect.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> firstEffect;</span></span>
<span class="line"><span style="color:#E1E4E8;">currentlyRenderingFiber.updateQueue.lastEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> effect;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstEffect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastEffect.next;</span></span>
<span class="line"><span style="color:#24292E;">lastEffect.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect;</span></span>
<span class="line"><span style="color:#24292E;">effect.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstEffect;</span></span>
<span class="line"><span style="color:#24292E;">currentlyRenderingFiber.updateQueue.lastEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> effect;</span></span></code></pre></div><h2 id="hostcomponent" tabindex="-1">HostComponent <a class="header-anchor" href="#hostcomponent" aria-label="Permalink to &quot;HostComponent&quot;">​</a></h2><p><code>HostComponent</code>的<code>updateQueue</code>主要记录<code>props</code>的变化。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updatePayload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">  oldProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentHostContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">workInProgress.</span><span style="color:#B392F0;">updateQueue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">updatePayload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updatePayload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  instance,</span></span>
<span class="line"><span style="color:#24292E;">  type,</span></span>
<span class="line"><span style="color:#24292E;">  oldProps,</span></span>
<span class="line"><span style="color:#24292E;">  newProps,</span></span>
<span class="line"><span style="color:#24292E;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;">  currentHostContext,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">workInProgress.</span><span style="color:#6F42C1;">updateQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">updatePayload</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>prepareUpdate</code>方法在<code>react-dom</code>包中的<code>ReactDOMHostConfig.js</code>文件中定义：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">diffProperties</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    domElement,</span></span>
<span class="line"><span style="color:#E1E4E8;">    type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">    newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">diffProperties</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    domElement,</span></span>
<span class="line"><span style="color:#24292E;">    type,</span></span>
<span class="line"><span style="color:#24292E;">    oldProps,</span></span>
<span class="line"><span style="color:#24292E;">    newProps,</span></span>
<span class="line"><span style="color:#24292E;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span></code></pre></div><p>它主要是调用<code>diffProperties</code>方法，将新旧<code>props</code>进行对比，最后将改变了的属性记录成数组形式。其中偶数<code>index</code>为键，奇数<code>index</code>为值，结构大致如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;张三&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">333</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">, { color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;"> }]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">333</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">, { color: </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;"> }]</span></span></code></pre></div>`,55),t=[o];function c(r,E,y,i,d,u){return a(),n("div",null,t)}const h=s(e,[["render",c]]);export{g as __pageData,h as default};
