import{_ as e,c as a,o as l,a as t}from"./app.da177e40.js";const f=JSON.parse('{"title":"二叉查找树（BST）","description":"","frontmatter":{},"headers":[{"level":2,"title":"增加","slug":"增加","link":"#增加","children":[]},{"level":2,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":2,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":2,"title":"遍历","slug":"遍历","link":"#遍历","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"data-structures/二叉查找树.md","lastUpdated":1677323371000}'),i={name:"data-structures/二叉查找树.md"},r=t('<h1 id="二叉查找树-bst" tabindex="-1">二叉查找树（BST） <a class="header-anchor" href="#二叉查找树-bst" aria-hidden="true">#</a></h1><h2 id="增加" tabindex="-1">增加 <a class="header-anchor" href="#增加" aria-hidden="true">#</a></h2><ul><li>递归对比大小，找到合适位置插入。</li></ul><h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-hidden="true">#</a></h2><ul><li>如果没有孩子结点，直接删除。</li><li>如果只有一个孩子结点，则将孩子结点替换当前结点即可。</li><li>如果有两个孩子结点，要么查找<strong>左子树上的最大值</strong>，要么查找<strong>右子树上的最小值</strong>，然后将需要删除的结点替换为这个值，最后删除查找到的那个结点。</li></ul><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-hidden="true">#</a></h2><ul><li>递归查找</li></ul><h2 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-hidden="true">#</a></h2><ul><li><strong>中序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之间</li><li><strong>前序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之前</li><li><strong>后序遍历</strong>：子树根关键字位于其左子树的关键字值和右子树的关键字值之后</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li>算法导论 - 二叉搜索树</li><li>数据结构与算法JavaScript描述</li></ul>',11),n=[r];function s(d,h,c,o,_,u){return l(),a("div",null,n)}const p=e(i,[["render",s]]);export{f as __pageData,p as default};
