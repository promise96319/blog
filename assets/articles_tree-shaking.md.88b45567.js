import{_ as e,c as a,o as s,a as l}from"./app.788a9091.js";const o="/assets/tree-shaking.e0e3f829.svg",b=JSON.parse('{"title":"Tree Shaking 原理和组件库按需加载实践","description":"","frontmatter":{},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"Tree Shaking 原理","slug":"tree-shaking-原理","link":"#tree-shaking-原理","children":[]},{"level":2,"title":"实际应用：组件库按需加载","slug":"实际应用-组件库按需加载","link":"#实际应用-组件库按需加载","children":[{"level":3,"title":"ES module","slug":"es-module","link":"#es-module","children":[]},{"level":3,"title":"babel-plugin-import","slug":"babel-plugin-import","link":"#babel-plugin-import","children":[]}]},{"level":2,"title":"side effects","slug":"side-effects","link":"#side-effects","children":[]},{"level":2,"title":"cjs 与 es 区别","slug":"cjs-与-es-区别","link":"#cjs-与-es-区别","children":[]},{"level":2,"title":"todo","slug":"todo","link":"#todo","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"articles/tree-shaking.md","lastUpdated":1677396047000}'),n={name:"articles/tree-shaking.md"},t=l('<h1 id="tree-shaking-原理和组件库按需加载实践" tabindex="-1">Tree Shaking 原理和组件库按需加载实践 <a class="header-anchor" href="#tree-shaking-原理和组件库按需加载实践" aria-hidden="true">#</a></h1><p><img src="'+o+`" alt="tree shaking"></p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// common.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 无用代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./common.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"></span></code></pre></div><p>问题：变量 <code>b</code> 虽然没有用到，但是打包时依然会保留。 解决：通过 <code>Tree Shaking</code>，对没有用到的代码进行标记清除，达到减小打包体积的目的。</p><h2 id="tree-shaking-原理" tabindex="-1">Tree Shaking 原理 <a class="header-anchor" href="#tree-shaking-原理" aria-hidden="true">#</a></h2><h2 id="实际应用-组件库按需加载" tabindex="-1">实际应用：组件库按需加载 <a class="header-anchor" href="#实际应用-组件库按需加载" aria-hidden="true">#</a></h2><h3 id="es-module" tabindex="-1">ES module <a class="header-anchor" href="#es-module" aria-hidden="true">#</a></h3><ul><li>组件库导出需要有 <code>es</code> 模块。如 <code>dist/es/组件内容</code></li><li>外部引入时，需要可以指向 <code>es</code>，通过 <code>package.json</code> 里的 <code>module</code> 字段制定。</li><li><code>package.json</code> 中需要指定 <code>sideEffects</code>，标识副作用。</li><li>项目中使用时，需要保证编译后都是 <code>es</code> 模块。比如 <code>tsconfig.json</code> 里的 <code>module</code>、<code>@babel/preset-env</code> 里的 <code>module</code> 属性， 都有可能更改模块形式。</li><li>例如：<code>lodash</code> =&gt; <code>lodash-es</code></li></ul><h3 id="babel-plugin-import" tabindex="-1">babel-plugin-import <a class="header-anchor" href="#babel-plugin-import" aria-hidden="true">#</a></h3><p>将 <code>import { Button } from &#39;xxx&#39;</code> 改写为 <code>import { Button } from &#39;xxx/button&#39;</code></p><ul><li>类型可以不考虑，因为经过 <code>ts-loader</code> 后，类型被剔除了。</li><li>对于不规则的组件名称，需要通过 <code>customName</code> 方法来自定义相应的引入路径。</li><li>例如：<code>loadash</code> 引入路径转换</li></ul><h2 id="side-effects" tabindex="-1">side effects <a class="header-anchor" href="#side-effects" aria-hidden="true">#</a></h2><ul><li>package.json side effects <ul><li>引入外部模块 <code>import &#39;test&#39;</code> 会查找外部模块的 <code>package.json</code> 看是否有 <code>sideEffects</code>。</li><li>引入没有导出：<code>import &#39;./index.js&#39;</code> 会查找自身 <code>package.json</code> 看是否有 <code>sideEffects</code> 。</li><li>导出了但是没有使用：<code>export { xx } from &#39;xxx&#39;</code> 会查找自身 <code>package.json</code> 看是否有 <code>sideEffects</code>。</li><li>如果导出被使用或者有 <code>sideEffects</code> 的文件会被计算分析。</li></ul></li></ul><h2 id="cjs-与-es-区别" tabindex="-1">cjs 与 es 区别 <a class="header-anchor" href="#cjs-与-es-区别" aria-hidden="true">#</a></h2><ul><li>cjs 为值拷贝（浅拷贝），es 为引用</li></ul><h2 id="todo" tabindex="-1">todo <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2><ul><li>commonjs 是如何也支持 tree shaking 的？ <ul><li><a href="https://webpack.docschina.org/blog/2020-10-10-webpack-5-release/#commonjs-tree-shaking" target="_blank" rel="noreferrer">https://webpack.docschina.org/blog/2020-10-10-webpack-5-release/#commonjs-tree-shaking</a></li><li>对于部分语法，会同 es module 一样进行标记清除。 <ul><li>支持 require(&#39;xxx&#39;).xxx，对于动态路径、动态名称，动态属性无法进行标记清除，如 require(&#39;xxx&#39;)[&#39;&#39; + &#39;xxx&#39;]</li><li>const { a } = require(&#39;xxx&#39;) 会全量引入，不支持 tree shaking。</li><li>if 语句内部，同样遵循上述两条规则。</li><li>require(&#39;xxx&#39;).xxx 有一定的局限性。一旦导入了，就意味着使用了，比如引入。</li><li><a href="https://github.com/webpack/webpack/projects/5#card-30291446" target="_blank" rel="noreferrer">https://github.com/webpack/webpack/projects/5#card-30291446</a></li><li>webpack 尚未处理部分 cjs 语法的 tree-shaking，证明这些是可以处理的，这意味着 commonjs 也可以先进行语法分析？</li></ul></li></ul></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><p><a href="https://www.npmjs.com/package/lodash-es" target="_blank" rel="noreferrer">lodash-es</a></p></li><li><p><a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noreferrer">webpack tree shaking</a></p></li><li><p><a href="https://jishuin.proginn.com/p/763bfbd6d79a" target="_blank" rel="noreferrer">从 Tree Shaking 来走进 Babel 插件开发者的世界</a></p></li><li><p><a href="https://github.com/SunshowerC/blog/issues/8" target="_blank" rel="noreferrer">package.json 中 你还不清楚的 browser，module，main 字段优先级</a></p></li><li><p><a href="https://www.webpackjs.com/plugins/module-concatenation-plugin/" target="_blank" rel="noreferrer">webpack concatenated module</a></p></li><li><p><a href="https://babeljs.io/docs/en/babel-preset-env#modules" target="_blank" rel="noreferrer">@babel/preset-env</a></p></li><li><p><a href="https://github.com/jht6/blogs/issues/63" target="_blank" rel="noreferrer">package.json 别名</a></p></li><li><p><a href="https://blog.csdn.net/u012961419/article/details/107094056" target="_blank" rel="noreferrer">side effects</a></p></li><li><p><a href="https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free" target="_blank" rel="noreferrer">webpack mark-the-file-as-side-effect-free</a></p></li><li><p><a href="https://blog.logrocket.com/tree-shaking-and-code-splitting-in-webpack/" target="_blank" rel="noreferrer">Root.Title tree shaking 失效</a></p></li></ul>`,20),r=[t];function i(c,p,d,h,g,f){return s(),a("div",null,r)}const k=e(n,[["render",i]]);export{b as __pageData,k as default};
