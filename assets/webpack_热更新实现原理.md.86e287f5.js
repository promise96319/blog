import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.92ce8a2a.js";const p="/assets/hot-replacement-runtime.2b6259be.jpg",h=JSON.parse('{"title":"热更新实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/热更新实现原理.md","filePath":"webpack/热更新实现原理.md","lastUpdated":1695719180000}'),o={name:"webpack/热更新实现原理.md"},e=l(`<h1 id="热更新实现原理" tabindex="-1">热更新实现原理 <a class="header-anchor" href="#热更新实现原理" aria-label="Permalink to &quot;热更新实现原理&quot;">​</a></h1><p><a href="https://webpack.docschina.org/configuration/dev-server/#root" target="_blank" rel="noreferrer">webpack DevServer 配置</a></p><h2 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h2><p>当运行<code>webpack serve</code>命令时，解析命令后会加载<code>node_modules/@webpack-cli/serve/lib/index.js</code>中的<code>ServeCommand</code>，并执行其<code>apply</code>方法，最后触发回调函数，精简后的代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 创建 compiler</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> cli.</span><span style="color:#B392F0;">createCompiler</span><span style="color:#E1E4E8;">(webpackCLIOptions);</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 加载 webpack-dev-server 包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DevServer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">WEBPACK_DEV_SERVER_PACKAGE</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 整理所有 compilers</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> compiler.compilers </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> compiler.compilers </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [compiler];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">possibleCompilers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilers.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> compiler.options.devServer);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilersForDevServer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> possibleCompilers.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> possibleCompilers </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [compilers[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]];</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 遍历所有 compilers</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilerForDevServer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilersForDevServer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5. 提取 devServer 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, (compilerForDevServer.options.devServer </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}));</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServerOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> server;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 6. 运行 devServer</span></span>
<span class="line"><span style="color:#E1E4E8;">    server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DevServer</span><span style="color:#E1E4E8;">(devServerOptions, compiler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> server.start </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    servers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 创建 compiler</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> cli.</span><span style="color:#6F42C1;">createCompiler</span><span style="color:#24292E;">(webpackCLIOptions);</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 加载 webpack-dev-server 包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DevServer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">WEBPACK_DEV_SERVER_PACKAGE</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 整理所有 compilers</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compilers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> compiler.compilers </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> compiler.compilers </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [compiler];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">possibleCompilers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilers.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> compiler.options.devServer);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compilersForDevServer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> possibleCompilers.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> possibleCompilers </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [compilers[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 遍历所有 compilers</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compilerForDevServer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> compilersForDevServer) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 5. 提取 devServer 配置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, (compilerForDevServer.options.devServer </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}));</span></span>
<span class="line"><span style="color:#24292E;">  devServerOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> server;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 6. 运行 devServer</span></span>
<span class="line"><span style="color:#24292E;">    server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DevServer</span><span style="color:#24292E;">(devServerOptions, compiler);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> server.start </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    servers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(server);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="webpack-dev-server" tabindex="-1">webpack-dev-server <a class="header-anchor" href="#webpack-dev-server" aria-label="Permalink to &quot;webpack-dev-server&quot;">​</a></h2><p>找到<code>node_modules/webpack-dev-server/lib/Server.js</code>文件中的<code>start</code>函数，精简后的代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 整理 options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">normalizeOptions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3. 监听请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(listenOptions, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 4. 创建 websocket server</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.webSocketServer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createWebSocketServer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 整理 options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">normalizeOptions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 初始化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3. 监听请求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(listenOptions, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 4. 创建 websocket server</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.webSocketServer) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createWebSocketServer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中最核心的是初始化过程，下面着重讲解<code>initialize</code>方法。</p><h2 id="添加client端socket代码" tabindex="-1">添加client端socket代码 <a class="header-anchor" href="#添加client端socket代码" aria-label="Permalink to &quot;添加client端socket代码&quot;">​</a></h2><p><code>initialize</code>方法首先执行<code>addAdditionalEntries</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加 client socket 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">additionalEntries.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">require</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&quot;../client/index.js&quot;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}?\${</span><span style="color:#E1E4E8;">webSocketURL</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加 webpack dev-server 代码</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.hot </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;only&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpack/hot/only-dev-server&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.hot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpack/hot/dev-server&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">additionalEntries.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(hotEntry);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 应用 entry</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> webpack.EntryPlugin </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">additionalEntry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> additionalEntries) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">EntryPlugin</span><span style="color:#E1E4E8;">(compiler.context, additionalEntry, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加 client socket 代码</span></span>
<span class="line"><span style="color:#24292E;">additionalEntries.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">require</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&quot;../client/index.js&quot;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}?\${</span><span style="color:#24292E;">webSocketURL</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加 webpack dev-server 代码</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.hot </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;only&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  hotEntry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpack/hot/only-dev-server&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.hot) {</span></span>
<span class="line"><span style="color:#24292E;">  hotEntry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpack/hot/dev-server&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">additionalEntries.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(hotEntry);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 应用 entry</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> webpack.EntryPlugin </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">additionalEntry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> additionalEntries) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">EntryPlugin</span><span style="color:#24292E;">(compiler.context, additionalEntry, {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数的主要作用是添加了两个<code>entry</code>，相当于最终打包出来的<code>bundle</code>文件会引入这两个<code>entry</code>对应的代码。</p><h3 id="client-index-js" tabindex="-1">client/index.js <a class="header-anchor" href="#client-index-js" aria-label="Permalink to &quot;client/index.js&quot;">​</a></h3><p>首先是<code>../client/index.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// client/index.js 文件</span></span>
<span class="line"><span style="color:#6A737D;">// 创建了 WebSocket 客户端</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> socketURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createSocketURL</span><span style="color:#E1E4E8;">(parsedResourceQuery);</span></span>
<span class="line"><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(socketURL, onSocketMessage);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// client/socket.js 文件</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> __webpack_dev_server_client__ </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> __webpack_dev_server_client__.default </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> __webpack_dev_server_client__.default </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> __webpack_dev_server_client__ </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> WebSocketClient;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">handlers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  client.</span><span style="color:#B392F0;">onOpen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  client.</span><span style="color:#B392F0;">onClose</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  client.</span><span style="color:#B392F0;">onMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {});</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> socket;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// client/index.js 文件</span></span>
<span class="line"><span style="color:#6A737D;">// 创建了 WebSocket 客户端</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> socketURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createSocketURL</span><span style="color:#24292E;">(parsedResourceQuery);</span></span>
<span class="line"><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(socketURL, onSocketMessage);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// client/socket.js 文件</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> __webpack_dev_server_client__ </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> __webpack_dev_server_client__.default </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> __webpack_dev_server_client__.default </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> __webpack_dev_server_client__ </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> WebSocketClient;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initSocket</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">handlers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">  client.</span><span style="color:#6F42C1;">onOpen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {});</span></span>
<span class="line"><span style="color:#24292E;">  client.</span><span style="color:#6F42C1;">onClose</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {});</span></span>
<span class="line"><span style="color:#24292E;">  client.</span><span style="color:#6F42C1;">onMessage</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {});</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> socket;</span></span></code></pre></div><p>该文件的核心是创建了一个<code>WebSocket</code>的客户端，用于接收服务端传递的信息。</p><h3 id="webpack-hot-dev-server-js" tabindex="-1">webpack/hot/dev-server.js <a class="header-anchor" href="#webpack-hot-dev-server-js" aria-label="Permalink to &quot;webpack/hot/dev-server.js&quot;">​</a></h3><p>其次是<code>dev-server.js</code>文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">updatedModules</span><span style="color:#E1E4E8;">) {})</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> hotEmitter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./emitter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotEmitter.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpackHotUpdate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">currentHash</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastHash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentHash;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">upToDate</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;[HMR] Checking for updates on the server...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">updatedModules</span><span style="color:#24292E;">) {})</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {});</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hotEmitter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./emitter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  hotEmitter.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpackHotUpdate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">currentHash</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    lastHash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentHash;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">upToDate</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;[HMR] Checking for updates on the server...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该代码的核心逻辑是监听<code>webpackHotUpdate</code>事件，触发<code>check</code>方法的执行。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p><code>addAdditionalEntries</code>通过添加两个<code>entry</code>，在<code>bundle</code>里添加了<code>WebSocket</code>客户端代码，使得客户端具备接收服务端消息的能力。</p><h2 id="提供-webpack-dev-server-client" tabindex="-1">提供__webpack_dev_server_client__ <a class="header-anchor" href="#提供-webpack-dev-server-client" aria-label="Permalink to &quot;提供__webpack_dev_server_client__&quot;">​</a></h2><p>添加完<code>entry</code>后，接着调用<code>ProvidePlugin</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">ProvidePlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  __webpack_dev_server_client__: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getClientTransport</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">ProvidePlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  __webpack_dev_server_client__: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getClientTransport</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler);</span></span></code></pre></div><p>该插件相当于为全局提供了变量。这就意味着<code>bundle.js</code>文件里的代码可以访问<code>__webpack_dev_server_client__</code>变量，而<code>this.getClientTransport()</code>方法则是提供客户端的<code>socket</code>代码，这里默认使用的是<code>WebSocket</code>。我们在上面<code>entry</code>中的<code>client/index.js</code>文件中使用到了这个变量。</p><h2 id="hotmodulereplacementplugin" tabindex="-1">HotModuleReplacementPlugin <a class="header-anchor" href="#hotmodulereplacementplugin" aria-label="Permalink to &quot;HotModuleReplacementPlugin&quot;">​</a></h2><p>其次是应用<code>HotModuleReplacementPlugin</code>插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">HotModuleReplacementPlugin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">plugin.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">plugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">HotModuleReplacementPlugin</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plugin.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler);</span></span></code></pre></div><p>该插件定义在<code>webpack/lib/HotModuleReplacementPlugin.js</code>文件中。下面我们分析一下其作用。</p><h3 id="_1-处理热更新api" tabindex="-1">1. 处理热更新api <a class="header-anchor" href="#_1-处理热更新api" aria-label="Permalink to &quot;1. 处理热更新api&quot;">​</a></h3><p>首先会定义<code>module.hot</code>相关<code>api</code>的<code>dependency</code>以及<code>template</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//#region module.hot.* API</span></span>
<span class="line"><span style="color:#E1E4E8;">compilation.dependencyFactories.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ModuleHotAcceptDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">  normalModuleFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">compilation.dependencyTemplates.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ModuleHotAcceptDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ModuleHotAcceptDependency.</span><span style="color:#B392F0;">Template</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">compilation.dependencyFactories.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ModuleHotDeclineDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">  normalModuleFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">compilation.dependencyTemplates.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  ModuleHotDeclineDependency,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ModuleHotDeclineDependency.</span><span style="color:#B392F0;">Template</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//#region module.hot.* API</span></span>
<span class="line"><span style="color:#24292E;">compilation.dependencyFactories.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ModuleHotAcceptDependency,</span></span>
<span class="line"><span style="color:#24292E;">  normalModuleFactory</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">compilation.dependencyTemplates.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ModuleHotAcceptDependency,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ModuleHotAcceptDependency.</span><span style="color:#6F42C1;">Template</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">compilation.dependencyFactories.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ModuleHotDeclineDependency,</span></span>
<span class="line"><span style="color:#24292E;">  normalModuleFactory</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">compilation.dependencyTemplates.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  ModuleHotDeclineDependency,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ModuleHotDeclineDependency.</span><span style="color:#6F42C1;">Template</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>然后监听<code>parser</code>阶段，对<code>module.hot</code>等<code>api</code>进行解析，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">parser.hooks.call</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;module.hot.accept&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createAcceptHandler</span><span style="color:#E1E4E8;">(parser, ModuleHotAcceptDependency)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">parser.hooks.call</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;module.hot.accept&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createAcceptHandler</span><span style="color:#24292E;">(parser, ModuleHotAcceptDependency)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>因此<code>module.hot</code>等<code>api</code>经过<code>parser</code>后会变为相应的<code>dependency</code>。在<code>code generate</code>时，调用对应的<code>template</code>生成新的代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 转换前</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;./moduleB.js&#39;</span><span style="color:#E1E4E8;">], () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;======&gt;  accept B&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转换后</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">([</span><span style="color:#6A737D;">/*! ./moduleB.js */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/moduleB.js&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">__WEBPACK_OUTDATED_DEPENDENCIES__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* harmony import */</span><span style="color:#E1E4E8;"> _moduleB__WEBPACK_IMPORTED_MODULE_0__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/*! ./moduleB.js */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./src/moduleB.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;======&gt;  accept B&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })(__WEBPACK_OUTDATED_DEPENDENCIES__); </span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 转换前</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;./moduleB.js&#39;</span><span style="color:#24292E;">], () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;======&gt;  accept B&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转换后</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">([</span><span style="color:#6A737D;">/*! ./moduleB.js */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/moduleB.js&quot;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">__WEBPACK_OUTDATED_DEPENDENCIES__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* harmony import */</span><span style="color:#24292E;"> _moduleB__WEBPACK_IMPORTED_MODULE_0__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/*! ./moduleB.js */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./src/moduleB.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;======&gt;  accept B&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })(__WEBPACK_OUTDATED_DEPENDENCIES__); </span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-hooks-additionaltreeruntimerequirements" tabindex="-1">2. hooks.additionalTreeRuntimeRequirements <a class="header-anchor" href="#_2-hooks-additionaltreeruntimerequirements" aria-label="Permalink to &quot;2. hooks.additionalTreeRuntimeRequirements&quot;">​</a></h3><p>在<code>seal</code>阶段，所有模块的代码生成之后，会调用<code>additionalTreeRuntimeRequirements</code>钩子，用于添加模块在代码生成时需要的<code>runtime</code>代码。如果使用到了热更新功能，那么会添加热更新相关的<code>runtime</code>代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.additionalTreeRuntimeRequirements.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">runtimeRequirements</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(RuntimeGlobals.hmrDownloadManifest);</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(RuntimeGlobals.hmrDownloadUpdateHandlers);</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(RuntimeGlobals.interceptModuleExecution);</span></span>
<span class="line"><span style="color:#E1E4E8;">    runtimeRequirements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(RuntimeGlobals.moduleCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.</span><span style="color:#B392F0;">addRuntimeModule</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HotModuleReplacementRuntimeModule</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.additionalTreeRuntimeRequirements.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">, </span><span style="color:#E36209;">runtimeRequirements</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(RuntimeGlobals.hmrDownloadManifest);</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(RuntimeGlobals.hmrDownloadUpdateHandlers);</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(RuntimeGlobals.interceptModuleExecution);</span></span>
<span class="line"><span style="color:#24292E;">    runtimeRequirements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(RuntimeGlobals.moduleCache);</span></span>
<span class="line"><span style="color:#24292E;">    compilation.</span><span style="color:#6F42C1;">addRuntimeModule</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      chunk,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HotModuleReplacementRuntimeModule</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>注意这个时候添加了一个新的module为HotModuleReplacementRuntimeModule。在<code>webpack/lib/hmr/HotModuleReplacementRuntimeModule.js</code>中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HotModuleReplacementRuntimeModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeModule</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hot module replacement&quot;</span><span style="color:#E1E4E8;">, RuntimeModule.</span><span style="color:#79B8FF;">STAGE_BASIC</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Template.</span><span style="color:#B392F0;">getFunctionContent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./HotModuleReplacement.runtime.js&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">getFullHash</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, RuntimeGlobals.getFullHash)</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">interceptModuleExecution</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    RuntimeGlobals.interceptModuleExecution</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">moduleCache</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, RuntimeGlobals.moduleCache)</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">hmrModuleData</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, RuntimeGlobals.hmrModuleData)</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">hmrDownloadManifest</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, RuntimeGlobals.hmrDownloadManifest)</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">hmrInvalidateModuleHandlers</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    RuntimeGlobals.hmrInvalidateModuleHandlers</span></span>
<span class="line"><span style="color:#E1E4E8;">   )</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">hmrDownloadUpdateHandlers</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    RuntimeGlobals.hmrDownloadUpdateHandlers</span></span>
<span class="line"><span style="color:#E1E4E8;">   );</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HotModuleReplacementRuntimeModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeModule</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hot module replacement&quot;</span><span style="color:#24292E;">, RuntimeModule.</span><span style="color:#005CC5;">STAGE_BASIC</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Template.</span><span style="color:#6F42C1;">getFunctionContent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./HotModuleReplacement.runtime.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">getFullHash</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, RuntimeGlobals.getFullHash)</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">interceptModuleExecution</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    RuntimeGlobals.interceptModuleExecution</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">moduleCache</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, RuntimeGlobals.moduleCache)</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">hmrModuleData</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, RuntimeGlobals.hmrModuleData)</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">hmrDownloadManifest</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, RuntimeGlobals.hmrDownloadManifest)</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">hmrInvalidateModuleHandlers</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    RuntimeGlobals.hmrInvalidateModuleHandlers</span></span>
<span class="line"><span style="color:#24292E;">   )</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">hmrDownloadUpdateHandlers</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    RuntimeGlobals.hmrDownloadUpdateHandlers</span></span>
<span class="line"><span style="color:#24292E;">   );</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>在生成代码阶段会调用module.generate方法，所以HotModuleReplacementRuntimeModule模块最终生成的代码相当于require(&quot;./HotModuleReplacement.runtime.js&quot;)文件中的代码，然后用正则将$开头的一些变量替换后的代码。而这个文件的代码，正是热更新中更新过程的核心代码。</strong></p><h3 id="_3-hooks-fullhash" tabindex="-1">3. hooks.fullhash <a class="header-anchor" href="#_3-hooks-fullhash" aria-label="Permalink to &quot;3. hooks.fullhash&quot;">​</a></h3><p>待<code>runtime</code>代码也被添加之后，为项目生成新的<code>fullhash</code>，此时会调用<code>hooks.fullhash</code>钩子，触发<code>HotModuleReplacementPlugin</code>插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.fullHash.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.chunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modules</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGraph.</span><span style="color:#B392F0;">getChunkModulesIterable</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fullHashModulesInThisChunk.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.fullHashChunkModuleHashes[key] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> hash) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          updatedModules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        fullHashChunkModuleHashes[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.chunkModuleHashes[key] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> hash) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          updatedModules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunkModuleHashes[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.fullHash.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> compilation.chunks) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">modules</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkGraph.</span><span style="color:#6F42C1;">getChunkModulesIterable</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> modules) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fullHashModulesInThisChunk.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">))) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (records.fullHashChunkModuleHashes[key] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> hash) {</span></span>
<span class="line"><span style="color:#24292E;">          updatedModules.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, chunk);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fullHashChunkModuleHashes[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hash;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (records.chunkModuleHashes[key] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> hash) {</span></span>
<span class="line"><span style="color:#24292E;">          updatedModules.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, chunk);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        chunkModuleHashes[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hash;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>这段代码有很多分支，这里做了精简处理。其核心作用是对比<code>chunk</code>中的<code>module</code>的<code>hash</code>值。如果与原来存放的<code>hash</code>不相等，那么将<code>module/chunk</code>添加到<code>updatedModules</code>中。因此，可以判别出哪些<code>module</code>产生了更新。</p><h3 id="_4-hooks-processassets" tabindex="-1">4. hooks.processAssets <a class="header-anchor" href="#_4-hooks-processassets" aria-label="Permalink to &quot;4. hooks.processAssets&quot;">​</a></h3><p>在所有代码生成完成之后，调用<code>hooks.processAssets</code>钩子，触发<code>HotModuleReplacementPlugin</code>插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.processAssets.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    stage: Compilation.</span><span style="color:#79B8FF;">PROCESS_ASSETS_STAGE_ADDITIONAL</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(records.chunkHashes)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 新 module</span></span>
<span class="line"><span style="color:#E1E4E8;">      newModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGraph</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getChunkModules</span><span style="color:#E1E4E8;">(currentChunk)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> updatedModules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, currentChunk));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 新 runtime module</span></span>
<span class="line"><span style="color:#E1E4E8;">      newRuntimeModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        chunkGraph.</span><span style="color:#B392F0;">getChunkRuntimeModulesIterable</span><span style="color:#E1E4E8;">(currentChunk)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> updatedModules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, currentChunk));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 新 fullhash module</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fullHashModules</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            chunkGraph.</span><span style="color:#B392F0;">getChunkFullHashModulesIterable</span><span style="color:#E1E4E8;">(currentChunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">      newFullHashModules </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        fullHashModules </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(fullHashModules).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                                           updatedModules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, currentChunk)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                          );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dependentHashModules</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            chunkGraph.</span><span style="color:#B392F0;">getChunkDependentHashModulesIterable</span><span style="color:#E1E4E8;">(currentChunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 新 dependency module</span></span>
<span class="line"><span style="color:#E1E4E8;">      newDependentHashModules </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        dependentHashModules </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(dependentHashModules).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                updatedModules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, currentChunk)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 移除的 runtime module</span></span>
<span class="line"><span style="color:#E1E4E8;">      removedFromRuntime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subtractRuntime</span><span style="color:#E1E4E8;">(oldRuntime, newRuntime);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.processAssets.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    stage: Compilation.</span><span style="color:#005CC5;">PROCESS_ASSETS_STAGE_ADDITIONAL</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(records.chunkHashes)) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 新 module</span></span>
<span class="line"><span style="color:#24292E;">      newModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkGraph</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getChunkModules</span><span style="color:#24292E;">(currentChunk)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> updatedModules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, currentChunk));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 新 runtime module</span></span>
<span class="line"><span style="color:#24292E;">      newRuntimeModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        chunkGraph.</span><span style="color:#6F42C1;">getChunkRuntimeModulesIterable</span><span style="color:#24292E;">(currentChunk)</span></span>
<span class="line"><span style="color:#24292E;">      ).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> updatedModules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, currentChunk));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 新 fullhash module</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fullHashModules</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            chunkGraph.</span><span style="color:#6F42C1;">getChunkFullHashModulesIterable</span><span style="color:#24292E;">(currentChunk);</span></span>
<span class="line"><span style="color:#24292E;">      newFullHashModules </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        fullHashModules </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(fullHashModules).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                                           updatedModules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, currentChunk)</span></span>
<span class="line"><span style="color:#24292E;">                                          );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dependentHashModules</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            chunkGraph.</span><span style="color:#6F42C1;">getChunkDependentHashModulesIterable</span><span style="color:#24292E;">(currentChunk);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 新 dependency module</span></span>
<span class="line"><span style="color:#24292E;">      newDependentHashModules </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        dependentHashModules </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(dependentHashModules).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                                                updatedModules.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, currentChunk)</span></span>
<span class="line"><span style="color:#24292E;">                                               );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 移除的 runtime module</span></span>
<span class="line"><span style="color:#24292E;">      removedFromRuntime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subtractRuntime</span><span style="color:#24292E;">(oldRuntime, newRuntime);</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>首先会对<code>chunk</code>下的<code>module</code>的<code>hash</code>值进行对比。对比完成后，得到了更新的<code>module</code>。随后为这些更新后的<code>module</code>创建一个新的<code>chunk</code>，类型为<code>HotUpdateChunk</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 创建 HotUpdateChunk</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hotUpdateChunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HotUpdateChunk</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 记录 chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">ChunkGraph.</span><span style="color:#B392F0;">setChunkGraphForChunk</span><span style="color:#E1E4E8;">(hotUpdateChunk, chunkGraph);</span></span>
<span class="line"><span style="color:#E1E4E8;">hotUpdateChunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkId;</span></span>
<span class="line"><span style="color:#E1E4E8;">hotUpdateChunk.runtime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newRuntime;</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 添加到当前 chunkGroup</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentChunk) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> currentChunk.groupsIterable)</span></span>
<span class="line"><span style="color:#E1E4E8;">    hotUpdateChunk.</span><span style="color:#B392F0;">addGroup</span><span style="color:#E1E4E8;">(group);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 建立联系</span></span>
<span class="line"><span style="color:#E1E4E8;">chunkGraph.</span><span style="color:#B392F0;">attachModules</span><span style="color:#E1E4E8;">(hotUpdateChunk, newModules </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []);</span></span>
<span class="line"><span style="color:#E1E4E8;">chunkGraph.</span><span style="color:#B392F0;">attachRuntimeModules</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotUpdateChunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">  newRuntimeModules </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newFullHashModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGraph.</span><span style="color:#B392F0;">attachFullHashModules</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    hotUpdateChunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">    newFullHashModules</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newDependentHashModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGraph.</span><span style="color:#B392F0;">attachDependentHashModules</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    hotUpdateChunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">    newDependentHashModules</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 5. 新增 chunk render</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderManifest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">getRenderManifest</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunk: hotUpdateChunk,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hash: records.hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fullHash: records.hash,</span></span>
<span class="line"><span style="color:#E1E4E8;">  outputOptions: compilation.outputOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">  moduleTemplates: compilation.moduleTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dependencyTemplates: compilation.dependencyTemplates,</span></span>
<span class="line"><span style="color:#E1E4E8;">  codeGenerationResults: compilation.codeGenerationResults,</span></span>
<span class="line"><span style="color:#E1E4E8;">  runtimeTemplate: compilation.runtimeTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">  moduleGraph: compilation.moduleGraph,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkGraph</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 6. 生成代码，并进行 emit</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> renderManifest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> filename;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> assetInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;filename&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> entry) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.filename;</span></span>
<span class="line"><span style="color:#E1E4E8;">    assetInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.info;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ({ path: filename, info: assetInfo } </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">     compilation.</span><span style="color:#B392F0;">getPathWithInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      entry.filenameTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">      entry.pathOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">    ));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.additionalChunkAssets.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.</span><span style="color:#B392F0;">emitAsset</span><span style="color:#E1E4E8;">(filename, source, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hotModuleReplacement: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">assetInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentChunk) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentChunk.files.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.hooks.chunkAsset.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(currentChunk, filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 8. 记录更新的 runtime</span></span>
<span class="line"><span style="color:#B392F0;">forEachRuntime</span><span style="color:#E1E4E8;">(newRuntime, </span><span style="color:#FFAB70;">runtime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotUpdateMainContentByRuntime</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(runtime)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .updatedChunkIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunkId);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 创建 HotUpdateChunk</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hotUpdateChunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HotUpdateChunk</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 记录 chunk</span></span>
<span class="line"><span style="color:#24292E;">ChunkGraph.</span><span style="color:#6F42C1;">setChunkGraphForChunk</span><span style="color:#24292E;">(hotUpdateChunk, chunkGraph);</span></span>
<span class="line"><span style="color:#24292E;">hotUpdateChunk.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkId;</span></span>
<span class="line"><span style="color:#24292E;">hotUpdateChunk.runtime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newRuntime;</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 添加到当前 chunkGroup</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentChunk) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">group</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> currentChunk.groupsIterable)</span></span>
<span class="line"><span style="color:#24292E;">    hotUpdateChunk.</span><span style="color:#6F42C1;">addGroup</span><span style="color:#24292E;">(group);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 建立联系</span></span>
<span class="line"><span style="color:#24292E;">chunkGraph.</span><span style="color:#6F42C1;">attachModules</span><span style="color:#24292E;">(hotUpdateChunk, newModules </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []);</span></span>
<span class="line"><span style="color:#24292E;">chunkGraph.</span><span style="color:#6F42C1;">attachRuntimeModules</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  hotUpdateChunk,</span></span>
<span class="line"><span style="color:#24292E;">  newRuntimeModules </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newFullHashModules) {</span></span>
<span class="line"><span style="color:#24292E;">  chunkGraph.</span><span style="color:#6F42C1;">attachFullHashModules</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    hotUpdateChunk,</span></span>
<span class="line"><span style="color:#24292E;">    newFullHashModules</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newDependentHashModules) {</span></span>
<span class="line"><span style="color:#24292E;">  chunkGraph.</span><span style="color:#6F42C1;">attachDependentHashModules</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    hotUpdateChunk,</span></span>
<span class="line"><span style="color:#24292E;">    newDependentHashModules</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 5. 新增 chunk render</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderManifest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilation.</span><span style="color:#6F42C1;">getRenderManifest</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  chunk: hotUpdateChunk,</span></span>
<span class="line"><span style="color:#24292E;">  hash: records.hash,</span></span>
<span class="line"><span style="color:#24292E;">  fullHash: records.hash,</span></span>
<span class="line"><span style="color:#24292E;">  outputOptions: compilation.outputOptions,</span></span>
<span class="line"><span style="color:#24292E;">  moduleTemplates: compilation.moduleTemplates,</span></span>
<span class="line"><span style="color:#24292E;">  dependencyTemplates: compilation.dependencyTemplates,</span></span>
<span class="line"><span style="color:#24292E;">  codeGenerationResults: compilation.codeGenerationResults,</span></span>
<span class="line"><span style="color:#24292E;">  runtimeTemplate: compilation.runtimeTemplate,</span></span>
<span class="line"><span style="color:#24292E;">  moduleGraph: compilation.moduleGraph,</span></span>
<span class="line"><span style="color:#24292E;">  chunkGraph</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 6. 生成代码，并进行 emit</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">entry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> renderManifest) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> filename;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> assetInfo;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;filename&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> entry) {</span></span>
<span class="line"><span style="color:#24292E;">    filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.filename;</span></span>
<span class="line"><span style="color:#24292E;">    assetInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.info;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ({ path: filename, info: assetInfo } </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">     compilation.</span><span style="color:#6F42C1;">getPathWithInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      entry.filenameTemplate,</span></span>
<span class="line"><span style="color:#24292E;">      entry.pathOptions</span></span>
<span class="line"><span style="color:#24292E;">    ));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  compilation.additionalChunkAssets.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">  compilation.</span><span style="color:#6F42C1;">emitAsset</span><span style="color:#24292E;">(filename, source, {</span></span>
<span class="line"><span style="color:#24292E;">    hotModuleReplacement: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">assetInfo</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentChunk) {</span></span>
<span class="line"><span style="color:#24292E;">    currentChunk.files.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">    compilation.hooks.chunkAsset.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(currentChunk, filename);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 8. 记录更新的 runtime</span></span>
<span class="line"><span style="color:#6F42C1;">forEachRuntime</span><span style="color:#24292E;">(newRuntime, </span><span style="color:#E36209;">runtime</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  hotUpdateMainContentByRuntime</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(runtime)</span></span>
<span class="line"><span style="color:#24292E;">    .updatedChunkIds.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(chunkId);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>具体的执行步骤已经注释，需要注意的是<code>HotUpdateChunk</code>在<code>getRenderManifest</code>时，此时<code>filename</code>获取的是<code>outputOptions.hotUpdateChunkFilename</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 调用getRenderManifest时触发</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filenameTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JavascriptModulesPlugin.</span><span style="color:#B392F0;">getChunkFilenameTemplate</span><span style="color:#E1E4E8;">(chunk, outputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  render,</span></span>
<span class="line"><span style="color:#E1E4E8;">  filenameTemplate,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ..</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  实际使用的是 getChunkFilenameTemplate 方法获取 filename</span></span>
<span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">getChunkFilenameTemplate</span><span style="color:#E1E4E8;">(chunk, outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.filenameTemplate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunk.filenameTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HotUpdateChunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> outputOptions.hotUpdateChunkFilename;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.</span><span style="color:#B392F0;">canBeInitial</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> outputOptions.filename;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> outputOptions.chunkFilename;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 调用getRenderManifest时触发</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filenameTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JavascriptModulesPlugin.</span><span style="color:#6F42C1;">getChunkFilenameTemplate</span><span style="color:#24292E;">(chunk, outputOptions);</span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  render,</span></span>
<span class="line"><span style="color:#24292E;">  filenameTemplate,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ..</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  实际使用的是 getChunkFilenameTemplate 方法获取 filename</span></span>
<span class="line"><span style="color:#24292E;">static </span><span style="color:#6F42C1;">getChunkFilenameTemplate</span><span style="color:#24292E;">(chunk, outputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunk.filenameTemplate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> chunk.filenameTemplate;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunk </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HotUpdateChunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> outputOptions.hotUpdateChunkFilename;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunk.</span><span style="color:#6F42C1;">canBeInitial</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> outputOptions.filename;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> outputOptions.chunkFilename;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而在项目启动的初始化阶段，定义了一些属性，其中就包含<code>hotUpdateChunkFilename</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">(output, </span><span style="color:#9ECBFF;">&quot;hotUpdateChunkFilename&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`[id].[fullhash].hot-update.\${</span><span style="color:#E1E4E8;">output</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">module</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;mjs&quot;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;js&quot;}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">(output, </span><span style="color:#9ECBFF;">&quot;hotUpdateMainFilename&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;[runtime].[fullhash].hot-update.json&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">D</span><span style="color:#24292E;">(output, </span><span style="color:#032F62;">&quot;hotUpdateChunkFilename&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`[id].[fullhash].hot-update.\${</span><span style="color:#24292E;">output</span><span style="color:#032F62;">.</span><span style="color:#24292E;">module</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&quot;mjs&quot;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&quot;js&quot;}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">D</span><span style="color:#24292E;">(output, </span><span style="color:#032F62;">&quot;hotUpdateMainFilename&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;[runtime].[fullhash].hot-update.json&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这就是热更新时<code>xxx.hot-update.js</code>文件生成的实际位置，它包含了所有更新的模块的代码。</p><p>最后，根据更新的模块，将变动信息直接输出到<code>xxx.hot-update.json</code>文件当中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加 xxx-hot-update.json</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">filename</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#79B8FF;">removedChunkIds</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">removedModules</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">updatedChunkIds</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">assetInfo</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> hotUpdateMainContentByFilename) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hotUpdateMainJson</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    c: Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(updatedChunkIds),</span></span>
<span class="line"><span style="color:#E1E4E8;">    r: Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(removedChunkIds),</span></span>
<span class="line"><span style="color:#E1E4E8;">    m:</span></span>
<span class="line"><span style="color:#E1E4E8;">    removedModules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> completelyRemovedModulesArray</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> completelyRemovedModulesArray.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(removedModules, </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                 chunkGraph.</span><span style="color:#B392F0;">getModuleId</span><span style="color:#E1E4E8;">(m)</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RawSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(hotUpdateMainJson));</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.</span><span style="color:#B392F0;">emitAsset</span><span style="color:#E1E4E8;">(filename, source, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hotModuleReplacement: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">assetInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加 xxx-hot-update.json</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">filename</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#005CC5;">removedChunkIds</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">removedModules</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">updatedChunkIds</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">assetInfo</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> hotUpdateMainContentByFilename) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hotUpdateMainJson</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    c: Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(updatedChunkIds),</span></span>
<span class="line"><span style="color:#24292E;">    r: Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(removedChunkIds),</span></span>
<span class="line"><span style="color:#24292E;">    m:</span></span>
<span class="line"><span style="color:#24292E;">    removedModules.size </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> completelyRemovedModulesArray</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> completelyRemovedModulesArray.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(removedModules, </span><span style="color:#E36209;">m</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                 chunkGraph.</span><span style="color:#6F42C1;">getModuleId</span><span style="color:#24292E;">(m)</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RawSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(hotUpdateMainJson));</span></span>
<span class="line"><span style="color:#24292E;">  compilation.</span><span style="color:#6F42C1;">emitAsset</span><span style="color:#24292E;">(filename, source, {</span></span>
<span class="line"><span style="color:#24292E;">    hotModuleReplacement: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">assetInfo</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中<code>c</code>代表更新的<code>chunk id</code>，<code>r</code>代表移除的<code>chunk id</code>，<code>m</code>代表移除的<code>module</code>。</p><h3 id="_5-hooks-record" tabindex="-1">5. hooks.record <a class="header-anchor" href="#_5-hooks-record" aria-label="Permalink to &quot;5. hooks.record&quot;">​</a></h3><p>最终会记录一些<code>hash、id</code>等相关信息：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.record.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.hash </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> compilation.hash) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGraph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.chunkGraph;</span></span>
<span class="line"><span style="color:#E1E4E8;">    records.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">    records.fullHashChunkModuleHashes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fullHashChunkModuleHashes;</span></span>
<span class="line"><span style="color:#E1E4E8;">    records.chunkModuleHashes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkModuleHashes;</span></span>
<span class="line"><span style="color:#E1E4E8;">    records.chunkHashes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    records.chunkRuntime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.chunks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      records.chunkHashes[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">      records.chunkRuntime[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRuntimeKey</span><span style="color:#E1E4E8;">(chunk.runtime);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.record.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;HotModuleReplacementPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">, </span><span style="color:#E36209;">records</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (records.hash </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> compilation.hash) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkGraph</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilation.chunkGraph;</span></span>
<span class="line"><span style="color:#24292E;">    records.hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilation.hash;</span></span>
<span class="line"><span style="color:#24292E;">    records.fullHashChunkModuleHashes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fullHashChunkModuleHashes;</span></span>
<span class="line"><span style="color:#24292E;">    records.chunkModuleHashes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkModuleHashes;</span></span>
<span class="line"><span style="color:#24292E;">    records.chunkHashes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    records.chunkRuntime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> compilation.chunks) {</span></span>
<span class="line"><span style="color:#24292E;">      records.chunkHashes[chunk.id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunk.hash;</span></span>
<span class="line"><span style="color:#24292E;">      records.chunkRuntime[chunk.id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRuntimeKey</span><span style="color:#24292E;">(chunk.runtime);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p><code>HotModuleReplacementPlugin</code>的作用实际上有三个：</p><ol><li>处理<code>module.hot.xxx</code>等<code>api</code>，转换成新的代码。</li><li>对比<code>hash</code>值，判断出哪些<code>module/chunk</code>更新。将更新的模块单独生成一个<code>chunk</code>，将代码输出到<code>xxx.hot-update.js</code>文件中。而将更新的信息输出到<code>xxx.hot-update.json</code>文件中。</li><li>添加<code>HotModuleReplacementRuntimeModule</code>模块，供后续触发更新。</li></ol><h2 id="建立服务端server" tabindex="-1">建立服务端server <a class="header-anchor" href="#建立服务端server" aria-label="Permalink to &quot;建立服务端server&quot;">​</a></h2><p><code>webpack</code>中使用<code>express</code>作为服务端框架为浏览器提供服务：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 建立 server</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setupApp</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 检查请求头部信息</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setupHostHeaderCheck</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 server</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 监听</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(listenOptions, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 建立 server</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setupApp</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 检查请求头部信息</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setupHostHeaderCheck</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 server</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 监听</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(listenOptions, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在<code>express</code>的基础上，创建服务端的<code>WebSocket</code>，用于给客户端发送信息：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">createWebSocketServer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.webSocketServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getServerTransport</span><span style="color:#E1E4E8;">())(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.webSocketServer.implementation.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;connection&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">createWebSocketServer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.webSocketServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getServerTransport</span><span style="color:#24292E;">())(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.webSocketServer.implementation.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;connection&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">client</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因此，服务端通过<code>express</code>为客户端提供<code>api</code>服务，并通过<code>WebSocket</code>给客户端发送信息。</p><h2 id="webpack-dev-middleware" tabindex="-1">webpack-dev-middleware <a class="header-anchor" href="#webpack-dev-middleware" aria-label="Permalink to &quot;webpack-dev-middleware&quot;">​</a></h2><p>在向<code>express</code>发送请求时，会经过<code>webpack-dev-middleware</code>中间件，它的调用在<code>setupDevMiddleware</code>中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setupDevMiddleware</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpackDevMiddleware</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpack-dev-middleware&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.middleware </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpackDevMiddleware</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.compiler,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.devMiddleware</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setupDevMiddleware</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpackDevMiddleware</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpack-dev-middleware&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.middleware </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">webpackDevMiddleware</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.compiler,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.devMiddleware</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>webpackDevMiddleware</code>方法核心如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">context.watching </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.compiler.</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(watchOptions, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, _middleware.default)(context); </span><span style="color:#6A737D;">// API</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">context.watching </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.compiler.</span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(watchOptions, </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { });</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, _middleware.default)(context); </span><span style="color:#6A737D;">// API</span></span></code></pre></div><p>一是调用<code>compiler.watch</code>方法进行编译并监听文件变化，二是应用<code>webpack-dev-middleware</code>中间件。</p><p>在编译的过程中会调用前面提到的<code>HotModuleReplacementPlugin</code>，并且编译完成后触发<code>hooks.done</code>钩子。而在<code>webpack-dev-server</code>中，监听了<code>hooks.done</code>钩子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setupHooks</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.compiler.hooks.done.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpack-dev-server&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 编译完成，发送给 server websocket</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.webSocketServer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sendStats</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.webSocketServer.clients, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getStats</span><span style="color:#E1E4E8;">(stats));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.stats </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stats;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setupHooks</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.compiler.hooks.done.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpack-dev-server&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 编译完成，发送给 server websocket</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.webSocketServer) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sendStats</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.webSocketServer.clients, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getStats</span><span style="color:#24292E;">(stats));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.stats </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stats;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时会通过服务端<code>server</code>向所有客户端发送编译完成的消息，如<code>&quot;ok&quot;</code>。</p><p>来到<code>webpack-dev-server/client/index.js</code>，有接收消息的回调：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Ok&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.overlay) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hide</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">reloadApp</span><span style="color:#E1E4E8;">(options, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sendMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Ok&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.overlay) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hide</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">reloadApp</span><span style="color:#24292E;">(options, status);</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>此时触发<code>reloadApp</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hot </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> allowToHot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotEmitter.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpackHotUpdate&quot;</span><span style="color:#E1E4E8;">, status.currentHash);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hot </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> allowToHot) {</span></span>
<span class="line"><span style="color:#24292E;">  hotEmitter.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpackHotUpdate&quot;</span><span style="color:#24292E;">, status.currentHash);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最终触发<code>webpackHotUpdate</code>事件，而在<code>webpack/hot/dev-server.js</code>文件中，监听了该事件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">updatedModules</span><span style="color:#E1E4E8;">) {})</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> hotEmitter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./emitter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  hotEmitter.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;webpackHotUpdate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">currentHash</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">upToDate</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">updatedModules</span><span style="color:#24292E;">) {})</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {});</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hotEmitter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./emitter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  hotEmitter.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpackHotUpdate&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">currentHash</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">upToDate</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时会调用<code>module.hot.check(true)</code>方法。</p><h2 id="hotcheck" tabindex="-1">hotCheck <a class="header-anchor" href="#hotcheck" aria-label="Permalink to &quot;hotCheck&quot;">​</a></h2><p><code>module.hot.check(true)</code>方法对应于<code>webpack/lib/hmr/HotModuleReplacement.runtime.js</code>文件中的<code>hotCheck</code>方法，实际编译后的代码类似如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hotCheck</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">applyOnUpdate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;check&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 1. 请求 xxx-hot-update.json 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(__webpack_require__.hmrM)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">update</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;prepare&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> updatedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    blockingPromises </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentUpdateApplyHandlers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 请求变更后的 chunks</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">     Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(__webpack_require__.hmrC).</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">promises</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">key</span></span>
<span class="line"><span style="color:#E1E4E8;">     ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      __webpack_require__.hmrC[key](</span></span>
<span class="line"><span style="color:#E1E4E8;">       update.c,</span></span>
<span class="line"><span style="color:#E1E4E8;">       update.r,</span></span>
<span class="line"><span style="color:#E1E4E8;">       update.m,</span></span>
<span class="line"><span style="color:#E1E4E8;">       promises,</span></span>
<span class="line"><span style="color:#E1E4E8;">       currentUpdateApplyHandlers,</span></span>
<span class="line"><span style="color:#E1E4E8;">       updatedModules</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> promises;</span></span>
<span class="line"><span style="color:#E1E4E8;">     },</span></span>
<span class="line"><span style="color:#E1E4E8;">     [])</span></span>
<span class="line"><span style="color:#E1E4E8;">    ).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">waitForBlockingPromises</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (applyOnUpdate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 3. 进行热更新应用</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internalApply</span><span style="color:#E1E4E8;">(applyOnUpdate);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ready&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> updatedModules;</span></span>
<span class="line"><span style="color:#E1E4E8;">       });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">     });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hotCheck</span><span style="color:#24292E;">(</span><span style="color:#E36209;">applyOnUpdate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;check&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 1. 请求 xxx-hot-update.json 文件</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(__webpack_require__.hmrM)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">update</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;prepare&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> updatedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    blockingPromises </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    currentUpdateApplyHandlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 请求变更后的 chunks</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">     Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(__webpack_require__.hmrC).</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">promises</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">key</span></span>
<span class="line"><span style="color:#24292E;">     ) {</span></span>
<span class="line"><span style="color:#24292E;">      __webpack_require__.hmrC[key](</span></span>
<span class="line"><span style="color:#24292E;">       update.c,</span></span>
<span class="line"><span style="color:#24292E;">       update.r,</span></span>
<span class="line"><span style="color:#24292E;">       update.m,</span></span>
<span class="line"><span style="color:#24292E;">       promises,</span></span>
<span class="line"><span style="color:#24292E;">       currentUpdateApplyHandlers,</span></span>
<span class="line"><span style="color:#24292E;">       updatedModules</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> promises;</span></span>
<span class="line"><span style="color:#24292E;">     },</span></span>
<span class="line"><span style="color:#24292E;">     [])</span></span>
<span class="line"><span style="color:#24292E;">    ).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">waitForBlockingPromises</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (applyOnUpdate) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 3. 进行热更新应用</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internalApply</span><span style="color:#24292E;">(applyOnUpdate);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ready&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> updatedModules;</span></span>
<span class="line"><span style="color:#24292E;">       });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">     });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="fullhash-hot-update-json" tabindex="-1">[fullhash].hot-update.json <a class="header-anchor" href="#fullhash-hot-update-json" aria-label="Permalink to &quot;[fullhash].hot-update.json&quot;">​</a></h3><p><code>__webpack_require__.hmrM</code>对应的代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* webpack/runtime/getFullHash */</span></span>
<span class="line"><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;a4c01381c6f871e5f847&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* webpack/runtime/get update manifest filename */</span></span>
<span class="line"><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">hmrF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;index.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.hot-update.json&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">hmrM</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> fetch </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No browser support: need fetch API&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(__webpack_require__.p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">hmrF</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(response.status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// no update available</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">response.ok) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to fetch update manifest &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> response.statusText);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* webpack/runtime/getFullHash */</span></span>
<span class="line"><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">h</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;a4c01381c6f871e5f847&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* webpack/runtime/get update manifest filename */</span></span>
<span class="line"><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">hmrF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;index.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.hot-update.json&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">__webpack_require__.</span><span style="color:#6F42C1;">hmrM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> fetch </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No browser support: need fetch API&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(__webpack_require__.p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">hmrF</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(response.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">404</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// no update available</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">response.ok) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to fetch update manifest &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> response.statusText);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>实际上它是根据<code>fullhash</code>来拼接更新信息的请求地址，然后发送请求。此时<code>express</code>接收到请求，通过<code>webpack-dev-middleware</code>中间件，在内存中读取<code>[fullhash].hot-update.json</code>文件，并返回给客户端。</p><h3 id="fullhash-hot-update-js" tabindex="-1">[fullhash].hot-update.js <a class="header-anchor" href="#fullhash-hot-update-js" aria-label="Permalink to &quot;[fullhash].hot-update.js&quot;">​</a></h3><p>拿到更新信息后，通过<code>__webpack_require__.hmrC</code>方法加载更新后的<code>chunk</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__webpack_require__.hmrC.</span><span style="color:#B392F0;">jsonp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunkIds</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">removedChunks</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">removedModules</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">promises</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">applyHandlers</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">updatedModulesList</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  applyHandlers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(applyHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentUpdateChunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentUpdateRemovedChunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> removedChunks;</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> removedModules.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    obj[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentUpdateRuntime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkIds.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      __webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(installedChunks, chunkId) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      installedChunks[chunkId] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 根据 chunkId, 加载最新的 chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">      promises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">loadUpdateChunk</span><span style="color:#E1E4E8;">(chunkId, updatedModulesList));</span></span>
<span class="line"><span style="color:#E1E4E8;">      currentUpdateChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__webpack_require__.hmrC.</span><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">chunkIds</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">removedChunks</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">removedModules</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">promises</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">applyHandlers</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">updatedModulesList</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  applyHandlers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(applyHandler);</span></span>
<span class="line"><span style="color:#24292E;">  currentUpdateChunks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  currentUpdateRemovedChunks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> removedChunks;</span></span>
<span class="line"><span style="color:#24292E;">  currentUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> removedModules.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    obj[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">  }, {});</span></span>
<span class="line"><span style="color:#24292E;">  currentUpdateRuntime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  chunkIds.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunkId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      __webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(installedChunks, chunkId) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      installedChunks[chunkId] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 根据 chunkId, 加载最新的 chunk</span></span>
<span class="line"><span style="color:#24292E;">      promises.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">loadUpdateChunk</span><span style="color:#24292E;">(chunkId, updatedModulesList));</span></span>
<span class="line"><span style="color:#24292E;">      currentUpdateChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>其中<code>loadUpdateChunk</code>如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* webpack/runtime/get javascript update chunk filename */</span></span>
<span class="line"><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This function allow to reference all chunks</span></span>
<span class="line"><span style="color:#E1E4E8;">  __webpack_require__.</span><span style="color:#B392F0;">hu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// return url for filenames based on template</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> chunkId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.hot-update.js&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadUpdateChunk</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __webpack_require__.p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> __webpack_require__.</span><span style="color:#B392F0;">hu</span><span style="color:#E1E4E8;">(chunkId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    __webpack_require__.</span><span style="color:#B392F0;">l</span><span style="color:#E1E4E8;">(url, loadingEnded);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* webpack/runtime/get javascript update chunk filename */</span></span>
<span class="line"><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This function allow to reference all chunks</span></span>
<span class="line"><span style="color:#24292E;">  __webpack_require__.</span><span style="color:#6F42C1;">hu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunkId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// return url for filenames based on template</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> chunkId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.hot-update.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadUpdateChunk</span><span style="color:#24292E;">(</span><span style="color:#E36209;">chunkId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __webpack_require__.p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> __webpack_require__.</span><span style="color:#6F42C1;">hu</span><span style="color:#24292E;">(chunkId);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    __webpack_require__.</span><span style="color:#6F42C1;">l</span><span style="color:#24292E;">(url, loadingEnded);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据<code>hot-update.json</code>文件中的<code>chunkId</code>加载最新的<code>chunk</code>。加载完成后，实际是加载的变更后的<code>module</code>代码，类似如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">self[</span><span style="color:#9ECBFF;">&quot;webpackHotUpdatestudy_webpack&quot;</span><span style="color:#E1E4E8;">](</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// chunk id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新的 module</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;./src/moduleB.js&quot;</span><span style="color:#E1E4E8;">:((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xxxxx省略xxxxx&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新的 runtime</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      __webpack_require__.</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;23e988120ea958e8108f&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">self[</span><span style="color:#032F62;">&quot;webpackHotUpdatestudy_webpack&quot;</span><span style="color:#24292E;">](</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// chunk id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新的 module</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;./src/moduleB.js&quot;</span><span style="color:#24292E;">:((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xxxxx省略xxxxx&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新的 runtime</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">__webpack_require__</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      __webpack_require__.</span><span style="color:#6F42C1;">h</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;23e988120ea958e8108f&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>而在入口文件中，定义了<code>webpackHotUpdatestudy_webpack</code>（该变量名称是根据项目名称定的）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">self[</span><span style="color:#9ECBFF;">&quot;webpackHotUpdatestudy_webpack&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">moreModules</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">runtime</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> moreModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      currentUpdate[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentUpdatedModulesList) currentUpdatedModulesList.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(moduleId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (runtime) currentUpdateRuntime.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(runtime);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (waitingUpdateResolves[chunkId]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    waitingUpdateResolves[chunkId]();</span></span>
<span class="line"><span style="color:#E1E4E8;">    waitingUpdateResolves[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">self[</span><span style="color:#032F62;">&quot;webpackHotUpdatestudy_webpack&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunkId</span><span style="color:#24292E;">, </span><span style="color:#E36209;">moreModules</span><span style="color:#24292E;">, </span><span style="color:#E36209;">runtime</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleId </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> moreModules) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#24292E;">      currentUpdate[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentUpdatedModulesList) currentUpdatedModulesList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(moduleId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (runtime) currentUpdateRuntime.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(runtime);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (waitingUpdateResolves[chunkId]) {</span></span>
<span class="line"><span style="color:#24292E;">    waitingUpdateResolves[chunkId]();</span></span>
<span class="line"><span style="color:#24292E;">    waitingUpdateResolves[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>最终更新的<code>module</code>和<code>runtime</code>会记录到<code>currentUpdate</code>和<code>currentUpdateRuntime</code>变量当中。</p><h2 id="hotapply" tabindex="-1">hotApply <a class="header-anchor" href="#hotapply" aria-label="Permalink to &quot;hotApply&quot;">​</a></h2><p>得到更新后的代码后，接下来就需要根据用户定义的<code>module.hot.xxx</code>等<code>api</code>来进行热更新了。</p><h3 id="module-hot相关api定义" tabindex="-1">module.hot相关api定义 <a class="header-anchor" href="#module-hot相关api定义" aria-label="Permalink to &quot;module.hot相关api定义&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HotModuleReplacement.runtime.js 打包后</span></span>
<span class="line"><span style="color:#E1E4E8;">__webpack_require__.i.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.module;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRequire</span><span style="color:#E1E4E8;">(options.require, options.id);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createModuleHotObject</span><span style="color:#E1E4E8;">(options.id, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.parents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentParents;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">children</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentParents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  options.require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 加载模块时，会执行 __webpack_require__.i，为 module.hot 赋值。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __webpack_module_cache__[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id: moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaded: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exports: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> execOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { id: moduleId, module: </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, factory: __webpack_modules__[moduleId], require: __webpack_require__ };</span></span>
<span class="line"><span style="color:#E1E4E8;">  __webpack_require__.i.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">) { </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(execOptions); });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> execOptions.module;</span></span>
<span class="line"><span style="color:#E1E4E8;">  execOptions.factory.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, execOptions.require);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">loaded</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HotModuleReplacement.runtime.js 打包后</span></span>
<span class="line"><span style="color:#24292E;">__webpack_require__.i.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.module;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRequire</span><span style="color:#24292E;">(options.require, options.id);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createModuleHotObject</span><span style="color:#24292E;">(options.id, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.parents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentParents;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">children</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  currentParents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  options.require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 加载模块时，会执行 __webpack_require__.i，为 module.hot 赋值。</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(</span><span style="color:#E36209;">moduleId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __webpack_module_cache__[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    id: moduleId,</span></span>
<span class="line"><span style="color:#24292E;">    loaded: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    exports: {}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> execOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { id: moduleId, module: </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, factory: __webpack_modules__[moduleId], require: __webpack_require__ };</span></span>
<span class="line"><span style="color:#24292E;">  __webpack_require__.i.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) { </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(execOptions); });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> execOptions.module;</span></span>
<span class="line"><span style="color:#24292E;">  execOptions.factory.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, execOptions.require);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">loaded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在模块加载时，执行<code>__webpack_require__.i</code>，此时会通过<code>createModuleHotObject</code>函数创建<code>module.hot</code>对象。因此可以正常访问到<code>module.hot.xxx</code>属性。</p><h3 id="applyinvalidatedmodules" tabindex="-1">applyInvalidatedModules <a class="header-anchor" href="#applyinvalidatedmodules" aria-label="Permalink to &quot;applyInvalidatedModules&quot;">​</a></h3><p>首先是调用<code>applyInvalidatedModules</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyInvalidatedModules</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (queuedInvalidatedModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">currentUpdateApplyHandlers) currentUpdateApplyHandlers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(__webpack_require__.hmrI).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      queuedInvalidatedModules.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        __webpack_require__.hmrI[key](</span></span>
<span class="line"><span style="color:#E1E4E8;">          moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">          currentUpdateApplyHandlers</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    queuedInvalidatedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyInvalidatedModules</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (queuedInvalidatedModules) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">currentUpdateApplyHandlers) currentUpdateApplyHandlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(__webpack_require__.hmrI).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      queuedInvalidatedModules.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">moduleId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        __webpack_require__.hmrI[key](</span></span>
<span class="line"><span style="color:#24292E;">          moduleId,</span></span>
<span class="line"><span style="color:#24292E;">          currentUpdateApplyHandlers</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    queuedInvalidatedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>queuedInvalidatedModules</code>是在调用<code>module.hot.invalidate</code>方法时收集到的<code>module</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// invalidate 方法调用时，收集 moduleId</span></span>
<span class="line"><span style="color:#B392F0;">invalidate</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (currentStatus) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;apply&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      (queuedInvalidatedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queuedInvalidatedModules </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        moduleId</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// invalidate 方法调用时，收集 moduleId</span></span>
<span class="line"><span style="color:#6F42C1;">invalidate</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (currentStatus) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;apply&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      (queuedInvalidatedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queuedInvalidatedModules </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        moduleId</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>循环后调用的是<code>__webpack_require__.hmrI.jsonp</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__webpack_require__.hmrI.</span><span style="color:#B392F0;">jsonp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">applyHandlers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果模块没有更新</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">currentUpdate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentUpdateRuntime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentUpdateRemovedChunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    applyHandlers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(applyHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果更新的模块中不包含当前模块，那么将该模块添加到更新模块中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(currentUpdate, moduleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentUpdate[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __webpack_require__.m[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__webpack_require__.hmrI.</span><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">moduleId</span><span style="color:#24292E;">, </span><span style="color:#E36209;">applyHandlers</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果模块没有更新</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">currentUpdate) {</span></span>
<span class="line"><span style="color:#24292E;">    currentUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    currentUpdateRuntime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    currentUpdateRemovedChunks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    applyHandlers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(applyHandler);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果更新的模块中不包含当前模块，那么将该模块添加到更新模块中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(currentUpdate, moduleId)) {</span></span>
<span class="line"><span style="color:#24292E;">    currentUpdate[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __webpack_require__.m[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="applyhandler" tabindex="-1">applyHandler <a class="header-anchor" href="#applyhandler" aria-label="Permalink to &quot;applyHandler&quot;">​</a></h3><p>接下来是调用<code>applyHandle</code>，用于解析</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentUpdateApplyHandlers.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentUpdateApplyHandlers.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(options);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>applayHandle</code>的定义是在<code>webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js</code>文件中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> currentUpdate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(currentUpdate, moduleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> newModuleFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentUpdate[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newModuleFactory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAffectedModuleEffects</span><span style="color:#E1E4E8;">(moduleId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&quot;disposed&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        moduleId: moduleId</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleId </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> currentUpdate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(currentUpdate, moduleId)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> newModuleFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentUpdate[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newModuleFactory) {</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAffectedModuleEffects</span><span style="color:#24292E;">(moduleId);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&quot;disposed&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        moduleId: moduleId</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>该函数会遍历更新的<code>module</code>，然后通过<code>getAffectedModuleEffects</code>方法找到该<code>module</code>调用了<code>module.hot</code>的具体<code>api</code>。最后用<code>outdatedModules</code>记录所有需要更新的<code>module</code>，用<code>outdatedDependencies</code>记录<code>parent</code>和<code>children</code>之间需要更新的关系，如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// outdatedModules</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;./src/moduleB.js&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// outdatedDependencies</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;./src/moduleB.js&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// outdatedModules</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;./src/moduleB.js&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// outdatedDependencies</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;./src/moduleB.js&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="dispose" tabindex="-1">dispose <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;dispose&quot;">​</a></h3><p>接着通过<code>dispose</code>方法移除旧的<code>module</code>或<code>chunk</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">results.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.dispose) result.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">results.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.dispose) result.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>类似如下操作：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 省略其他内容的删除</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (queue.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> __webpack_require__.c[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> outdatedDependencies[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 省略其他内容的删除</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (queue.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> __webpack_require__.c[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> outdatedDependencies[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-label="Permalink to &quot;apply&quot;">​</a></h3><p>最后调用<code>apply</code>方法更新内容：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 更新 module</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> updateModuleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> appliedUpdate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(appliedUpdate, updateModuleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    __webpack_require__.m[updateModuleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> appliedUpdate[updateModuleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 更新 runtime</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> currentUpdateRuntime.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentUpdateRuntime[i](__webpack_require__);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 调用 accept 的回调</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> outdatedModuleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> outdatedDependencies) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(outdatedDependencies, outdatedModuleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __webpack_require__.c[outdatedModuleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleOutdatedDependencies </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        outdatedDependencies[outdatedModuleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dependenciesForCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> moduleOutdatedDependencies.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dependency </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleOutdatedDependencies[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> acceptCallback </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hot._acceptedDependencies[dependency];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (acceptCallback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (callbacks.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(acceptCallback) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          callbacks.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(acceptCallback);</span></span>
<span class="line"><span style="color:#E1E4E8;">          dependenciesForCallbacks.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(dependency);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> callbacks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 触发回调</span></span>
<span class="line"><span style="color:#E1E4E8;">        callbacks[k].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, moduleOutdatedDependencies);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// module.hot.accept() =&gt; 重新加载自身 module</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;o </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> outdatedSelfAcceptedModules.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;o</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outdatedSelfAcceptedModules[o];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.module;</span></span>
<span class="line"><span style="color:#E1E4E8;">  item.</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(moduleId);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 更新 module</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> updateModuleId </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> appliedUpdate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(appliedUpdate, updateModuleId)) {</span></span>
<span class="line"><span style="color:#24292E;">    __webpack_require__.m[updateModuleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> appliedUpdate[updateModuleId];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 更新 runtime</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> currentUpdateRuntime.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  currentUpdateRuntime[i](__webpack_require__);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 调用 accept 的回调</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> outdatedModuleId </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> outdatedDependencies) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.</span><span style="color:#6F42C1;">o</span><span style="color:#24292E;">(outdatedDependencies, outdatedModuleId)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __webpack_require__.c[outdatedModuleId];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      moduleOutdatedDependencies </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        outdatedDependencies[outdatedModuleId];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dependenciesForCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> moduleOutdatedDependencies.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dependency </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleOutdatedDependencies[j];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> acceptCallback </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.hot._acceptedDependencies[dependency];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (acceptCallback) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (callbacks.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(acceptCallback) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          callbacks.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(acceptCallback);</span></span>
<span class="line"><span style="color:#24292E;">          dependenciesForCallbacks.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(dependency);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> callbacks.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 触发回调</span></span>
<span class="line"><span style="color:#24292E;">        callbacks[k].</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, moduleOutdatedDependencies);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// module.hot.accept() =&gt; 重新加载自身 module</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;o </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> outdatedSelfAcceptedModules.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;o</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> outdatedSelfAcceptedModules[o];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.module;</span></span>
<span class="line"><span style="color:#24292E;">  item.</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(moduleId);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="hash-更新" tabindex="-1">hash 更新 <a class="header-anchor" href="#hash-更新" aria-label="Permalink to &quot;hash 更新&quot;">​</a></h2><p>每次请求的<code>json</code>文件都是之前编译的<code>hash</code>。等到模块加载完毕，根据<code>runtime</code>更新对应的<code>hash</code>值。 <img src="`+p+'" alt="webpack hash 更新"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>热更新流程如下：</p><ol><li><p><code>compiler.watch</code>监听文件变化，如果变化，开始重新编译。</p></li><li><p>编译过程中：</p><ol><li>首先新增两个<code>entry</code>：一是<code>WebSocket</code>的客户端，用于接收服务端的通知；二是<code>webpack</code>的<code>dev-server</code>，用于监听<code>webpackHotUpdate</code>事件。</li><li>通过<code>HotModuleReplacementPlugin</code>插件，对比编译后的<code>chunk</code>和<code>module</code>，将更新后的<code>module</code>和<code>runtime</code>形成新的<code>HotUpdateChunk</code>。最终将该<code>chunk</code>输出到<code>hot-update.js</code>文件中，而将变化的信息输出到<code>hot-update.json</code>文件中（都在内存中）。</li><li>. <code>HotModuleReplacementPlugin</code>插件还会为<code>&quot;bundle&quot;</code>添加处理更新的代码 —— <code>HotModuleReplacement.runtime.js</code>和<code>JavascriptHotModuleReplacement.runtime.js</code>文件。<code>module.hot</code>等<code>api</code>均在这里定义。</li></ol></li><li><p>编译完成后，触发<code>hooks.done</code>钩子。<code>webpack-dev-server</code>接收到编译完成事件，通过服务端<code>server</code>向客户端发送更新通知。</p></li><li><p>客户端接收到服务端通知，调用<code>reloadApp</code>方法触发<code>webpackHotUpdate</code>事件，<code>webpack</code>的<code>dev-server</code>监听到该事件。</p></li><li><p>客户端开始进行<code>hotCheck</code>：</p><ol><li>根据<code>fullhash</code>通过<code>fetch</code>向<code>express</code>请求<code>hot-update.json</code>文件。</li><li>根据<code>hot-update.json</code>中改变的<code>chunk</code>的<code>id</code>，请求对应的<code>hot-update.js</code>文件。</li><li>执行<code>hot-update.js</code>文件中的代码，将更新后的<code>module</code>和<code>runtime</code>存到<code>currentUpdate</code>和<code>currentUpdateRuntime</code>中。</li></ol></li><li><p>客户端开始进行<code>hotApply</code>：</p><ol><li>遍历<code>currentUpdate</code>，根据用户定义的<code>module.hot</code>相关的<code>api</code>，确认更新的<code>module</code>和<code>runtime</code>。</li><li>调用<code>dispose</code>方法，遍历待更新的<code>module</code>，移除原有的<code>module</code>定义。</li><li>调用<code>apply</code>方法，添加待更新的<code>module</code>的最新定义，并触发<code>module.hot.accept</code>回调。</li></ol></li></ol>',138),c=[e];function t(r,E,y,i,d,u){return n(),a("div",null,c)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};
