import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.c610f10c.js";const F=JSON.parse('{"title":"Ellipsis 组件开发心得","description":"","frontmatter":{},"headers":[],"relativePath":"project/ellipsis-text.md","filePath":"project/ellipsis-text.md","lastUpdated":1695631559000}'),p={name:"project/ellipsis-text.md"},o=n(`<h1 id="ellipsis-组件开发心得" tabindex="-1">Ellipsis 组件开发心得 <a class="header-anchor" href="#ellipsis-组件开发心得" aria-label="Permalink to &quot;Ellipsis 组件开发心得&quot;">​</a></h1><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>多行文本省略，需要支持末尾尾随 <code>展开</code> 和 <code>收起</code> 按钮，当文本省略时需要触发相应的回调。</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>分为两种情况，一种情况为普通文本省略，可以通过 <code>css</code> 属性来设置。另一种情况是需要支持末尾<code>展开</code>按钮，需要计算文本宽度是否超出已有宽度。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="css-省略" tabindex="-1">css 省略 <a class="header-anchor" href="#css-省略" aria-label="Permalink to &quot;css 省略&quot;">​</a></h3><p>当不需要支持末尾<code>展开</code>按钮时，可以通过 <code>css</code> 属性来设置文本省略。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">// 单行省略</span></span>
<span class="line"><span style="color:#B392F0;">.single-line-ellipsis</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">white-space</span><span style="color:#E1E4E8;">: no-wrap;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">hidden</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">text-overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">ellipsis</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">// 多行省略</span></span>
<span class="line"><span style="color:#B392F0;">.multiple-line-ellipsis</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: --webkit-box;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">hidden</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">--webkit-line-clamp</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; // 行数</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">--webkit-box-orient</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">vertical</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">// 单行省略</span></span>
<span class="line"><span style="color:#6F42C1;">.single-line-ellipsis</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">white-space</span><span style="color:#24292E;">: no-wrap;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">overflow</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">hidden</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">text-overflow</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">ellipsis</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 多行省略</span></span>
<span class="line"><span style="color:#6F42C1;">.multiple-line-ellipsis</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">: --webkit-box;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">overflow</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">hidden</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">--webkit-line-clamp</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; // 行数</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">--webkit-box-orient</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">vertical</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>省略时的回调可以通过省略节点来进行计算：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 判断是单行省略还是多行省略</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cssLineClamp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rows </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否产生了省略（可以通过 rc-resize-observer 监听宽度高度变化）</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isEllipsis</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cssLineClamp</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> textEle.offsetHeight </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> textEle.scrollHeight</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> textEle.offsetWidth </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> textEle.scrollWidth;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 判断是单行省略还是多行省略</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cssLineClamp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rows </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否产生了省略（可以通过 rc-resize-observer 监听宽度高度变化）</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isEllipsis</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cssLineClamp</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> textEle.offsetHeight </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> textEle.scrollHeight</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> textEle.offsetWidth </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> textEle.scrollWidth;</span></span></code></pre></div><h3 id="js-省略" tabindex="-1">js 省略 <a class="header-anchor" href="#js-省略" aria-label="Permalink to &quot;js 省略&quot;">​</a></h3><ul><li><p>文本尾随<code>展开</code>按钮省略：</p><ol><li>首先，需要计算文本是否超过了宽度<code>width</code>。 <ol><li>计算文本渲染的高度：通过一个“隐藏”的 span 标签 <strong>自由换行</strong> 加载文本，加载完成后得到文本高度。</li><li>计算单行文本渲染高度。通过一个“隐藏”的 span 标签 <strong>不换行</strong> 加载文本，加载完成后得到文本高度。</li><li>通过用户提供的行数<code>rows</code>判断 <code>行数 * 单行高度 是否大于 多行高度</code>，如果大于则说明 <strong>文本超出</strong>。</li></ol></li><li>文本超出后，切割文本。 <ol><li>计算文本总长度，如果非字符串和数字，当做一个字符，记录长度为1。</li><li>通过二分法切割文本。</li><li>将切割后的文本通过步骤 1 进行渲染。看是否满足要求。</li></ol></li><li>响应式处理。 <ol><li>监听文本变化，当文本或宽度等发生变化时，判断是否需要重新计算省略内容。</li></ol></li></ol></li></ul><p><strong>注意点</strong>：</p><ul><li>获取元素高度时，通过<code>offsetHeight</code>获取的高度为<code>height + padding + border</code>，并且为整数。因此在行高不为整数时，会出现计算上的一些误差。</li></ul>`,15),e=[o];function t(c,r,i,E,y,d){return a(),l("div",null,e)}const C=s(p,[["render",t]]);export{F as __pageData,C as default};
