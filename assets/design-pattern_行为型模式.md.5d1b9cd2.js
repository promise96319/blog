import{_ as s,c as a,o as n,a as l}from"./app.788a9091.js";const e="/assets/mediator.20130f58.jpeg",C=JSON.parse('{"title":"行为型模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"Chain of Responsibility(职责链)","slug":"chain-of-responsibility-职责链","link":"#chain-of-responsibility-职责链","children":[]},{"level":2,"title":"Command(命令)","slug":"command-命令","link":"#command-命令","children":[]},{"level":2,"title":"Interpreter(解释器)","slug":"interpreter-解释器","link":"#interpreter-解释器","children":[]},{"level":2,"title":"Iterator(迭代器)","slug":"iterator-迭代器","link":"#iterator-迭代器","children":[]},{"level":2,"title":"Mediator(中介者)","slug":"mediator-中介者","link":"#mediator-中介者","children":[]},{"level":2,"title":"Memento(备忘录)","slug":"memento-备忘录","link":"#memento-备忘录","children":[]},{"level":2,"title":"Observer(观察者)","slug":"observer-观察者","link":"#observer-观察者","children":[]},{"level":2,"title":"State(状态)","slug":"state-状态","link":"#state-状态","children":[]},{"level":2,"title":"Strategy(策略)","slug":"strategy-策略","link":"#strategy-策略","children":[]},{"level":2,"title":"Template Method(模板方法)","slug":"template-method-模板方法","link":"#template-method-模板方法","children":[]},{"level":2,"title":"Visitor(访问者)","slug":"visitor-访问者","link":"#visitor-访问者","children":[]}],"relativePath":"design-pattern/行为型模式.md","lastUpdated":1677396047000}'),o={name:"design-pattern/行为型模式.md"},p=l(`<h1 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a></h1><h2 id="chain-of-responsibility-职责链" tabindex="-1">Chain of Responsibility(职责链) <a class="header-anchor" href="#chain-of-responsibility-职责链" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象形成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p></div><p>如过滤敏感词需求：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">adFilter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">content</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sexFilter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">content</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SensitiveWordFilterChain</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">filters</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">addFilter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filter</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">filters</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filter</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">filter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">content</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">filters</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">some</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filter</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> chain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SensitiveWordFilterChain</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">chain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addFilter</span><span style="color:#A6ACCD;">(adFilter)</span></span>
<span class="line"><span style="color:#A6ACCD;">chain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addFilter</span><span style="color:#A6ACCD;">(sexFilter)</span></span>
<span class="line"><span style="color:#A6ACCD;">chain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="command-命令" tabindex="-1">Command(命令) <a class="header-anchor" href="#command-命令" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></div><h2 id="interpreter-解释器" tabindex="-1">Interpreter(解释器) <a class="header-anchor" href="#interpreter-解释器" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p></div><p>实现的核心思想是，将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分为一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。</p><h2 id="iterator-迭代器" tabindex="-1">Iterator(迭代器) <a class="header-anchor" href="#iterator-迭代器" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>提供一种方法顺序访问一个集合对象中的各个元素，而不需要暴露该对象的内部表示。</p></div><p><a href="https://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noreferrer">ruanyifeng es6 iterator</a></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> it </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeIterator</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">it</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="color:#A6ACCD;">it</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="color:#A6ACCD;">it</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// { value: undefined, done: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeIterator</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">nextIndex</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">done</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="mediator-中介者" tabindex="-1">Mediator(中介者) <a class="header-anchor" href="#mediator-中介者" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p></div><p><img src="`+e+'" alt="img"></p><h2 id="memento-备忘录" tabindex="-1">Memento(备忘录) <a class="header-anchor" href="#memento-备忘录" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p></div><h2 id="observer-观察者" tabindex="-1">Observer(观察者) <a class="header-anchor" href="#observer-观察者" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p></div><p>如：<code>Vue</code>的响应式原理：数据改变时，通知<code>Watcher</code>更新</p><h2 id="state-状态" tabindex="-1">State(状态) <a class="header-anchor" href="#state-状态" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>允许一个对象在其内部状态改变时改变它的行为。</p></div><p>有限状态机分为三个部分：状态、事件、动作。其中事件也被称作转移条件，事件触发状态的转移和动作的执行，动作不是必须的。</p><h2 id="strategy-策略" tabindex="-1">Strategy(策略) <a class="header-anchor" href="#strategy-策略" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义一系列的算法，把它们一个个封装起来，并且使他们可相互替换。</p></div><p>如<code>Vue</code>中<code>options</code>的合并：<code>created/methods/data</code>等等的合并策略。</p><h2 id="template-method-模板方法" tabindex="-1">Template Method(模板方法) <a class="header-anchor" href="#template-method-模板方法" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></div><p>如<code>Vue</code>中编译阶段：<code>compile</code>由<code>parse</code>、<code>optimize</code>、<code>generate</code>三个方法组成，可以通过重写这三个方法形成不一样的编译函数。</p><h2 id="visitor-访问者" tabindex="-1">Visitor(访问者) <a class="header-anchor" href="#visitor-访问者" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p></div>',33),t=[p];function c(r,i,F,y,D,d){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{C as __pageData,h as default};
