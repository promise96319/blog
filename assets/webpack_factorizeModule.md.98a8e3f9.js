import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b96c6c14.js";const o="/assets/webpack-resolve.26cbc3e8.png",v=JSON.parse('{"title":"factorizeModule","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/factorizeModule.md","filePath":"webpack/factorizeModule.md","lastUpdated":1698927986000}'),p={name:"webpack/factorizeModule.md"},e=l(`<h1 id="factorizemodule" tabindex="-1">factorizeModule <a class="header-anchor" href="#factorizemodule" aria-label="Permalink to &quot;factorizeModule&quot;">​</a></h1><p><code>make</code>阶段第一步做的事是通过<code>factorizeModule</code>将<code>dependency</code>创建成相应的<code>module</code>。</p><h2 id="factorizemodule方法" tabindex="-1">_factorizeModule方法 <a class="header-anchor" href="#factorizemodule方法" aria-label="Permalink to &quot;_factorizeModule方法&quot;">​</a></h2><p>找到<code>_factorizeModule</code>方法的定义：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">_factorizeModule</span><span style="color:#E1E4E8;">({ factory }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  factory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">_factorizeModule</span><span style="color:#24292E;">({ factory }) {</span></span>
<span class="line"><span style="color:#24292E;">  factory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法实际上调用的是<code>factory</code>方法。<code>factory</code>方法是一个工厂函数，用于创建<code>module</code>。这里以<code>NormalModuleFactory</code>为例。找到<code>webpack/lib/NormalModuleFactory.js</code>文件中<code>create</code>方法的定义，该方法最终会走到<code>hooks.factorize</code>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.factorize.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(resolveData, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.factorize.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(resolveData, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre></div><p>而在<code>NormalModuleFactory</code>的<code>constructor</code>中正好定义了<code>factorize.tapAsync</code>，并会执行<code>hooks.resolve.callAsync()</code>，进入到<code>resolve</code>的回调函数。回调函数内主要由两段逻辑，一段是对<code>dependency</code>进行<code>resolve</code>，另一段逻辑是处理<code>loader</code>。</p><h2 id="getresolver" tabindex="-1">getResolver <a class="header-anchor" href="#getresolver" aria-label="Permalink to &quot;getResolver&quot;">​</a></h2><p>在<code>resolve</code>之前，会先获取处理<code>dependency</code>的<code>resolver</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">normalResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getResolver</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;normal&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dependencyType</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cachedSetProperty</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolveOptions </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EMPTY_RESOLVE_OPTIONS</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dependencyType&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dependencyType</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> resolveOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">getResolver</span><span style="color:#E1E4E8;">(type, resolveOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type, resolveOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">normalResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getResolver</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;normal&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  dependencyType</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cachedSetProperty</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    resolveOptions </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EMPTY_RESOLVE_OPTIONS</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dependencyType&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    dependencyType</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> resolveOptions</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getResolver</span><span style="color:#24292E;">(type, resolveOptions) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resolverFactory.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type, resolveOptions);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>resolverFactory</code>在<code>compiler</code>对象初始化时就已经实例化。找到<code>webpack/lib/ResolverFactory.js</code>，调用<code>get</code>方法时如果缓存中没有<code>resolver</code>，就会调用<code>_create</code>方法创建一个<code>resolver</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">_create</span><span style="color:#E1E4E8;">(type, resolveOptionsWithDepType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ResolverWithOptions}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (Factory.</span><span style="color:#B392F0;">createResolver</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolveOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">  ));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resolver;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">_create</span><span style="color:#24292E;">(type, resolveOptionsWithDepType) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ResolverWithOptions}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (Factory.</span><span style="color:#6F42C1;">createResolver</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    resolveOptions</span></span>
<span class="line"><span style="color:#24292E;">  ));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resolver;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="createresolver" tabindex="-1">createResolver <a class="header-anchor" href="#createresolver" aria-label="Permalink to &quot;createResolver&quot;">​</a></h2><p>找到<code>node_modules/enhanced-resolve/lib/ResolverFactory.js</code>文件，里面定义了<code>createResolver</code>方法。该方法在实例化<code>Resolver</code>后，定义了一系列的钩子，用于整个<code>dependency</code>的<code>resolve</code>过程。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;internalResolve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;newInteralResolve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;parsedResolve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;describedResolve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;internal&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rawModule&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolveAsModule&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;undescribedResolveInPackage&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolveInPackage&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolveInExistingDirectory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;relative&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;describedRelative&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;directory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;undescribedExistingDirectory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;existingDirectory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;undescribedRawFile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rawFile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;finalFile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;existingFile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">resolver.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolved&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;internalResolve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;newInteralResolve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;parsedResolve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;describedResolve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;internal&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rawModule&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolveAsModule&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;undescribedResolveInPackage&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolveInPackage&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolveInExistingDirectory&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;relative&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;describedRelative&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;directory&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;undescribedExistingDirectory&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;existingDirectory&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;undescribedRawFile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rawFile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;finalFile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;existingFile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">resolver.</span><span style="color:#6F42C1;">ensureHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolved&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>同时，后面还在对应的钩子上应用了一些插件用于<code>resolve</code>。比如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 处理 resolve 缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsafeCachePlugin</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    source,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cachePredicate,</span></span>
<span class="line"><span style="color:#E1E4E8;">    unsafeCache,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cacheWithContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`new-\${</span><span style="color:#E1E4E8;">source</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 路径</span></span>
<span class="line"><span style="color:#E1E4E8;">plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParsePlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`new-\${</span><span style="color:#E1E4E8;">source</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, resolveOptions, </span><span style="color:#9ECBFF;">&quot;parsed-resolve&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 描述文件</span></span>
<span class="line"><span style="color:#E1E4E8;">plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DescriptionFilePlugin</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;parsed-resolve&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptionFiles,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;described-resolve&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 别名</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (alias.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AliasPlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal-resolve&quot;</span><span style="color:#E1E4E8;">, alias, </span><span style="color:#9ECBFF;">&quot;internal-resolve&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等等其他插件...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 处理 resolve 缓存</span></span>
<span class="line"><span style="color:#24292E;">plugins.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsafeCachePlugin</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    source,</span></span>
<span class="line"><span style="color:#24292E;">    cachePredicate,</span></span>
<span class="line"><span style="color:#24292E;">    unsafeCache,</span></span>
<span class="line"><span style="color:#24292E;">    cacheWithContext,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`new-\${</span><span style="color:#24292E;">source</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 路径</span></span>
<span class="line"><span style="color:#24292E;">plugins.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParsePlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`new-\${</span><span style="color:#24292E;">source</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, resolveOptions, </span><span style="color:#032F62;">&quot;parsed-resolve&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 描述文件</span></span>
<span class="line"><span style="color:#24292E;">plugins.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DescriptionFilePlugin</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;parsed-resolve&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    descriptionFiles,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;described-resolve&quot;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 处理 别名</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (alias.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  plugins.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AliasPlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal-resolve&quot;</span><span style="color:#24292E;">, alias, </span><span style="color:#032F62;">&quot;internal-resolve&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等等其他插件...</span></span></code></pre></div><p>这些插件正好对应了<code>webpack</code>中的<code>resolve</code>配置：<a href="https://webpack.docschina.org/configuration/resolve/" target="_blank" rel="noreferrer">webpack resolve 配置</a></p><p><img src="`+o+`" alt="img"></p><h2 id="resolver-resolve" tabindex="-1">resolver.resolve <a class="header-anchor" href="#resolver-resolve" aria-label="Permalink to &quot;resolver.resolve&quot;">​</a></h2><p>获取完<code>resolver</code>后会调用<code>resolver.resolve</code>解析<code>dependency</code>，包括文件引用路径解析（比如是绝对路径还是相对路径还是模块，有哪些参数等等），文件路径查找，文件描述文件读取，文件别名替换等等操作。</p><h2 id="loader-匹配" tabindex="-1">loader 匹配 <a class="header-anchor" href="#loader-匹配" aria-label="Permalink to &quot;loader 匹配&quot;">​</a></h2><p>解析完当前<code>dependency</code>之后进入到回调函数，这里调用的是<code>continueCallback</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ruleSet.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  resource: resourceDataForRules.path,</span></span>
<span class="line"><span style="color:#E1E4E8;">  realResource: resourceData.path,</span></span>
<span class="line"><span style="color:#E1E4E8;">  resourceQuery: resourceDataForRules.query,</span></span>
<span class="line"><span style="color:#E1E4E8;">  resourceFragment: resourceDataForRules.fragment,</span></span>
<span class="line"><span style="color:#E1E4E8;">  mimetype: matchResourceData </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> resourceData.data.mimetype </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dependency: dependencyType,</span></span>
<span class="line"><span style="color:#E1E4E8;">  descriptionData: matchResourceData</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> resourceData.data.descriptionFileData,</span></span>
<span class="line"><span style="color:#E1E4E8;">  issuer: contextInfo.issuer,</span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler: contextInfo.compiler,</span></span>
<span class="line"><span style="color:#E1E4E8;">  issuerLayer: contextInfo.issuerLayer </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ruleSet.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  resource: resourceDataForRules.path,</span></span>
<span class="line"><span style="color:#24292E;">  realResource: resourceData.path,</span></span>
<span class="line"><span style="color:#24292E;">  resourceQuery: resourceDataForRules.query,</span></span>
<span class="line"><span style="color:#24292E;">  resourceFragment: resourceDataForRules.fragment,</span></span>
<span class="line"><span style="color:#24292E;">  mimetype: matchResourceData </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> resourceData.data.mimetype </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  dependency: dependencyType,</span></span>
<span class="line"><span style="color:#24292E;">  descriptionData: matchResourceData</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> resourceData.data.descriptionFileData,</span></span>
<span class="line"><span style="color:#24292E;">  issuer: contextInfo.issuer,</span></span>
<span class="line"><span style="color:#24292E;">  compiler: contextInfo.compiler,</span></span>
<span class="line"><span style="color:#24292E;">  issuerLayer: contextInfo.issuerLayer </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>该方法会对<code>dependency</code>和<code>loader</code>的配置进行匹配，返回该<code>dependency</code>使用到的<code>loaders</code>。随后使用<code>loaderResolver</code>对每个<code>loader</code>进行文件解析，返回<code>loader</code>的文件路径。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolveRequestArray</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  contextInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context,</span></span>
<span class="line"><span style="color:#E1E4E8;">  useLoadersPost,</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderResolver,</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolveContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    postLoaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">continueCallback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolveRequestArray</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  contextInfo,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.context,</span></span>
<span class="line"><span style="color:#24292E;">  useLoadersPost,</span></span>
<span class="line"><span style="color:#24292E;">  loaderResolver,</span></span>
<span class="line"><span style="color:#24292E;">  resolveContext,</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    postLoaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">continueCallback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="createmodule" tabindex="-1">createModule <a class="header-anchor" href="#createmodule" aria-label="Permalink to &quot;createModule&quot;">​</a></h2><p>当<code>dependency</code>解析完成后，执行<code>resolve</code>回调：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.factorize.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;NormalModuleFactory&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    stage: </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">resolveData</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.resolve.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(resolveData, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.afterResolve.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(resolveData, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolveData.createData;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.createModule.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          createData,</span></span>
<span class="line"><span style="color:#E1E4E8;">          resolveData,</span></span>
<span class="line"><span style="color:#E1E4E8;">          (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">createdModule</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">createdModule) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              createdModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NormalModule</span><span style="color:#E1E4E8;">(createData);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            createdModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.module.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              createdModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">              createData,</span></span>
<span class="line"><span style="color:#E1E4E8;">              resolveData</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, createdModule);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.factorize.</span><span style="color:#6F42C1;">tapAsync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;NormalModuleFactory&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    stage: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">resolveData</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.resolve.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(resolveData, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.afterResolve.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(resolveData, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolveData.createData;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.createModule.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          createData,</span></span>
<span class="line"><span style="color:#24292E;">          resolveData,</span></span>
<span class="line"><span style="color:#24292E;">          (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">createdModule</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">createdModule) {</span></span>
<span class="line"><span style="color:#24292E;">              createdModule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NormalModule</span><span style="color:#24292E;">(createData);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            createdModule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.module.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              createdModule,</span></span>
<span class="line"><span style="color:#24292E;">              createData,</span></span>
<span class="line"><span style="color:#24292E;">              resolveData</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, createdModule);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>最终会通过<code>createdModule = new NormalModule(createData)</code>创建一个<code>module</code>，并将该<code>module</code>作为回调函数的参数传递给下一阶段，也就是<code>addModule</code>阶段。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>factorizeModule</code>调用<code>xxxModuleFactory.create</code>方法将<code>dependency</code>转化成<code>module</code>。</p><p>在这个过程中会实例化<code>resolver</code>，通过不同的<code>resolver</code>对<code>dependency</code>进行解析，包括文件路径，文件描述，文件别名等等进行解析。</p><p>解析完成后与配置的<code>loader</code>匹配规则进行匹配。如果与该<code>dependency</code>匹配成功，那么会使用<code>loaderResolver</code>解析<code>loader</code>文件路径，存放到<code>createData.loaders</code>当中。</p><p>最后根据解析好的<code>createData</code>创建一个<code>module</code>。</p>`,36),c=[e];function r(t,E,y,i,d,u){return n(),a("div",null,c)}const h=s(p,[["render",r]]);export{v as __pageData,h as default};
