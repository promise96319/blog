import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.92ce8a2a.js";const F=JSON.parse('{"title":"项目产物兼容性问题","description":"","frontmatter":{},"headers":[],"relativePath":"babel/problems/invalid-polyfill.md","filePath":"babel/problems/invalid-polyfill.md","lastUpdated":1695640069000}'),p={name:"babel/problems/invalid-polyfill.md"},o=l(`<h1 id="项目产物兼容性问题" tabindex="-1">项目产物兼容性问题 <a class="header-anchor" href="#项目产物兼容性问题" aria-label="Permalink to &quot;项目产物兼容性问题&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>项目中遇到一个问题，项目中使用了 <code>String.replaceAll</code> 方法，并且在 <code>Webpack</code> 中配置了 <code>targets: { chrome: &#39;54&#39; }</code>，但是打包后的产物在 54 版本的 <code>Chrome</code> 浏览器中 <code>replaceAll</code> 还是会报错。 webpack 配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">(ts</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">js)x</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">exclude</span><span style="color:#E1E4E8;">:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      loader: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cacheDirectory: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        presets: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">              targets: { chrome: </span><span style="color:#9ECBFF;">&#39;54&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;ts-loader&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">(ts</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">js)x</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">exclude</span><span style="color:#24292E;">:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      loader: </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      options: {</span></span>
<span class="line"><span style="color:#24292E;">        cacheDirectory: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        presets: [</span></span>
<span class="line"><span style="color:#24292E;">          [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              targets: { chrome: </span><span style="color:#032F62;">&#39;54&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          ]</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;ts-loader&#39;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 实际代码</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;aaabbb&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实际代码</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;aaabbb&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="问题原因" tabindex="-1">问题原因 <a class="header-anchor" href="#问题原因" aria-label="Permalink to &quot;问题原因&quot;">​</a></h2><p><code>@babel/preset-env</code> 其实做的是两件事：</p><ul><li>一件事是语法转换，当设置 <code>targets</code> 时，会根据浏览器版本将高级 <code>js</code> 语法转换为低版本 <code>js</code> 语法。比如 <code>const</code> 转换为 <code>var</code>，箭头函数转换为 <code>function</code>。</li><li>第二件事就是 <code>API</code> 补齐。因为一些语法并不能直接转换为低版本语法，比如 <code>replaceAll/Promise.finally</code> 等。所以需要增加相关 API 定义，比如转换后在文件头部添加 <code>replaceAll</code> 的定义就可以解决了：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在文件头部添加</span></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在文件头部添加</span></span>
<span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span></code></pre></div><p>实际上，设置 <code>targets</code> 只是做了第一件事，第二件事则需要设置 <code>useBuiltIns</code> 和 <code>corejs</code> 参数。</p><ul><li><code>corejs</code> 是一些低版本 <code>js</code> 语法定义的集合，<code>corejs3</code> 相较于 <code>corejs2</code> 支持更多的语法，体积更小，性能更好，所以一般采用 <code>corejs3</code>。最近 corejs 的作者发了一篇他的 <a href="https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md" target="_blank" rel="noreferrer">开源经历</a>，感兴趣可以看看。</li><li><code>useBuiltIns</code> 表示是否使用 <code>corejs</code> 中的 <code>API</code> 补齐。默认不使用，为 <code>usage</code> 是为按需引入。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    targets: { chrome: </span><span style="color:#9ECBFF;">&#39;54&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    useBuiltIns: </span><span style="color:#9ECBFF;">&#39;usage&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    corejs: </span><span style="color:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    targets: { chrome: </span><span style="color:#032F62;">&#39;54&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    useBuiltIns: </span><span style="color:#032F62;">&#39;usage&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    corejs: </span><span style="color:#032F62;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>当设置以上两个参数后，就能确保 <code>replaceAll</code> 方法在 <code>Chrome54</code> 版本浏览器上正常使用了。</p><p>但是实际项目在生产环境中又会报 <code>exports is not defined</code> 错误，排查原因是因为 <code>import</code> 和 <code>required</code> 共存导致 <code>Webpack</code> 打包时按 <code>es</code> 模块语法生成，未生成 <code>cjs</code> 语法相关的定义。但是在加入 <code>corejs</code> 相关配置前是没有这个问题的。</p><p>那么，为什么加入 corejs 配置后会出现 es 和 cjs 共存的情况呢？首先猜测是追加的 corejs 代码的引入方式与实际代码模块不一致。比如我们 tsconfig module 设置的是 cjs，那么 babel-loader 接收到的是 cjs 代码，此时如果 corejs 通过 es module 引入，就会导致该问题。</p><p>那么 corejs 代码是在哪注入的呢，查找到代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">injectGlobalImport</span><span style="color:#E1E4E8;">(url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache.</span><span style="color:#B392F0;">storeAnonymous</span><span style="color:#E1E4E8;">(prog, url, (</span><span style="color:#FFAB70;">isScript</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> isScript</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> template.statement.</span><span style="color:#B392F0;">ast</span><span style="color:#9ECBFF;">\`require(\${</span><span style="color:#E1E4E8;">source</span><span style="color:#9ECBFF;">})\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">importDeclaration</span><span style="color:#E1E4E8;">([], source);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">injectGlobalImport</span><span style="color:#24292E;">(url) {</span></span>
<span class="line"><span style="color:#24292E;">  cache.</span><span style="color:#6F42C1;">storeAnonymous</span><span style="color:#24292E;">(prog, url, (</span><span style="color:#E36209;">isScript</span><span style="color:#24292E;">, </span><span style="color:#E36209;">source</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> isScript</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> template.statement.</span><span style="color:#6F42C1;">ast</span><span style="color:#032F62;">\`require(\${</span><span style="color:#24292E;">source</span><span style="color:#032F62;">})\`</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">importDeclaration</span><span style="color:#24292E;">([], source);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当 isScript 为 true 时，使用的是 cjs，否则使用 es 语法。继续查找：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// isScript 参数</span></span>
<span class="line"><span style="color:#E1E4E8;">programPath.node.sourceType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;script&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// isScript 参数</span></span>
<span class="line"><span style="color:#24292E;">programPath.node.sourceType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;script&quot;</span></span></code></pre></div><p>isScript 与 sourceType 相关，查找 babel 文档 sourceType，默认情况下 sourceType 为 module，因此默认情况下注入的是 es 模块语法。证实了之前的猜想，因为 tsconfig.json 的 module 设置为了 commonjs 将代码转为 cjs 格式。在 babel-loader 中添加 es 模块的 corejs 代码，从而导致打包后的产物运行报错。</p><p>如何解决这个问题呢？答案是另外一个参数：modules。modules 表示是否允许将 es 模块语法转换为 cjs，为 false 时表示不将 es 语法转换为 cjs 语法，默认值为 auto。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">shouldTransformESM</span><span style="color:#E1E4E8;">: modules </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;auto&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">api.</span><span style="color:#B392F0;">caller</span><span style="color:#E1E4E8;">?.(supportsStaticESM)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">shouldTransformESM</span><span style="color:#24292E;">: modules </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">api.</span><span style="color:#6F42C1;">caller</span><span style="color:#24292E;">?.(supportsStaticESM)</span></span></code></pre></div><p><a href="https://github.com/babel/babel-loader/blob/main/src/injectCaller.js#L16" target="_blank" rel="noreferrer">babel-loader 默认会设置 supportsStaticESM: true</a>，也就以为着不会将 es 模块语法转换为 cjs 模块语法，导致最终打包后的产物运行报错。</p><p>所以解决方法可以有：</p><ul><li>tsconfig.json 中 module 改为 esnext，让 ts 生成的为 es 代码。</li><li>将 modules 设置为 cjs，这样 es 代码就可以全部转换为 cjs 代码了。</li></ul>`,25),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",c]]);export{F as __pageData,h as default};
