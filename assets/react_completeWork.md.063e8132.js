import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.c610f10c.js";const u=JSON.parse('{"title":"completeWork 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"react/completeWork.md","filePath":"react/completeWork.md","lastUpdated":1695631559000}'),l={name:"react/completeWork.md"},o=p(`<h1 id="completework-阶段" tabindex="-1">completeWork 阶段 <a class="header-anchor" href="#completework-阶段" aria-label="Permalink to &quot;completeWork 阶段&quot;">​</a></h1><p><code>performUnitOfWork</code>的第二步就是<code>completeWork</code>阶段，每次都会执行<code>completeUnitOfWork</code>方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">performUnitOfWork</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">unitOfWork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fiber</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (next </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果没有 next child，那么开始 complete.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建可真实节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">completeUnitOfWork</span><span style="color:#E1E4E8;">(unitOfWork);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果存在 next,说明还有 child,继续向下递归 beginWork</span></span>
<span class="line"><span style="color:#E1E4E8;">    workInProgress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">performUnitOfWork</span><span style="color:#24292E;">(</span><span style="color:#E36209;">unitOfWork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fiber</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (next </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果没有 next child，那么开始 complete.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建可真实节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">completeUnitOfWork</span><span style="color:#24292E;">(unitOfWork);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果存在 next,说明还有 child,继续向下递归 beginWork</span></span>
<span class="line"><span style="color:#24292E;">    workInProgress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="bubbleproperties" tabindex="-1">bubbleProperties <a class="header-anchor" href="#bubbleproperties" aria-label="Permalink to &quot;bubbleProperties&quot;">​</a></h2><p>对于所有的<code>fiber</code>都会进行<code>bubbleProperties</code>处理。该函数的作用是遍历<code>workInProgress</code>的第一层子节点，将所有<code>child.lanes</code>和<code>child.childLanes</code>合并到当前的<code>childLanes</code>上。将所有<code>child.subtreeFlags</code>和<code>child.flags</code>合并到当前<code>subtreeFlags</code>上。</p><h2 id="hostcomponent" tabindex="-1">HostComponent <a class="header-anchor" href="#hostcomponent" aria-label="Permalink to &quot;HostComponent&quot;">​</a></h2><p>相较于其他节点，<code>HostComponent</code>节点比较特殊。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 将当前 fiber 移出</span></span>
<span class="line"><span style="color:#B392F0;">popHostContext</span><span style="color:#E1E4E8;">(workInProgress);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取的是当前的 RootHostContainer</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootContainerInstance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRootHostContainer</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将当前 fiber 移出</span></span>
<span class="line"><span style="color:#6F42C1;">popHostContext</span><span style="color:#24292E;">(workInProgress);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取的是当前的 RootHostContainer</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootContainerInstance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRootHostContainer</span><span style="color:#24292E;">();</span></span></code></pre></div><p>首先会移除当前的<code>HostContext</code>，其次是获取<code>container</code>节点。为什么能获取到真实节点呢？这是因为在<code>beginWork</code>中对于<code>HostRoot</code>和<code>HostPortal</code>节点都会将真实节点<code>container</code>全局存储到<code>rootInstanceStackCursor.current</code>，而在<code>completeWork</code>阶段将其移出。在访问子节点时就能正确获取到它所在的容器了。</p><h3 id="真实节点可复用时" tabindex="-1">真实节点可复用时 <a class="header-anchor" href="#真实节点可复用时" aria-label="Permalink to &quot;真实节点可复用时&quot;">​</a></h3><p>接下来就是渲染真实节点的过程：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> workInProgress.stateNode </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 如果真实节点存在，那么进行更新</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateHostComponent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  current,</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgress,</span></span>
<span class="line"><span style="color:#E1E4E8;">  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">  newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current.ref </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> workInProgress.ref) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">markRef</span><span style="color:#E1E4E8;">(workInProgress);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> workInProgress.stateNode </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 如果真实节点存在，那么进行更新</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateHostComponent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  current,</span></span>
<span class="line"><span style="color:#24292E;">  workInProgress,</span></span>
<span class="line"><span style="color:#24292E;">  type,</span></span>
<span class="line"><span style="color:#24292E;">  newProps,</span></span>
<span class="line"><span style="color:#24292E;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current.ref </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> workInProgress.ref) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">markRef</span><span style="color:#24292E;">(workInProgress);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果老<code>fiber</code>存在且<code>stateNode</code>存在，说明已经复用了<code>fiber</code>且具备真实节点。这个时候只需要更新属性即可：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">updateHostComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#6A737D;">//...) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 类似结构：[&#39;name&#39;, &#39;张三&#39;, &#39;id&#39;, 333, &#39;style&#39;, { color: &#39;red&#39; }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">updatePayload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">    type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">    newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">    currentHostContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgress.updateQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">updatePayload</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 标记为 Update</span></span>
<span class="line"><span style="color:#E1E4E8;">  if (</span><span style="color:#FFAB70;">updatePayload</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">markUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">workInProgress</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">updateHostComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#6A737D;">//...) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 类似结构：[&#39;name&#39;, &#39;张三&#39;, &#39;id&#39;, 333, &#39;style&#39;, { color: &#39;red&#39; }]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">updatePayload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    instance,</span></span>
<span class="line"><span style="color:#24292E;">    type,</span></span>
<span class="line"><span style="color:#24292E;">    oldProps,</span></span>
<span class="line"><span style="color:#24292E;">    newProps,</span></span>
<span class="line"><span style="color:#24292E;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;">    currentHostContext,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  workInProgress.updateQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">updatePayload</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 标记为 Update</span></span>
<span class="line"><span style="color:#24292E;">  if (</span><span style="color:#E36209;">updatePayload</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">markUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">workInProgress</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这个更新的过程正如<code>UpdateQueue</code>章节中提到的，主要是通过<code>prepareUpdate</code>方法对比节点的新旧<code>props</code>，最后将改变了的属性记录成数组形式。其中偶数<code>index</code>为键，奇数<code>index</code>为值。结构类似如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;张三&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">333</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">, { color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;"> }]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;张三&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">333</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">, { color: </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;"> }]</span></span></code></pre></div><h3 id="真实节点不可复用时" tabindex="-1">真实节点不可复用时 <a class="header-anchor" href="#真实节点不可复用时" aria-label="Permalink to &quot;真实节点不可复用时&quot;">​</a></h3><p>第二种情况是<code>current</code>不存在或者是<code>stateNode</code>不存在，那么真实节点就无法复用了，需要重新创建：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createInstance</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  type,</span></span>
<span class="line"><span style="color:#E1E4E8;">  newProps,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentHostContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">  workInProgress,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createInstance</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">rootContainerInstance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hostContext</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HostContext</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">internalInstanceHandle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建了 element</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">domElement</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    type,</span></span>
<span class="line"><span style="color:#E1E4E8;">    props,</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">    parentNamespace,</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 建立关系 node . &#39;__reactFiber$&#39; + randomKey = fiber</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">precacheFiberNode</span><span style="color:#E1E4E8;">(internalInstanceHandle, domElement);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 建立关系 node . &#39;__reactProps$&#39; + randomKey = props</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">updateFiberProps</span><span style="color:#E1E4E8;">(domElement, props);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> domElement;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createInstance</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  type,</span></span>
<span class="line"><span style="color:#24292E;">  newProps,</span></span>
<span class="line"><span style="color:#24292E;">  rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;">  currentHostContext,</span></span>
<span class="line"><span style="color:#24292E;">  workInProgress,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createInstance</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">rootContainerInstance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hostContext</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HostContext</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">internalInstanceHandle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建了 element</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">domElement</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    type,</span></span>
<span class="line"><span style="color:#24292E;">    props,</span></span>
<span class="line"><span style="color:#24292E;">    rootContainerInstance,</span></span>
<span class="line"><span style="color:#24292E;">    parentNamespace,</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 建立关系 node . &#39;__reactFiber$&#39; + randomKey = fiber</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">precacheFiberNode</span><span style="color:#24292E;">(internalInstanceHandle, domElement);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 建立关系 node . &#39;__reactProps$&#39; + randomKey = props</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">updateFiberProps</span><span style="color:#24292E;">(domElement, props);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> domElement;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>createInstance</code>方法会创建一个真实节点，并且建立真实节点与<code>fiber</code>和<code>props</code>的关系。随后添加所有子节点：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">appendAllChildren</span><span style="color:#E1E4E8;">(instance, workInProgress, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果是普通节点的话，会将 stateNode 存起来</span></span>
<span class="line"><span style="color:#6A737D;">// 与 fiber 建立了联系，真实节点存放在 stateNode 上</span></span>
<span class="line"><span style="color:#E1E4E8;">workInProgress.stateNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">appendAllChildren</span><span style="color:#24292E;">(instance, workInProgress, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果是普通节点的话，会将 stateNode 存起来</span></span>
<span class="line"><span style="color:#6A737D;">// 与 fiber 建立了联系，真实节点存放在 stateNode 上</span></span>
<span class="line"><span style="color:#24292E;">workInProgress.stateNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span></code></pre></div><p><code>appendAllChildren</code>方法会将能渲染的子节点全部添加到当前创建的节点<code>instance</code>上，这样依次向上进行<code>completeWork</code>时，就会形成一棵具有真实节点树。</p>`,22),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const C=s(l,[["render",c]]);export{u as __pageData,C as default};
