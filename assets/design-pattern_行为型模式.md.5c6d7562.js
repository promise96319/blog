import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.baea2d07.js";const p="/assets/mediator.20130f58.jpeg",h=JSON.parse('{"title":"行为型模式","description":"","frontmatter":{},"headers":[],"relativePath":"design-pattern/行为型模式.md","filePath":"design-pattern/行为型模式.md","lastUpdated":1699268300000}'),o={name:"design-pattern/行为型模式.md"},e=l(`<h1 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">​</a></h1><h2 id="chain-of-responsibility-职责链" tabindex="-1">Chain of Responsibility(职责链) <a class="header-anchor" href="#chain-of-responsibility-职责链" aria-label="Permalink to &quot;Chain of Responsibility(职责链)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象形成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p></div><p>如过滤敏感词需求：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">adFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sexFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SensitiveWordFilterChain</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">filters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.filters.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(filter)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.filters.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">filter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SensitiveWordFilterChain</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">chain.</span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(adFilter)</span></span>
<span class="line"><span style="color:#E1E4E8;">chain.</span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(sexFilter)</span></span>
<span class="line"><span style="color:#E1E4E8;">chain.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;content&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adFilter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sexFilter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SensitiveWordFilterChain</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">filters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">addFilter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">filter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.filters.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(filter)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.filters.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">((</span><span style="color:#E36209;">filter</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(content)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SensitiveWordFilterChain</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">chain.</span><span style="color:#6F42C1;">addFilter</span><span style="color:#24292E;">(adFilter)</span></span>
<span class="line"><span style="color:#24292E;">chain.</span><span style="color:#6F42C1;">addFilter</span><span style="color:#24292E;">(sexFilter)</span></span>
<span class="line"><span style="color:#24292E;">chain.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="command-命令" tabindex="-1">Command(命令) <a class="header-anchor" href="#command-命令" aria-label="Permalink to &quot;Command(命令)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></div><h2 id="interpreter-解释器" tabindex="-1">Interpreter(解释器) <a class="header-anchor" href="#interpreter-解释器" aria-label="Permalink to &quot;Interpreter(解释器)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p></div><p>实现的核心思想是，将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分为一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。</p><h2 id="iterator-迭代器" tabindex="-1">Iterator(迭代器) <a class="header-anchor" href="#iterator-迭代器" aria-label="Permalink to &quot;Iterator(迭代器)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>提供一种方法顺序访问一个集合对象中的各个元素，而不需要暴露该对象的内部表示。</p></div><p><a href="https://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noreferrer">ruanyifeng es6 iterator</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> it </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeIterator</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="color:#E1E4E8;">it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="color:#E1E4E8;">it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// { value: undefined, done: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeIterator</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nextIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nextIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> array.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">        {value: array[nextIndex</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">], done: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeIterator</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="color:#24292E;">it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="color:#24292E;">it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// { value: undefined, done: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeIterator</span><span style="color:#24292E;">(</span><span style="color:#E36209;">array</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nextIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nextIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> array.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">        {value: array[nextIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">], done: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="mediator-中介者" tabindex="-1">Mediator(中介者) <a class="header-anchor" href="#mediator-中介者" aria-label="Permalink to &quot;Mediator(中介者)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p></div><p><img src="`+p+'" alt="img"></p><h2 id="memento-备忘录" tabindex="-1">Memento(备忘录) <a class="header-anchor" href="#memento-备忘录" aria-label="Permalink to &quot;Memento(备忘录)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p></div><h2 id="observer-观察者" tabindex="-1">Observer(观察者) <a class="header-anchor" href="#observer-观察者" aria-label="Permalink to &quot;Observer(观察者)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p></div><p>如：<code>Vue</code>的响应式原理：数据改变时，通知<code>Watcher</code>更新</p><h2 id="state-状态" tabindex="-1">State(状态) <a class="header-anchor" href="#state-状态" aria-label="Permalink to &quot;State(状态)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>允许一个对象在其内部状态改变时改变它的行为。</p></div><p>有限状态机分为三个部分：状态、事件、动作。其中事件也被称作转移条件，事件触发状态的转移和动作的执行，动作不是必须的。</p><h2 id="strategy-策略" tabindex="-1">Strategy(策略) <a class="header-anchor" href="#strategy-策略" aria-label="Permalink to &quot;Strategy(策略)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义一系列的算法，把它们一个个封装起来，并且使他们可相互替换。</p></div><p>如<code>Vue</code>中<code>options</code>的合并：<code>created/methods/data</code>等等的合并策略。</p><h2 id="template-method-模板方法" tabindex="-1">Template Method(模板方法) <a class="header-anchor" href="#template-method-模板方法" aria-label="Permalink to &quot;Template Method(模板方法)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></div><p>如<code>Vue</code>中编译阶段：<code>compile</code>由<code>parse</code>、<code>optimize</code>、<code>generate</code>三个方法组成，可以通过重写这三个方法形成不一样的编译函数。</p><h2 id="visitor-访问者" tabindex="-1">Visitor(访问者) <a class="header-anchor" href="#visitor-访问者" aria-label="Permalink to &quot;Visitor(访问者)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">意图</p><p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p></div>',33),t=[e];function c(r,E,i,y,d,F){return a(),n("div",null,t)}const m=s(o,[["render",c]]);export{h as __pageData,m as default};
