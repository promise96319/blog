import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.92ce8a2a.js";const A=JSON.parse('{"title":"插槽实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"vue/插槽实现原理.md","filePath":"vue/插槽实现原理.md","lastUpdated":1695640069000}'),p={name:"vue/插槽实现原理.md"},o=l(`<h1 id="插槽实现原理" tabindex="-1">插槽实现原理 <a class="header-anchor" href="#插槽实现原理" aria-label="Permalink to &quot;插槽实现原理&quot;">​</a></h1><p>首先是父组件：</p><h2 id="父组件使用" tabindex="-1">父组件使用 <a class="header-anchor" href="#父组件使用" aria-label="Permalink to &quot;父组件使用&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件使用时</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">ChildComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;component&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-slot</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;scope&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ scope }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">ChildComponent</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 父组件使用时</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">ChildComponent</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;component&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;scope&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ scope }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">ChildComponent</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="父组件parse" tabindex="-1">父组件parse <a class="header-anchor" href="#父组件parse" aria-label="Permalink to &quot;父组件parse&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 2. 经过 parse 编译成 ast 后 (调用的是 processSlotContent 方法)</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定的值（由子组件传递）</span></span>
<span class="line"><span style="color:#E1E4E8;">el.slotScope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scope</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定的 slot 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">el.slotTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 动态绑定的 slot 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">el.slotTargetDynamic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#6A737D;">// template 内部 children 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">el.children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// ChildComponent 对应的 ast 下的 scopedSlots 记录着 slot 的 ast</span></span>
<span class="line"><span style="color:#E1E4E8;">currentParent.scopedSlots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}))[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 2. 经过 parse 编译成 ast 后 (调用的是 processSlotContent 方法)</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定的值（由子组件传递）</span></span>
<span class="line"><span style="color:#24292E;">el.slotScope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scope</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定的 slot 名称</span></span>
<span class="line"><span style="color:#24292E;">el.slotTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 动态绑定的 slot 名称</span></span>
<span class="line"><span style="color:#24292E;">el.slotTargetDynamic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#6A737D;">// template 内部 children 代码</span></span>
<span class="line"><span style="color:#24292E;">el.children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// ChildComponent 对应的 ast 下的 scopedSlots 记录着 slot 的 ast</span></span>
<span class="line"><span style="color:#24292E;">currentParent.scopedSlots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}))[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element</span></span></code></pre></div><h2 id="父组件generate" tabindex="-1">父组件generate <a class="header-anchor" href="#父组件generate" aria-label="Permalink to &quot;父组件generate&quot;">​</a></h2><h3 id="gendata" tabindex="-1">genData <a class="header-anchor" href="#gendata" aria-label="Permalink to &quot;genData&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 3. 经过 generate 生成代码后（先调用 genData 方法，此时会调用 genScopedSlots 方法）</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el.slotTarget </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">el.slotScope) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果不存在 slotScope，表示没有传递参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  data </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`slot:\${</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">slotTarget</span><span style="color:#9ECBFF;">},\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 对于 ChildComponent 这个组件</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el.scopedSlots) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  data </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#B392F0;">genScopedSlots</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">scopedSlots</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">},\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 3. 经过 generate 生成代码后（先调用 genData 方法，此时会调用 genScopedSlots 方法）</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el.slotTarget </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">el.slotScope) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果不存在 slotScope，表示没有传递参数</span></span>
<span class="line"><span style="color:#24292E;">  data </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`slot:\${</span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">slotTarget</span><span style="color:#032F62;">},\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 对于 ChildComponent 这个组件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el.scopedSlots) {</span></span>
<span class="line"><span style="color:#24292E;">  data </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#6F42C1;">genScopedSlots</span><span style="color:#032F62;">(</span><span style="color:#24292E;">el</span><span style="color:#032F62;">, </span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">scopedSlots</span><span style="color:#032F62;">, </span><span style="color:#24292E;">state</span><span style="color:#032F62;">)</span><span style="color:#032F62;">},\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="genscopedslots" tabindex="-1">genScopedSlots <a class="header-anchor" href="#genscopedslots" aria-label="Permalink to &quot;genScopedSlots&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 4. genScopedSlots 方法</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genScopedSlots</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">slots</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenState</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通过这里判断 slot 是否需要强制更新。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> needsForceUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.for </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(slots).</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slots[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      slot.slotTargetDynamic </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果存在动态绑定的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">      slot.if </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 如果在 if 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      slot.for </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 如果在 for 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">containsSlotChild</span><span style="color:#E1E4E8;">(slot) </span><span style="color:#6A737D;">// 如果内部还存在 slot 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> needsKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">el.if</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 继续判断是否需要更新</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不需要强制更新时，判断是否在 for 循环或 if 当中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断 parent.slotScope 存在</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">needsForceUpdate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.parent</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        (parent.slotScope </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parent.slotScope </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> emptySlotScopeToken) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        parent.for</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        needsForceUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent.if) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        needsKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.parent</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 键值对形式： [{ key: &quot;default&quot;: fn: fn, proxy: false/true }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">generatedSlots</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(slots)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genScopedSlot</span><span style="color:#E1E4E8;">(slots[key], state))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`scopedSlots:_u([\${</span><span style="color:#E1E4E8;">generatedSlots</span><span style="color:#9ECBFF;">}]\${</span><span style="color:#E1E4E8;">needsForceUpdate</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`,null,true\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">}\${</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">needsForceUpdate</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">needsKey</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`,null,false,\${</span><span style="color:#B392F0;">hash</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">generatedSlots</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">})\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 4. genScopedSlots 方法</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genScopedSlots</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">slots</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenState</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通过这里判断 slot 是否需要强制更新。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> needsForceUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.for </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(slots).</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slots[key]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      slot.slotTargetDynamic </span><span style="color:#D73A49;">||</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果存在动态绑定的类型</span></span>
<span class="line"><span style="color:#24292E;">      slot.if </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 如果在 if 中</span></span>
<span class="line"><span style="color:#24292E;">      slot.for </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 如果在 for 中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">containsSlotChild</span><span style="color:#24292E;">(slot) </span><span style="color:#6A737D;">// 如果内部还存在 slot 标签</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> needsKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">el.if</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 继续判断是否需要更新</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不需要强制更新时，判断是否在 for 循环或 if 当中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断 parent.slotScope 存在</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">needsForceUpdate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.parent</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parent) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        (parent.slotScope </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parent.slotScope </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> emptySlotScopeToken) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        parent.for</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        needsForceUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent.if) {</span></span>
<span class="line"><span style="color:#24292E;">        needsKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent.parent</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 键值对形式： [{ key: &quot;default&quot;: fn: fn, proxy: false/true }]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">generatedSlots</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(slots)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genScopedSlot</span><span style="color:#24292E;">(slots[key], state))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`scopedSlots:_u([\${</span><span style="color:#24292E;">generatedSlots</span><span style="color:#032F62;">}]\${</span><span style="color:#24292E;">needsForceUpdate</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`,null,true\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`\`</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">}\${</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">needsForceUpdate</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#24292E;">needsKey</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`,null,false,\${</span><span style="color:#6F42C1;">hash</span><span style="color:#032F62;">(</span><span style="color:#24292E;">generatedSlots</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`\`</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">})\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="genscopedslot" tabindex="-1">genScopedSlot <a class="header-anchor" href="#genscopedslot" aria-label="Permalink to &quot;genScopedSlot&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genScopedSlot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenState</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. 使用到的变量，将其作为参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slotScope</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.slotScope </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> emptySlotScopeToken</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(el.slotScope)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. 定义可以生成 vnode 的函数，并传入定义的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`function(\${</span><span style="color:#E1E4E8;">slotScope</span><span style="color:#9ECBFF;">}){\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`return \${</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">tag</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;template&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">if</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">isLegacySyntax</span></span>
<span class="line"><span style="color:#9ECBFF;">        </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`(\${</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">if</span><span style="color:#9ECBFF;">})?\${</span><span style="color:#B392F0;">genChildren</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;}:undefined\`</span></span>
<span class="line"><span style="color:#9ECBFF;">        </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">genChildren</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">genElement</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">}}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reverseProxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slotScope </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`,proxy:true\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3. 生成键值对形式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`{key:\${</span><span style="color:#E1E4E8;">el</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">slotTarget</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`&quot;default&quot;\`},fn:\${</span><span style="color:#E1E4E8;">fn</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">reverseProxy</span><span style="color:#9ECBFF;">}}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genScopedSlot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenState</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. 使用到的变量，将其作为参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slotScope</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.slotScope </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> emptySlotScopeToken</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(el.slotScope)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2. 定义可以生成 vnode 的函数，并传入定义的参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`function(\${</span><span style="color:#24292E;">slotScope</span><span style="color:#032F62;">}){\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`return \${</span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">tag</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;template&#39;</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">if</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#24292E;">isLegacySyntax</span></span>
<span class="line"><span style="color:#032F62;">        </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`(\${</span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">if</span><span style="color:#032F62;">})?\${</span><span style="color:#6F42C1;">genChildren</span><span style="color:#032F62;">(</span><span style="color:#24292E;">el</span><span style="color:#032F62;">, </span><span style="color:#24292E;">state</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;undefined&#39;}:undefined\`</span></span>
<span class="line"><span style="color:#032F62;">        </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">genChildren</span><span style="color:#032F62;">(</span><span style="color:#24292E;">el</span><span style="color:#032F62;">, </span><span style="color:#24292E;">state</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">genElement</span><span style="color:#032F62;">(</span><span style="color:#24292E;">el</span><span style="color:#032F62;">, </span><span style="color:#24292E;">state</span><span style="color:#032F62;">)</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">}}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reverseProxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slotScope </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`,proxy:true\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 3. 生成键值对形式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`{key:\${</span><span style="color:#24292E;">el</span><span style="color:#032F62;">.</span><span style="color:#24292E;">slotTarget</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`&quot;default&quot;\`},fn:\${</span><span style="color:#24292E;">fn</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">reverseProxy</span><span style="color:#032F62;">}}\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="父组件render" tabindex="-1">父组件render <a class="header-anchor" href="#父组件render" aria-label="Permalink to &quot;父组件render&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveScopedSlots</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 例如</span></span>
<span class="line"><span style="color:#6A737D;">   * [</span></span>
<span class="line"><span style="color:#6A737D;">   *  {</span></span>
<span class="line"><span style="color:#6A737D;">   *    key: default</span></span>
<span class="line"><span style="color:#6A737D;">   *    fn: (user) =&gt; {...}</span></span>
<span class="line"><span style="color:#6A737D;">   *  }</span></span>
<span class="line"><span style="color:#6A737D;">   * ]</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">fns</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopedSlotsData</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">res</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// null 或者 undefined 或 {xx}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hasDynamicKeys</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否强制更新</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">contentHashKey</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 不强制更新时的 hash</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">$stable</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> } {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ! $stable 根据 hasDynamicKeys 判断，在 generate 的时候已经生成</span></span>
<span class="line"><span style="color:#E1E4E8;">  res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> { $stable: </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasDynamicKeys }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> fns.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fns[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(slot)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolveScopedSlots</span><span style="color:#E1E4E8;">(slot, res, hasDynamicKeys)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (slot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (slot.proxy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        slot.fn.proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      res[slot.key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slot.fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 转换成了 res { default: fn1, header: fn2  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (contentHashKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">res</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">).$key = contentHashKey</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  return res</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveScopedSlots</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 例如</span></span>
<span class="line"><span style="color:#6A737D;">   * [</span></span>
<span class="line"><span style="color:#6A737D;">   *  {</span></span>
<span class="line"><span style="color:#6A737D;">   *    key: default</span></span>
<span class="line"><span style="color:#6A737D;">   *    fn: (user) =&gt; {...}</span></span>
<span class="line"><span style="color:#6A737D;">   *  }</span></span>
<span class="line"><span style="color:#6A737D;">   * ]</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">fns</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopedSlotsData</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">res</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// null 或者 undefined 或 {xx}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hasDynamicKeys</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否强制更新</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">contentHashKey</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 不强制更新时的 hash</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">, </span><span style="color:#E36209;">$stable</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> } {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ! $stable 根据 hasDynamicKeys 判断，在 generate 的时候已经生成</span></span>
<span class="line"><span style="color:#24292E;">  res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> { $stable: </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasDynamicKeys }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> fns.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fns[i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(slot)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolveScopedSlots</span><span style="color:#24292E;">(slot, res, hasDynamicKeys)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (slot) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (slot.proxy) {</span></span>
<span class="line"><span style="color:#24292E;">        slot.fn.proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      res[slot.key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slot.fn</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 转换成了 res { default: fn1, header: fn2  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (contentHashKey) {</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">res</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">).$key = contentHashKey</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  return res</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件开始实例化" tabindex="-1">子组件开始实例化 <a class="header-anchor" href="#子组件开始实例化" aria-label="Permalink to &quot;子组件开始实例化&quot;">​</a></h2><p>父组件编译完毕后，更新时，会遇到<code>ChildComponent</code>组件，进入到子组件的创建环节，此时<code>data</code>里面包含处理后的<code>scopedSlots</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComponentInstanceForVnode</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">parent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalComponentOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    _isComponent: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    _parentVnode: vnode, </span><span style="color:#6A737D;">// vnode.data 中存放着 scopedSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">    parent </span><span style="color:#6A737D;">// 指向当前更新的组件的实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// render 阶段 createComponent 生成vnode的时候，</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// options 都存在componentOptions中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> vnode.componentOptions.</span><span style="color:#B392F0;">Ctor</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComponentInstanceForVnode</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">parent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalComponentOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    _isComponent: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    _parentVnode: vnode, </span><span style="color:#6A737D;">// vnode.data 中存放着 scopedSlots</span></span>
<span class="line"><span style="color:#24292E;">    parent </span><span style="color:#6A737D;">// 指向当前更新的组件的实例</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// render 阶段 createComponent 生成vnode的时候，</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// options 都存在componentOptions中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> vnode.componentOptions.</span><span style="color:#6F42C1;">Ctor</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件合并选项" tabindex="-1">子组件合并选项 <a class="header-anchor" href="#子组件合并选项" aria-label="Permalink to &quot;子组件合并选项&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initInternalComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalComponentOptions</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * Vue 构造函数的 options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * const options: InternalComponentOptions = {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// *   _isComponent: true,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// *   _parentVnode: vnode,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// *   parent</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">opts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(vm.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">.options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// _parentVnode 为组件的 vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentVnode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options._parentVnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.parent</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts._parentVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentVnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnodeComponentOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentVnode.componentOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件传值</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts.propsData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnodeComponentOptions.propsData</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件监听的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts._parentListeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnodeComponentOptions.listeners</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件内部的内容解析为 children。</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts._renderChildren </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnodeComponentOptions.children</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts._componentTag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnodeComponentOptions.tag</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initInternalComponent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalComponentOptions</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * Vue 构造函数的 options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * const options: InternalComponentOptions = {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// *   _isComponent: true,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// *   _parentVnode: vnode,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// *   parent</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">opts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(vm.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">.options)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// _parentVnode 为组件的 vnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentVnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options._parentVnode</span></span>
<span class="line"><span style="color:#24292E;">  opts.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.parent</span></span>
<span class="line"><span style="color:#24292E;">  opts._parentVnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentVnode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnodeComponentOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentVnode.componentOptions</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件传值</span></span>
<span class="line"><span style="color:#24292E;">  opts.propsData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnodeComponentOptions.propsData</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件监听的事件</span></span>
<span class="line"><span style="color:#24292E;">  opts._parentListeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnodeComponentOptions.listeners</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件内部的内容解析为 children。</span></span>
<span class="line"><span style="color:#24292E;">  opts._renderChildren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnodeComponentOptions.children</span></span>
<span class="line"><span style="color:#24292E;">  opts._componentTag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnodeComponentOptions.tag</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件数据初始化" tabindex="-1">子组件数据初始化 <a class="header-anchor" href="#子组件数据初始化" aria-label="Permalink to &quot;子组件数据初始化&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initRender</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentVnode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options._parentVnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentVnode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parentVnode.context</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// _renderChildren 为父组件调用子组件时子组件之间的节点。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通过 resolveSlots方法 将 children 转换成 slots 形式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// slots = { default: [Vnode1, Vnode2], [name]: [Vnode], ... }</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm.$slots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveSlots</span><span style="color:#E1E4E8;">(options._renderChildren, renderContext)</span></span>
<span class="line"><span style="color:#E1E4E8;">  vm.$scopedSlots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> emptyObject</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveSlots</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt; } {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">children </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slots</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> l;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 删除 data.attrs.slot 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> data.attrs </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> data.attrs.slot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> data.attrs.slot</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 data.slot 存在，说明此时 slotScope 不存在（genData时处理的）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((child.context </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> child.fnContext </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> context) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      data </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> data.slot </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.slot</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (slots[name] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (slots[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        slot.push.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(slot, child.children </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [])</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        slot.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(child)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 其余的默认放到 default 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      (slots.default </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (slots.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [])).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(child)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 忽略无用 slot</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> slots) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (slots[name].</span><span style="color:#B392F0;">every</span><span style="color:#E1E4E8;">(isWhitespace)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> slots[name]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> slots</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initRender</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentVnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options._parentVnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentVnode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parentVnode.context</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// _renderChildren 为父组件调用子组件时子组件之间的节点。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通过 resolveSlots方法 将 children 转换成 slots 形式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// slots = { default: [Vnode1, Vnode2], [name]: [Vnode], ... }</span></span>
<span class="line"><span style="color:#24292E;">  vm.$slots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveSlots</span><span style="color:#24292E;">(options._renderChildren, renderContext)</span></span>
<span class="line"><span style="color:#24292E;">  vm.$scopedSlots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> emptyObject</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveSlots</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Component</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt; } {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">children </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slots</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> l;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children[i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 删除 data.attrs.slot 属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> data.attrs </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> data.attrs.slot) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> data.attrs.slot</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果 data.slot 存在，说明此时 slotScope 不存在（genData时处理的）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((child.context </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> child.fnContext </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> context) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      data </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> data.slot </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.slot</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (slots[name] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (slots[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;template&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        slot.push.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(slot, child.children </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> [])</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        slot.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(child)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 其余的默认放到 default 中</span></span>
<span class="line"><span style="color:#24292E;">      (slots.default </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (slots.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [])).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(child)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 忽略无用 slot</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> slots) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (slots[name].</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(isWhitespace)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> slots[name]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slots</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件slot使用" tabindex="-1">子组件slot使用 <a class="header-anchor" href="#子组件slot使用" aria-label="Permalink to &quot;子组件slot使用&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="子组件slot-parse" tabindex="-1">子组件slot parse <a class="header-anchor" href="#子组件slot-parse" aria-label="Permalink to &quot;子组件slot parse&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processSlotOutlet</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;slot&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加 slotName 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.slotName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBindingAttr</span><span style="color:#E1E4E8;">(el, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processSlotOutlet</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;slot&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加 slotName 属性</span></span>
<span class="line"><span style="color:#24292E;">    el.slotName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBindingAttr</span><span style="color:#24292E;">(el, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件slot-generate" tabindex="-1">子组件slot generate <a class="header-anchor" href="#子组件slot-generate" aria-label="Permalink to &quot;子组件slot generate&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genSlot</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenState</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slotName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.slotName </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;default&quot;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 默认的 children 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">children</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genChildren</span><span style="color:#E1E4E8;">(el, state)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// _t 函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`_t(\${</span><span style="color:#E1E4E8;">slotName</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">children</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`,\${</span><span style="color:#E1E4E8;">children</span><span style="color:#9ECBFF;">}\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;&#39;}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 静态属性 + 动态绑定属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">attrs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.attrs </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> el.dynamicAttrs</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genProps</span><span style="color:#E1E4E8;">((el.attrs </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(el.dynamicAttrs </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#B392F0;">camelize</span><span style="color:#E1E4E8;">(attr.name),</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: attr.value,</span></span>
<span class="line"><span style="color:#E1E4E8;">      dynamic: attr.dynamic</span></span>
<span class="line"><span style="color:#E1E4E8;">    })))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> el.attrsMap[</span><span style="color:#9ECBFF;">&#39;v-bind&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((attrs </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> bind) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">children) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`,null\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (attrs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`,\${</span><span style="color:#E1E4E8;">attrs</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bind) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">attrs</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;,null&#39;},\${</span><span style="color:#E1E4E8;">bind</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genSlot</span><span style="color:#24292E;">(</span><span style="color:#E36209;">el</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;">, </span><span style="color:#E36209;">state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenState</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slotName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.slotName </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;default&quot;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认的 children 节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">children</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genChildren</span><span style="color:#24292E;">(el, state)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// _t 函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`_t(\${</span><span style="color:#24292E;">slotName</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">children</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`,\${</span><span style="color:#24292E;">children</span><span style="color:#032F62;">}\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;&#39;}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 静态属性 + 动态绑定属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">attrs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.attrs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> el.dynamicAttrs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genProps</span><span style="color:#24292E;">((el.attrs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(el.dynamicAttrs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">attr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#6F42C1;">camelize</span><span style="color:#24292E;">(attr.name),</span></span>
<span class="line"><span style="color:#24292E;">      value: attr.value,</span></span>
<span class="line"><span style="color:#24292E;">      dynamic: attr.dynamic</span></span>
<span class="line"><span style="color:#24292E;">    })))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> el.attrsMap[</span><span style="color:#032F62;">&#39;v-bind&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((attrs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> bind) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">children) {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`,null\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (attrs) {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`,\${</span><span style="color:#24292E;">attrs</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bind) {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">attrs</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;,null&#39;},\${</span><span style="color:#24292E;">bind</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子组件-render" tabindex="-1">子组件 render <a class="header-anchor" href="#子组件-render" aria-label="Permalink to &quot;子组件 render&quot;">​</a></h2><h3 id="render" tabindex="-1">_render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;_render&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">render</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">_parentVnode</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.$options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (_parentVnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vm.$scopedSlots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeScopedSlots</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果有插槽有 scope 的时候，scopedSlots存在</span></span>
<span class="line"><span style="color:#E1E4E8;">      _parentVnode.data.scopedSlots,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// initRender 解析出来的 slots，通过 children 转换而来</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm.$slots,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 当前的 scopedSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">      vm.$scopedSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">render</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">_parentVnode</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.$options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (_parentVnode) {</span></span>
<span class="line"><span style="color:#24292E;">    vm.$scopedSlots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeScopedSlots</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果有插槽有 scope 的时候，scopedSlots存在</span></span>
<span class="line"><span style="color:#24292E;">      _parentVnode.data.scopedSlots,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// initRender 解析出来的 slots，通过 children 转换而来</span></span>
<span class="line"><span style="color:#24292E;">      vm.$slots,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 当前的 scopedSlots</span></span>
<span class="line"><span style="color:#24292E;">      vm.$scopedSlots</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="normalizescopedslots" tabindex="-1">normalizeScopedSlots <a class="header-anchor" href="#normalizescopedslots" aria-label="Permalink to &quot;normalizeScopedSlots&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeScopedSlots</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 有 scope 时解析出来的 scopedSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">slots</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// children 转换而来的 slots，都是没有 slotScope 的 slot</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">normalSlots</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt; },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前组件的原来的 scopeSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">prevSlots</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否具有普通的 slots</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasNormalSlots</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(normalSlots).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// $stable 表示是否需要强制更新，不需要则为true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isStable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slots </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">slots.$stable </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasNormalSlots</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slots </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> slots.$key</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">slots) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> slots) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (slots[key] </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> key[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 用 scope 的覆盖 没有 scope 的</span></span>
<span class="line"><span style="color:#E1E4E8;">        res[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeScopedSlot</span><span style="color:#E1E4E8;">(normalSlots, key, slots[key])</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将普通的内容也转换成 scopedSlots 形式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> normalSlots) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> res)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 将 normal 转变为函数形式</span></span>
<span class="line"><span style="color:#E1E4E8;">      res[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxyNormalSlot</span><span style="color:#E1E4E8;">(normalSlots, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// * 当前的插槽上面设置的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;">(res, </span><span style="color:#9ECBFF;">&#39;$stable&#39;</span><span style="color:#E1E4E8;">, isStable)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;">(res, </span><span style="color:#9ECBFF;">&#39;$key&#39;</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;">(res, </span><span style="color:#9ECBFF;">&#39;$hasNormal&#39;</span><span style="color:#E1E4E8;">, hasNormalSlots)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// res 里包含了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeScopedSlots</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 有 scope 时解析出来的 scopedSlots</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">slots</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// children 转换而来的 slots，都是没有 slotScope 的 slot</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">normalSlots</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt; },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当前组件的原来的 scopeSlots</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">prevSlots</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否具有普通的 slots</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasNormalSlots</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(normalSlots).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// $stable 表示是否需要强制更新，不需要则为true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isStable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slots </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">slots.$stable </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasNormalSlots</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slots </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> slots.$key</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">slots) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> slots) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (slots[key] </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 用 scope 的覆盖 没有 scope 的</span></span>
<span class="line"><span style="color:#24292E;">        res[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeScopedSlot</span><span style="color:#24292E;">(normalSlots, key, slots[key])</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将普通的内容也转换成 scopedSlots 形式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> normalSlots) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> res)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 将 normal 转变为函数形式</span></span>
<span class="line"><span style="color:#24292E;">      res[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxyNormalSlot</span><span style="color:#24292E;">(normalSlots, key)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// * 当前的插槽上面设置的属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;">(res, </span><span style="color:#032F62;">&#39;$stable&#39;</span><span style="color:#24292E;">, isStable)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;">(res, </span><span style="color:#032F62;">&#39;$key&#39;</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;">(res, </span><span style="color:#032F62;">&#39;$hasNormal&#39;</span><span style="color:#24292E;">, hasNormalSlots)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// res 里包含了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="renderslot" tabindex="-1">renderSlot <a class="header-anchor" href="#renderslot" aria-label="Permalink to &quot;renderSlot&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderSlot</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">fallback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">bindObject</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取对应函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scopedSlotFn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$scopedSlots[name]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果存在对应的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (scopedSlotFn) { </span><span style="color:#6A737D;">// scoped slot</span></span>
<span class="line"><span style="color:#E1E4E8;">    props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bindObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 处理参数</span></span>
<span class="line"><span style="color:#E1E4E8;">      props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({}, bindObject), props)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行函数，返回 vnodes</span></span>
<span class="line"><span style="color:#E1E4E8;">    nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scopedSlotFn</span><span style="color:#E1E4E8;">(props) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> fallback</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果找不到对应的 name，那么使用默认的 vnodes</span></span>
<span class="line"><span style="color:#E1E4E8;">    nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$slots[name] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> fallback</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> props.slot</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;">, { slot: target }, nodes)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderSlot</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">fallback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">bindObject</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Object</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取对应函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scopedSlotFn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$scopedSlots[name]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nodes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果存在对应的函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (scopedSlotFn) { </span><span style="color:#6A737D;">// scoped slot</span></span>
<span class="line"><span style="color:#24292E;">    props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bindObject) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 处理参数</span></span>
<span class="line"><span style="color:#24292E;">      props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({}, bindObject), props)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行函数，返回 vnodes</span></span>
<span class="line"><span style="color:#24292E;">    nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scopedSlotFn</span><span style="color:#24292E;">(props) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> fallback</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果找不到对应的 name，那么使用默认的 vnodes</span></span>
<span class="line"><span style="color:#24292E;">    nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$slots[name] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> fallback</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> props.slot</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;template&#39;</span><span style="color:#24292E;">, { slot: target }, nodes)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nodes</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>插槽在处理的时候主要分为两种类型：</p><ul><li>一种是带有<code>slotScope</code>的，此时具有参数传入。</li><li>一种是不带有<code>slotScope</code>，为普通插槽。</li></ul><p>在编译的时候：</p><ul><li>带有<code>slotScope</code>的转换为<code>scopedSlots</code>对象，存放到<code>component</code>组件的<code>vnode.data</code>里面：键为<code>slot name</code>，值为能生成<code>vnode</code>的函数（函数的参数与<code>scope</code>值一致）。</li><li>不带有<code>slotScope</code>的标记但是<code>slotTarget</code>存在，此时会标记<code>el.data.slot</code>为<code>true</code>。</li><li>对于组件下的内容，全部都会存放到<code>vnode.componentOptions.children</code>属性中。</li></ul><p>在子组件初始化的时候：</p><ul><li>用<code>vm.$options._renderChildren</code>表示<code>children</code>。</li><li>将<code>children</code>内容中存在<code>data.slot</code>的<code>child</code>，转化到<code>vm.$slots</code>属性当中，为<code>{ default: [Vnode1, Vnodee2] }</code>形式。</li></ul><p>在子组件渲染的时候：</p><ul><li>将<code>vm.$slots</code>与<code>vm.$scopedSlots</code>合并到<code>vm.$scopedSlots</code>，转换为<code>{ default: (props) =&gt; Vnodes}</code>的形式。</li><li>渲染<code>slot</code>组件时，根据<code>name</code>从<code>vm.$scopedSlots</code>中获取对应的函数，执行返回<code>vnodes</code>。</li></ul>`,44),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const D=s(p,[["render",t]]);export{A as __pageData,D as default};
